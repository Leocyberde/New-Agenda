./.local/state/replit/agent/filesystem/filesystem_state.json:{"file_contents":{"README_DEPLOY.md":{"content":"# Deploy no Render - Projeto Agenda\n\nEste projeto foi configurado para deploy em produção no Render. Aqui estão as instruções para fazer o deploy:\n\n## Configurações Realizadas\n\n1. **Migração de SQLite para PostgreSQL**: O projeto foi modificado para usar PostgreSQL em vez de SQLite\n2. **Variáveis de ambiente configuradas**: Arquivo `.env` criado com as credenciais fornecidas\n3. **Build de produção testado**: O comando `npm run build` foi executado com sucesso\n\n## Instruções para Deploy no Render\n\n### 1. Criar um novo Web Service no Render\n\n1. Acesse [render.com](https://render.com) e faça login\n2. Clique em \"New +\" e selecione \"Web Service\"\n3. Conecte seu repositório Git ou faça upload do código\n\n### 2. Configurações do Web Service\n\n**Build Command:**\n```\nnpm install && npm run build\n```\n\n**Start Command:**\n```\nnpm start\n```\n\n**Environment:**\n- Node\n\n**Node Version:**\n- 18 ou superior\n\n### 3. Variáveis de Ambiente\n\nConfigure as seguintes variáveis de ambiente no painel do Render:\n\n```\nDATABASE_URL=postgresql://salaodb_user:NhlvMZmSK9C9WPy21gvqYwkRyiMhzbBF@dpg-d35ajbogjchc73eva860-a/salaodb\nEMAIL_USER=gaelsalao12@gmail.com\nEMAIL_PASSWORD=dbde barg qkyp lnvs\nNODE_ENV=production\nJWT_SECRET=R29vZ2xlSXNBbHdheXNTdXBwb3J0aW5nWW91ckRldmVsb3BtZW50MjAyNQ==\n```\n\n### 4. Configurações Adicionais\n\n- **Auto-Deploy**: Ative para deploy automático quando houver mudanças no repositório\n- **Health Check Path**: `/` (opcional)\n\n## Estrutura do Projeto\n\n- `client/`: Frontend React\n- `server/`: Backend Express/Node.js\n- `shared/`: Esquemas compartilhados (Drizzle ORM)\n- `dist/`: Arquivos de build (gerados automaticamente)\n\n## Scripts Disponíveis\n\n- `npm run dev`: Desenvolvimento local\n- `npm run build`: Build de produção\n- `npm start`: Iniciar servidor de produção\n- `npm run db:push`: Aplicar mudanças no banco de dados\n\n## Observações Importantes\n\n1. **Banco de Dados**: O projeto está configurado para usar o PostgreSQL fornecido\n2. **Migrações**: As migrações do banco serão executadas automaticamente na inicialização\n3. **Uploads**: A pasta `uploads/` contém arquivos de logo que serão mantidos\n4. **CORS**: O servidor está configurado para aceitar requisições de qualquer origem\n\n## Troubleshooting\n\nSe houver problemas no deploy:\n\n1. Verifique se todas as variáveis de ambiente estão configuradas corretamente\n2. Confirme se o banco PostgreSQL está acessível\n3. Verifique os logs do Render para identificar erros específicos\n4. Certifique-se de que a versão do Node.js é compatível (18+)\n\n## Contato\n\nEm caso de dúvidas sobre o deploy, verifique os logs do Render ou entre em contato com o suporte técnico.\n\n","size_bytes":2682},"README_DEPLOY_RENDER.md":{"content":"# Deploy no Render - Guia Completo\n\nEste guia explica como fazer o deploy da aplicação Agenda no Render com migração automática das tabelas para PostgreSQL.\n\n## Alterações Realizadas\n\n### 1. Schema do Banco de Dados\n- **Arquivo alterado**: `shared/schema.ts`\n- **Mudança**: Convertido de SQLite (`sqliteTable`) para PostgreSQL (`pgTable`)\n- **Backup**: O schema original foi salvo como `shared/schema-sqlite-backup.ts`\n\n### 2. Migrações\n- **Novas migrações**: Geradas automaticamente para PostgreSQL no diretório `drizzle/`\n- **Arquivo principal**: `drizzle/0000_slow_wendell_vaughn.sql`\n\n### 3. Scripts de Deploy\n- **build.sh**: Script de build que executa migrações automaticamente\n- **migrate.js**: Script específico para executar migrações\n- **package.json**: Adicionados scripts `migrate` e `postinstall`\n\n## Como Fazer o Deploy\n\n### Passo 1: Preparar o Repositório\n1. Faça commit de todas as alterações:\n   ```bash\n   git add .\n   git commit -m \"Migração para PostgreSQL e configuração do Render\"\n   git push\n   ```\n\n### Passo 2: Configurar o Render\n1. Acesse [render.com](https://render.com) e faça login\n2. Clique em \"New +\" e selecione \"Web Service\"\n3. Conecte seu repositório GitHub\n\n### Passo 3: Configurar o Banco de Dados\n1. No dashboard do Render, clique em \"New +\" e selecione \"PostgreSQL\"\n2. Configure o banco:\n   - **Name**: `agenda-pag-db`\n   - **Database**: `agenda_pag`\n   - **User**: `agenda_user`\n3. Anote a **Database URL** que será gerada\n\n### Passo 4: Configurar o Web Service\n1. Configure o serviço:\n   - **Name**: `agenda-pag`\n   - **Environment**: `Node`\n   - **Build Command**: `./build.sh`\n   - **Start Command**: `npm start`\n\n2. Adicione as variáveis de ambiente:\n   - **NODE_ENV**: `production`\n   - **DATABASE_URL**: Cole a URL do banco PostgreSQL criado no passo 3\n\n### Passo 5: Deploy Automático\n1. Clique em \"Create Web Service\"\n2. O Render executará automaticamente:\n   - Instalação das dependências (`npm install`)\n   - Execução das migrações (`npx drizzle-kit migrate`)\n   - Build do projeto (`npm run build`)\n   - Inicialização do servidor\n\n## Verificação do Deploy\n\n### 1. Logs do Build\nVerifique os logs para confirmar que:\n- As dependências foram instaladas\n- As migrações foram executadas com sucesso\n- O build foi concluído\n- O servidor iniciou corretamente\n\n### 2. Banco de Dados\nAs seguintes tabelas devem ser criadas automaticamente:\n- `users`\n- `merchants`\n- `services`\n- `employees`\n- `clients`\n- `appointments`\n- `penalties`\n- `promotions`\n- `employee_days_off`\n\n### 3. Funcionalidades\nTeste as principais funcionalidades:\n- Login de usuário\n- Cadastro de estabelecimentos\n- Criação de serviços\n- Agendamentos\n\n## Troubleshooting\n\n### Erro de Migração\nSe as migrações falharem:\n1. Verifique se a `DATABASE_URL` está correta\n2. Confirme se o banco PostgreSQL está ativo\n3. Verifique os logs para erros específicos\n\n### Erro de Conexão\nSe houver problemas de conexão:\n1. Verifique se o servidor está escutando em `0.0.0.0`\n2. Confirme se a porta está configurada corretamente (`process.env.PORT`)\n\n### Dados de Teste\nO sistema criará automaticamente um usuário admin:\n- **Email**: `leolulu842@gmail.com` (ou valor da variável `EMAIL_USER`)\n- **Senha**: `123456` (ou valor da variável `EMAIL_PASSWORD`)\n\n## Scripts Disponíveis\n\n- `npm run dev`: Executa em modo desenvolvimento\n- `npm run build`: Faz build do projeto\n- `npm start`: Inicia o servidor em produção\n- `npm run migrate`: Executa apenas as migrações\n- `npm run db:push`: Push do schema para o banco\n\n## Estrutura de Arquivos Importantes\n\n```\n├── shared/\n│   ├── schema.ts                 # Schema PostgreSQL (novo)\n│   └── schema-sqlite-backup.ts   # Backup do schema SQLite\n├── drizzle/\n│   ├── 0000_slow_wendell_vaughn.sql  # Migração PostgreSQL\n│   └── meta/\n│       └── _journal.json\n├── server/\n│   └── db.ts                     # Configuração do banco\n├── build.sh                      # Script de build\n├── migrate.js                    # Script de migração\n├── render.yaml                   # Configuração do Render (opcional)\n└── README_DEPLOY_RENDER.md       # Este arquivo\n```\n\n## Suporte\n\nSe encontrar problemas durante o deploy:\n1. Verifique os logs do Render\n2. Confirme se todas as variáveis de ambiente estão configuradas\n3. Teste localmente com PostgreSQL antes do deploy\n4. Verifique se o repositório está atualizado com todas as alterações\n\n","size_bytes":4545},"build.sh":{"content":"#!/bin/bash\n\n# Script de build para o Render\necho \"Iniciando processo de build...\"\n\n# Instalar dependências\necho \"Instalando dependências...\"\nnpm install\n\n# Verificar se DATABASE_URL está definida\nif [ -z \"$DATABASE_URL\" ]; then\n  echo \"ERRO: Variável de ambiente DATABASE_URL não definida. As migrações não podem ser executadas.\"\n  exit 1\nfi\n\n# Executar migrações do banco de dados explicitamente\necho \"Executando migrações do banco de dados via node migrate.js...\"\nnode migrate.js\n\n# Build do projeto\necho \"Fazendo build do projeto...\"\nnpm run build\n\necho \"Build concluído com sucesso!\"\n\n\n","size_bytes":604},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./drizzle\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL || \"postgresql://user:password@host:port/database\",\n  },\n});\n\n\n","size_bytes":268},"env.d.ts":{"content":"/// <reference types=\"node\" />","size_bytes":30},"migrate-system-settings.js":{"content":"\nimport Database from 'better-sqlite3';\nimport { randomUUID } from 'crypto';\n\nconst db = new Database('./beauty_scheduler.db');\n\nconsole.log('Running system settings migration...');\n\ntry {\n  // Check if system_settings table already exists\n  const tableExists = db.prepare(`\n    SELECT name FROM sqlite_master WHERE type='table' AND name='system_settings'\n  `).get();\n\n  if (!tableExists) {\n    console.log('Creating system_settings table...');\n    \n    // Create system_settings table\n    db.exec(`\n      CREATE TABLE system_settings (\n        id TEXT PRIMARY KEY,\n        key TEXT NOT NULL UNIQUE,\n        value TEXT NOT NULL,\n        description TEXT,\n        type TEXT NOT NULL DEFAULT 'string',\n        created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Insert default settings\n    const insertSetting = db.prepare(`\n      INSERT INTO system_settings (id, key, value, description, type, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const now = new Date().toISOString();\n\n    // VIP plan price (R$ 50.00 in cents)\n    insertSetting.run(\n      randomUUID(),\n      'vip_plan_price',\n      '5000',\n      'Valor mensal do plano VIP em centavos',\n      'number',\n      now,\n      now\n    );\n\n    // Trial plan duration (10 days)\n    insertSetting.run(\n      randomUUID(),\n      'trial_plan_duration',\n      '10',\n      'Duração do período de teste em dias',\n      'number',\n      now,\n      now\n    );\n\n    // VIP plan duration (30 days)\n    insertSetting.run(\n      randomUUID(),\n      'vip_plan_duration',\n      '30',\n      'Duração do plano VIP em dias',\n      'number',\n      now,\n      now\n    );\n\n    console.log('✅ System settings table created and populated successfully!');\n  } else {\n    console.log('⚠️  system_settings table already exists, skipping creation');\n  }\n\n  // Show current settings\n  const settings = db.prepare('SELECT * FROM system_settings').all();\n  console.log('\\nCurrent system settings:');\n  settings.forEach(setting => {\n    const displayValue = setting.type === 'number' && setting.key.includes('price') \n      ? `R$ ${(parseInt(setting.value) / 100).toFixed(2)}`\n      : setting.value;\n    console.log(`- ${setting.key}: ${displayValue} (${setting.description})`);\n  });\n\n} catch (error) {\n  console.error('❌ Migration failed:', error);\n  process.exit(1);\n} finally {\n  db.close();\n}\n\nconsole.log('\\n🎉 Migration completed successfully!');\n","size_bytes":2507},"migrate.js":{"content":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { migrate } from \"drizzle-orm/node-postgres/migrator\";\nimport { Pool } from \"pg\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport { randomUUID } from \"crypto\";\nimport { pgTable, text, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { z } from \"zod\";\n\nif (!process.env.DATABASE_URL) {\n  console.error(\"❌ DATABASE_URL não definida. Configure no Render/Replit.\");\n  process.exit(1);\n}\n\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\n// Define users table schema directly in the migration script\nconst users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nconst merchants = pgTable(\"merchants\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  ownerName: text(\"owner_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  logoUrl: text(\"logo_url\"),\n  isOpen: boolean(\"is_open\").notNull().default(true),\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"),\n  startTime: text(\"start_time\").notNull().default(\"09:00\"),\n  endTime: text(\"end_time\").notNull().default(\"18:00\"),\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"),\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"),\n  accessStartDate: timestamp(\"access_start_date\"),\n  accessEndDate: timestamp(\"access_end_date\"),\n  accessDurationDays: integer(\"access_duration_days\").default(30),\n  lastPaymentDate: timestamp(\"last_payment_date\"),\n  nextPaymentDue: timestamp(\"next_payment_due\"),\n  monthlyFee: integer(\"monthly_fee\").default(5000),\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"),\n  planStatus: text(\"plan_status\").notNull().default(\"free\"),\n  planValidity: timestamp(\"plan_validity\"),\n  noShowFeeEnabled: boolean(\"no_show_fee_enabled\").notNull().default(false),\n  noShowFeeAmount: integer(\"no_show_fee_amount\").default(0),\n  lateFeeEnabled: boolean(\"late_fee_enabled\").notNull().default(false),\n  lateFeeAmount: integer(\"late_fee_amount\").default(0),\n  lateToleranceMinutes: integer(\"late_tolerance_minutes\").default(15),\n  cancellationPolicyHours: integer(\"cancellation_policy_hours\").default(24),\n  cancellationFeeEnabled: boolean(\"cancellation_fee_enabled\").notNull().default(false),\n  cancellationFeeAmount: integer(\"cancellation_fee_amount\").default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nconst db = drizzle(pool, {\n  schema: { users, merchants }\n});\n\nasync function runMigrations() {\n  try {\n    console.log(\"=== INICIANDO MIGRAÇÕES (RENDER/REPLIT) ===\");\n    console.log(\"DATABASE_URL:\", process.env.DATABASE_URL ? \"DEFINIDA\" : \"NÃO DEFINIDA\");\n    console.log(\"NODE_ENV:\", process.env.NODE_ENV);\n    \n    // Verificar conexão com banco\n    try {\n      const testQuery = await pool.query('SELECT NOW()');\n      console.log(\"✅ Conexão com banco OK:\", testQuery.rows[0]);\n    } catch (error) {\n      console.error(\"❌ Erro de conexão com banco:\", error);\n      throw error;\n    }\n    \n    await migrate(db, { migrationsFolder: \"drizzle\" });\n    console.log(\"✅ Migrações executadas com sucesso!\");\n    \n    // Verificar se tabela users existe\n    const tableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'users'\n      );\n    `);\n    console.log(\"Tabela users existe:\", tableExists.rows[0].exists);\n    \n    // SEPARAR CREDENCIAIS: EMAIL_USER é para envio de emails, não para admin\n    // Credenciais do administrador são fixas\n    const adminEmail = \"leolulu842@gmail.com\";\n    const adminPassword = \"123456\";\n    \n    // Credenciais de email (para envio de notificações)\n    const emailUser = process.env.EMAIL_USER || \"gaelsalao12@gmail.com\";\n    const emailPassword = process.env.EMAIL_PASSWORD || \"dbde barg qkyp lnvs\";\n    \n    console.log(\"🔍 Verificando se usuário admin existe...\");\n    console.log(\"Admin email (para login):\", adminEmail);\n    console.log(\"Email service (para envios):\", emailUser);\n    \n    const existingAdmin = await db.select().from(users).where(eq(users.email, adminEmail)).execute();\n    console.log(\"Usuários encontrados com email admin:\", existingAdmin.length);\n\n    if (existingAdmin.length === 0) {\n      console.log(\"🚀 Criando usuário admin...\");\n      const hashedPassword = await bcrypt.hash(adminPassword, 10);\n      \n      const newUser = {\n        id: randomUUID(),\n        email: adminEmail,\n        password: hashedPassword,\n        role: \"admin\",\n        createdAt: new Date(),\n      };\n      \n      await db.insert(users).values(newUser).execute();\n      console.log(\"✅ Usuário admin criado com sucesso!\");\n      console.log(\"Admin ID:\", newUser.id);\n      console.log(\"Admin Email:\", newUser.email);\n      \n      // Verificar se foi realmente criado\n      const verification = await db.select().from(users).where(eq(users.email, adminEmail)).execute();\n      console.log(\"✅ Verificação pós-criação: usuários encontrados:\", verification.length);\n      \n    } else {\n      console.log(\"ℹ️ Usuário admin já existe.\");\n      console.log(\"Admin existente ID:\", existingAdmin[0].id);\n      console.log(\"Admin existente Email:\", existingAdmin[0].email);\n    }\n    \n    // Listar todos os usuários para debug\n    const allUsers = await db.select({ email: users.email, role: users.role }).from(users).execute();\n    console.log(\"📊 Total de usuários no banco:\", allUsers.length);\n    allUsers.forEach((user, index) => {\n      console.log(`Usuario ${index + 1}: ${user.email} (${user.role})`);\n    });\n    \n    // Listar todas as tabelas para debug\n    const allTables = await pool.query(`\n      SELECT tablename FROM pg_tables \n      WHERE schemaname = 'public';\n    `);\n    console.log(\"📋 Tabelas existentes:\", allTables.rows.map(row => row.tablename));\n    \n    await pool.end();\n    console.log(\"=== INICIALIZAÇÃO COMPLETA ===\");\n    console.log(\"🔑 Para fazer login use:\");\n    console.log(\"   Email: leolulu842@gmail.com\");\n    console.log(\"   Senha: 123456\");\n    console.log(\"📧 Para envio de emails será usado:\", emailUser);\n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ ERRO AO EXECUTAR MIGRAÇÕES:\", error);\n    console.error(\"Stack trace:\", error.stack);\n    await pool.end();\n    process.exit(1);\n  }\n}\n\nrunMigrations();\n\n","size_bytes":6791},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render.yaml":{"content":"services:\n  - type: web\n    name: agenda-pag\n    env: node\n    buildCommand: ./build.sh\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        fromDatabase:\n          name: agenda-pag-db\n          property: connectionString\n    autoDeploy: false\n\ndatabases:\n  - name: agenda-pag-db\n    databaseName: agenda_pag\n    user: agenda_user\n\n","size_bytes":402},"replit.md":{"content":"# Salon Booking Management System\n\n## Overview\nThis is a comprehensive salon/appointment booking management system built with React (frontend), Express.js (backend), and PostgreSQL database. The application allows salon owners to manage appointments, services, employees, clients, and business operations.\n\n## Recent Changes\n- **2025-09-18**: Successfully set up project in Replit environment\n  - Configured PostgreSQL database with Drizzle ORM\n  - Set up all required environment variables\n  - Configured Vite dev server with proper host settings for Replit\n  - Created workflow for development server on port 5000\n  - Verified API endpoints and frontend are working correctly\n  - **Added merchant self-registration functionality:**\n    - Login screen now includes \"Cadastre seu Salão\" option\n    - Multi-step signup flow with salon info → plan selection → payment\n    - Two plan options: 10-day free trial and 30-day VIP (R$ 50/month)\n    - VIP plan includes payment interface (frontend only)\n    - Backend API endpoint `/api/merchants/register` for public registration\n    - Automatic account activation for trial users\n    - Secure password hashing and plan validation\n    - **Automated welcome email system:**\n      - Sends personalized welcome emails upon merchant registration\n      - Professional HTML template with salon details and plan information\n      - Separate email content for trial vs VIP plans\n      - Integration with Gmail SMTP for reliable delivery\n      - Email delivery confirmation in API response\n\n## Project Architecture\n\n### Frontend (`client/`)\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite\n- **Styling**: Tailwind CSS with Radix UI components\n- **State Management**: TanStack React Query\n- **Routing**: Wouter\n- **Forms**: React Hook Form with Zod validation\n\n### Backend (`server/`)\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: JWT with Passport.js\n- **File Uploads**: Multer\n- **Session Management**: Express Session with PostgreSQL store\n\n### Database Schema (`shared/`)\nKey entities:\n- Users (admin system)\n- Merchants (salon owners)\n- Services (salon services)\n- Employees (staff members)\n- Clients (customers)\n- Appointments (bookings)\n- Penalties (fees for no-shows, cancellations)\n- Promotions (discounts)\n- Employee Days Off\n\n## Environment Configuration\nRequired environment variables:\n- `DATABASE_URL`: PostgreSQL connection string (configured)\n- `EMAIL_USER`: Email service username (configured)\n- `EMAIL_PASSWORD`: Email service password (configured) \n- `JWT_SECRET`: JWT signing secret (configured)\n- `NODE_ENV`: Environment mode (development/production)\n\n## Development\n- **Dev Server**: Runs on port 5000 with hot reload\n- **Host Configuration**: Uses 0.0.0.0 with allowedHosts: true for Replit compatibility\n- **Cache Control**: Configured to prevent caching issues in Replit iframe\n\n## Login Credentials\n- **Admin Email**: leolulu842@gmail.com\n- **Admin Password**: 123456\n\n## Key Features\n- Multi-role system (admin, merchant, employee, client)\n- Appointment scheduling and management\n- Service and pricing management\n- Employee scheduling and payroll tracking\n- Client management and history\n- Penalty system for no-shows and cancellations\n- Promotional campaigns\n- Real-time availability checking\n\n## User Preferences\n- Environment properly configured for Replit\n- All dependencies installed and working\n- Database migrations run automatically on startup\n- Development server configured with proper proxy settings","size_bytes":3553},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\nimport typography from \"@tailwindcss/typography\";\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2804},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n// import runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    // runtimeErrorOverlay(),\n    // ...(process.env.NODE_ENV !== \"production\" &&\n    // process.env.REPL_ID !== undefined\n    //   ? [\n    //       await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n    //         m.cartographer(),\n    //       ),\n    //     ]\n    //   : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    host: \"0.0.0.0\",\n    allowedHosts: true,\n  },\n});\n","size_bytes":1098},"server/db.ts":{"content":"import postgres from \"postgres\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\n\nconst client = postgres(process.env.DATABASE_URL!, {\n  ssl: {\n    rejectUnauthorized: false, // Render exige SSL mas não fornece CA customizada\n  },\n});\n\nexport const db = drizzle(client);\n\n// Função de compatibilidade\nexport async function initializeDatabase() {\n  return db;\n}\n","size_bytes":367},"server/email-service.ts":{"content":"import nodemailer from 'nodemailer';\n\nconst EMAIL_USER = process.env.EMAIL_USER;\nconst EMAIL_PASSWORD = process.env.EMAIL_PASSWORD;\n\n// Create email transporter\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: EMAIL_USER,\n    pass: EMAIL_PASSWORD,\n  },\n});\n\n// Email templates\nexport const generateWelcomeEmailTemplate = (merchantData: {\n  name: string;\n  ownerName: string;\n  email: string;\n  phone: string;\n  address: string;\n  planType: 'trial' | 'vip';\n  accessEndDate: Date;\n}) => {\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit', \n      year: 'numeric'\n    });\n  };\n\n  const planInfo = merchantData.planType === 'trial' \n    ? {\n        planName: 'Teste Grátis (10 dias)',\n        description: 'Você tem acesso completo a todas as funcionalidades por 10 dias, sem custo!',\n        nextSteps: 'Após os 10 dias, você poderá escolher um de nossos planos pagos para continuar usando o sistema.'\n      }\n    : {\n        planName: 'Plano VIP (30 dias)',\n        description: 'Você escolheu nosso plano premium com acesso a recursos avançados por 30 dias!',\n        nextSteps: 'Finalize o pagamento para ativar completamente sua conta e começar a usar todos os recursos VIP.'\n      };\n\n  return {\n    subject: `Bem-vindo ao Beauty Scheduler - ${merchantData.name}! 🎉`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Bem-vindo ao Beauty Scheduler</title>\n        <style>\n          body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 0; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }\n          .header h1 { margin: 0; font-size: 28px; font-weight: 600; }\n          .header p { margin: 10px 0 0; font-size: 16px; opacity: 0.9; }\n          .content { padding: 30px; }\n          .welcome-message { background-color: #f8f9ff; border-left: 4px solid #667eea; padding: 20px; margin: 20px 0; border-radius: 4px; }\n          .plan-info { background-color: ${merchantData.planType === 'vip' ? '#fff7ed' : '#f0fdf4'}; border: 1px solid ${merchantData.planType === 'vip' ? '#fed7aa' : '#bbf7d0'}; padding: 20px; margin: 20px 0; border-radius: 8px; }\n          .plan-badge { display: inline-block; padding: 6px 12px; border-radius: 20px; font-size: 14px; font-weight: 600; margin-bottom: 10px; ${merchantData.planType === 'vip' ? 'background-color: #f59e0b; color: white;' : 'background-color: #10b981; color: white;'} }\n          .salon-details { background-color: #f9fafb; padding: 20px; margin: 20px 0; border-radius: 8px; }\n          .detail-row { display: flex; padding: 8px 0; border-bottom: 1px solid #e5e7eb; }\n          .detail-row:last-child { border-bottom: none; }\n          .detail-label { font-weight: 600; color: #374151; width: 120px; flex-shrink: 0; }\n          .detail-value { color: #6b7280; flex: 1; }\n          .cta-button { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: 600; margin: 20px 0; transition: transform 0.2s; }\n          .cta-button:hover { transform: translateY(-2px); }\n          .footer { background-color: #f9fafb; padding: 20px; text-align: center; color: #6b7280; font-size: 14px; }\n          .footer a { color: #667eea; text-decoration: none; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>✂️ Beauty Scheduler</h1>\n            <p>Sistema de Agendamento para Salões de Beleza</p>\n          </div>\n          \n          <div class=\"content\">\n            <div class=\"welcome-message\">\n              <h2 style=\"margin-top: 0; color: #1f2937;\">Olá, ${merchantData.ownerName}! 👋</h2>\n              <p style=\"margin-bottom: 0; color: #4b5563; font-size: 16px; line-height: 1.6;\">\n                Seja muito bem-vindo(a) ao <strong>Beauty Scheduler</strong>! Estamos muito felizes em ter o <strong>${merchantData.name}</strong> em nossa plataforma.\n              </p>\n            </div>\n\n            <div class=\"plan-info\">\n              <div class=\"plan-badge\">${planInfo.planName}</div>\n              <h3 style=\"margin: 10px 0; color: #1f2937;\">Seu Plano</h3>\n              <p style=\"color: #4b5563; line-height: 1.6;\">${planInfo.description}</p>\n              <p style=\"color: #6b7280; font-size: 14px; margin-bottom: 10px;\"><strong>Acesso válido até:</strong> ${formatDate(merchantData.accessEndDate)}</p>\n              <p style=\"color: #6b7280; font-size: 14px; line-height: 1.5;\">${planInfo.nextSteps}</p>\n            </div>\n\n            <div class=\"salon-details\">\n              <h3 style=\"margin-top: 0; color: #1f2937;\">Dados do seu Salão</h3>\n              <div class=\"detail-row\">\n                <div class=\"detail-label\">Nome:</div>\n                <div class=\"detail-value\">${merchantData.name}</div>\n              </div>\n              <div class=\"detail-row\">\n                <div class=\"detail-label\">Proprietário:</div>\n                <div class=\"detail-value\">${merchantData.ownerName}</div>\n              </div>\n              <div class=\"detail-row\">\n                <div class=\"detail-label\">Email:</div>\n                <div class=\"detail-value\">${merchantData.email}</div>\n              </div>\n              <div class=\"detail-row\">\n                <div class=\"detail-label\">Telefone:</div>\n                <div class=\"detail-value\">${merchantData.phone}</div>\n              </div>\n              <div class=\"detail-row\">\n                <div class=\"detail-label\">Endereço:</div>\n                <div class=\"detail-value\">${merchantData.address}</div>\n              </div>\n            </div>\n\n            <h3 style=\"color: #1f2937;\">Primeiros Passos</h3>\n            <ul style=\"color: #4b5563; line-height: 1.8; padding-left: 20px;\">\n              <li><strong>Acesse sua conta:</strong> Faça login com o email ${merchantData.email}</li>\n              <li><strong>Configure seu salão:</strong> Adicione serviços, funcionários e horários de funcionamento</li>\n              <li><strong>Cadastre clientes:</strong> Importe ou adicione seus clientes</li>\n              <li><strong>Comece a agendar:</strong> Crie seus primeiros agendamentos</li>\n              <li><strong>Explore os recursos:</strong> Descubra relatórios, promoções e muito mais</li>\n            </ul>\n\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co` : 'http://localhost:5000'}\" class=\"cta-button\">\n                🚀 Acessar Minha Conta\n              </a>\n            </div>\n\n            <div style=\"background-color: #eff6ff; border: 1px solid #bfdbfe; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h4 style=\"margin-top: 0; color: #1e40af;\">💡 Precisa de Ajuda?</h4>\n              <p style=\"margin-bottom: 0; color: #1e40af; line-height: 1.6;\">\n                Nossa equipe de suporte está sempre disponível para ajudá-lo. Entre em contato conosco sempre que precisar!\n              </p>\n            </div>\n          </div>\n\n          <div class=\"footer\">\n            <p><strong>Beauty Scheduler</strong> - Sistema de Agendamento Profissional</p>\n            <p>© 2024 Beauty Scheduler. Todos os direitos reservados.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\nBem-vindo ao Beauty Scheduler - ${merchantData.name}!\n\nOlá, ${merchantData.ownerName}!\n\nSeja muito bem-vindo(a) ao Beauty Scheduler! Estamos muito felizes em ter o ${merchantData.name} em nossa plataforma.\n\nSEU PLANO: ${planInfo.planName}\n${planInfo.description}\nAcesso válido até: ${formatDate(merchantData.accessEndDate)}\n\nDADOS DO SEU SALÃO:\nNome: ${merchantData.name}\nProprietário: ${merchantData.ownerName}\nEmail: ${merchantData.email}\nTelefone: ${merchantData.phone}\nEndereço: ${merchantData.address}\n\nPRIMEIROS PASSOS:\n1. Acesse sua conta: Faça login com o email ${merchantData.email}\n2. Configure seu salão: Adicione serviços, funcionários e horários de funcionamento\n3. Cadastre clientes: Importe ou adicione seus clientes\n4. Comece a agendar: Crie seus primeiros agendamentos\n5. Explore os recursos: Descubra relatórios, promoções e muito mais\n\nAcesse sua conta em: ${process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co` : 'http://localhost:5000'}\n\nPrecisa de ajuda? Nossa equipe de suporte está sempre disponível para ajudá-lo!\n\nBeauty Scheduler - Sistema de Agendamento Profissional\n© 2024 Beauty Scheduler. Todos os direitos reservados.\n    `\n  };\n};\n\n// Send welcome email function\nexport const sendWelcomeEmail = async (merchantData: {\n  name: string;\n  ownerName: string;\n  email: string;\n  phone: string;\n  address: string;\n  planType: 'trial' | 'vip';\n  accessEndDate: Date;\n}): Promise<{ success: boolean; error?: string }> => {\n  try {\n    if (!EMAIL_USER || !EMAIL_PASSWORD) {\n      console.warn('Email credentials not configured. Skipping email send.');\n      return { success: false, error: 'Email credentials not configured' };\n    }\n\n    const emailTemplate = generateWelcomeEmailTemplate(merchantData);\n\n    const mailOptions = {\n      from: `\"Beauty Scheduler\" <${EMAIL_USER}>`,\n      to: merchantData.email,\n      subject: emailTemplate.subject,\n      html: emailTemplate.html,\n      text: emailTemplate.text,\n    };\n\n    console.log(`Sending welcome email to: ${merchantData.email}`);\n    const result = await transporter.sendMail(mailOptions);\n    console.log(`Welcome email sent successfully to ${merchantData.email}:`, result.messageId);\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error sending welcome email:', error);\n    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n  }\n};\n\n// Test email configuration\nexport const testEmailConfiguration = async (): Promise<{ success: boolean; error?: string }> => {\n  try {\n    await transporter.verify();\n    console.log('Email configuration is valid');\n    return { success: true };\n  } catch (error) {\n    console.error('Email configuration error:', error);\n    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n  }\n};","size_bytes":10762},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconsole.log(\"🔄 Iniciando index.ts…\");\nconsole.log(\"🌐 NODE_ENV =\", process.env.NODE_ENV);\nconsole.log(\"🌐 PORT recebido =\", process.env.PORT);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const sensitiveEndpoints = [\n    \"/api/auth/login\",\n    \"/api/auth/verify\",\n    \"/api/auth/refresh\",\n  ];\n\n  const sensitiveFields = [\n    \"token\",\n    \"password\",\n    \"hash\",\n    \"secret\",\n    \"key\",\n    \"authorization\",\n  ];\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n\n      if (\n        capturedJsonResponse &&\n        !sensitiveEndpoints.some((endpoint) => path.startsWith(endpoint))\n      ) {\n        const safeResponse = JSON.parse(JSON.stringify(capturedJsonResponse));\n\n        function redactSensitiveData(obj: any): any {\n          if (typeof obj !== \"object\" || obj === null) return obj;\n          if (Array.isArray(obj)) return obj.map(redactSensitiveData);\n\n          const result = { ...obj };\n          for (const key in result) {\n            if (\n              sensitiveFields.some((field) =>\n                key.toLowerCase().includes(field)\n              )\n            ) {\n              result[key] = \"[REDACTED]\";\n            } else if (typeof result[key] === \"object\") {\n              result[key] = redactSensitiveData(result[key]);\n            }\n          }\n          return result;\n        }\n\n        const redactedResponse = redactSensitiveData(safeResponse);\n        logLine += ` :: ${JSON.stringify(redactedResponse)}`;\n      } else if (sensitiveEndpoints.some((endpoint) => path.startsWith(endpoint))) {\n        logLine += ` :: [RESPONSE_REDACTED_FOR_SECURITY]`;\n      }\n\n      if (logLine.length > 200) logLine = logLine.slice(0, 199) + \"…\";\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    // Tratamento global de erros\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      console.error(\"❌ Express error handler:\", err);\n      res.status(status).json({ message });\n    });\n\n    // Somente usa Vite em desenvolvimento\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    const port = parseInt(process.env.PORT || \"5000\", 10);\n    server.listen(port, \"0.0.0.0\", () => {\n      log(`🚀 Server running on http://0.0.0.0:${port}`);\n    });\n  } catch (err) {\n    console.error(\"❌ Falha ao iniciar servidor:\", err);\n    process.exit(1); // Garante falha explícita para Render mostrar o erro\n  }\n})();\n            \n","size_bytes":3343},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { PostgreSQLStorage } from \"./sqlite-storage.js\";\nconst storage = new PostgreSQLStorage();\nimport { loginSchema, changePasswordSchema, insertMerchantSchema, merchantScheduleSchema, serviceSchema, appointmentSchema, insertEmployeeSchema, insertClientSchema, merchantPoliciesSchema, insertPromotionSchema, insertPromotionSchema as promotionSchema, merchantPoliciesSchema as bookingPoliciesSchema, type PublicMerchant, type Merchant, type Service, type Employee, type PublicEmployee, type Client, type PublicClient, type Appointment, type EmployeeDayOff, type InsertEmployeeDayOff, type Promotion, type InsertPromotion } from \"../shared/schema.js\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { randomUUID } from \"crypto\";\nimport { sendWelcomeEmail } from \"./email-service.js\";\nimport { MercadoPagoConfig, Payment } from \"mercadopago\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || (() => {\n  if (process.env.NODE_ENV === 'production') {\n    console.error('FATAL: JWT_SECRET environment variable is required in production');\n    process.exit(1);\n  }\n  return 'beauty-scheduler-secret-key';\n})();\n\n// Mercado Pago configuration\nconst client = new MercadoPagoConfig({\n  accessToken: process.env.MP_ACCESS_TOKEN || '',\n});\nconst payment = new Payment(client);\n\n// Helper functions to remove password from objects\nfunction toPublicMerchant(merchant: Merchant): PublicMerchant {\n  const { password, ...publicMerchant } = merchant;\n  return publicMerchant;\n}\n\nfunction toPublicEmployee(employee: Employee): PublicEmployee {\n  const { password, ...publicEmployee } = employee;\n  return publicEmployee;\n}\n\nfunction toPublicClient(client: Client): PublicClient {\n  const { password, ...publicClient } = client;\n  return publicClient;\n}\n\n// Extend Express Request interface\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\n\n// Middleware to verify JWT\nfunction authenticateToken(req: any, res: any, next: any) {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(\"=== DEBUG: authenticateToken middleware ===\");\n    console.log(\"URL:\", req.url);\n    console.log(\"Method:\", req.method);\n  }\n\n  const authHeader = req.headers['authorization'];\n  if (process.env.NODE_ENV === 'development') {\n    console.log(\"Authorization header:\", authHeader ? 'PRESENTE' : 'AUSENTE');\n  }\n\n  const token = authHeader && authHeader.split(' ')[1];\n  if (process.env.NODE_ENV === 'development') {\n    console.log(\"Token extracted:\", token ? 'PRESENTE' : 'AUSENTE');\n  }\n\n  if (!token) {\n    console.error(\"No token provided\");\n    return res.status(401).json({ message: \"Token de acesso requerido\" });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      console.error(\"JWT verification error:\", err.message);\n      return res.status(403).json({ message: \"Token inválido\" });\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(\"JWT verification successful, user ID:\", user.userId);\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// Renaming authenticateToken to requireAuth to match the changes\nconst requireAuth = authenticateToken;\n\n// Helper function to check if user has required roles\nfunction requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Acesso negado. Permissões insuficientes.\" });\n    }\n    next();\n  };\n}\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize storage\n  try {\n    if (storage.initialize) {\n      await storage.initialize();\n    }\n    console.log(\"Storage initialized successfully\");\n\n    // Automatically process expired merchant access on startup\n    try {\n      const processedCount = await storage.processExpiredAccess();\n      if (processedCount > 0) {\n        console.log(`Processed ${processedCount} expired merchants on startup`);\n      }\n    } catch (error) {\n      console.error(\"Failed to process expired merchants on startup:\", error);\n    }\n  } catch (error) {\n    console.error(\"Failed to initialize storage:\", error);\n    throw error;\n  }\n\n  // Ensure uploads directory exists\n  const uploadsDir = path.join(process.cwd(), 'uploads');\n  if (!fs.existsSync(uploadsDir)) {\n    fs.mkdirSync(uploadsDir, { recursive: true });\n  }\n\n  // Configure multer for file uploads\n  const uploadStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, uploadsDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = `${randomUUID()}-${Date.now()}`;\n      const extension = path.extname(file.originalname);\n      cb(null, `logo-${uniqueSuffix}${extension}`);\n    }\n  });\n\n  const upload = multer({\n    storage: uploadStorage,\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      console.log(\"Checking file:\", file.originalname, \"mimetype:\", file.mimetype);\n\n      // Allow common image formats\n      const allowedMimeTypes = [\n        'image/jpeg',\n        'image/jpg',\n        'image/png',\n        'image/gif',\n        'image/webp',\n        'image/bmp',\n        'image/svg+xml'\n      ];\n\n      if (file.mimetype.startsWith('image/') || allowedMimeTypes.includes(file.mimetype)) {\n        console.log(\"File accepted:\", file.mimetype);\n        cb(null, true);\n      } else {\n        console.log(\"File rejected:\", file.mimetype);\n        cb(new Error('Apenas arquivos de imagem são permitidos (JPG, PNG, GIF, WebP, BMP, SVG)'), false);\n      }\n    }\n  });\n\n  // Health check endpoint\n  app.get('/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // Serve uploaded images with security validation\n  app.get('/uploads/:filename', (req, res) => {\n    const filename = req.params.filename;\n\n    // Security: Validate filename to prevent directory traversal\n    if (!filename || filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return res.status(400).json({ message: 'Invalid filename' });\n    }\n\n    // Additional validation: Only allow specific file extensions\n    const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg'];\n    const fileExtension = path.extname(filename).toLowerCase();\n    if (!allowedExtensions.includes(fileExtension)) {\n      return res.status(400).json({ message: 'File type not allowed' });\n    }\n\n    const filepath = path.join(uploadsDir, filename);\n\n    // Security: Ensure the resolved path is still within the uploads directory\n    const resolvedPath = path.resolve(filepath);\n    const uploadsPath = path.resolve(uploadsDir);\n    if (!resolvedPath.startsWith(uploadsPath)) {\n      return res.status(400).json({ message: 'Access denied' });\n    }\n\n    if (fs.existsSync(filepath)) {\n      res.sendFile(filepath);\n    } else {\n      res.status(404).json({ message: 'Image not found' });\n    }\n  });\n\n  // Upload logo endpoint\n  app.post(\"/api/upload/logo\", requireAuth, upload.single('logo'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Nenhum arquivo foi enviado\" });\n      }\n\n      console.log(\"File uploaded successfully:\", req.file.filename);\n      console.log(\"File mimetype:\", req.file.mimetype);\n      console.log(\"File size:\", req.file.size);\n\n      // Return the URL for the uploaded file\n      const logoUrl = `/uploads/${req.file.filename}`;\n      res.json({ logoUrl, message: \"Logo enviado com sucesso\" });\n    } catch (error) {\n      console.error(\"Error uploading logo:\", error);\n      res.status(500).json({ message: \"Erro ao fazer upload do logo\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      console.log(\"Login attempt for:\", req.body.email);\n\n      const { email, password } = loginSchema.parse(req.body);\n\n      // Initialize storage if needed\n      await storage.initialize();\n\n      // First, try to find user in users table (admins)\n      const user = await storage.getUserByEmail(email);\n      if (user) {\n        console.log(\"Found user in users table:\", user.email);\n        const validPassword = await bcrypt.compare(password, user.password);\n        if (!validPassword) {\n          console.log(\"Invalid password for user:\", user.email);\n          return res.status(401).json({ message: \"Credenciais inválidas\" });\n        }\n\n        const token = jwt.sign(\n          { userId: user.id, email: user.email, role: user.role },\n          JWT_SECRET,\n          { expiresIn: \"24h\" }\n        );\n\n        console.log(\"User login successful:\", user.email);\n        return res.json({ \n          token, \n          user: { \n            id: user.id, \n            email: user.email, \n            role: user.role \n          } \n        });\n      }\n\n      // If not found in users table, try merchants table\n      const merchant = await storage.getMerchantByEmail(email);\n\n      if (merchant) {\n        console.log(\"Found merchant:\", merchant.email, \"status:\", merchant.status);\n\n        // Check if merchant is active\n        if (merchant.status === \"inactive\") {\n          return res.status(401).json({ message: \"Conta foi desativada pelo administrador\" });\n        }\n\n        if (merchant.status === \"pending\") {\n          return res.status(401).json({ message: \"Conta ainda não foi aprovada pelo administrador\" });\n        }\n\n        if (merchant.status === \"payment_pending\") {\n          return res.status(401).json({ message: \"Acesso suspenso. Entre em contato com o administrador para renovar seu plano.\" });\n        }\n\n        // Check if access has expired\n        if (merchant.accessEndDate) {\n          const now = new Date();\n          const accessEnd = new Date(merchant.accessEndDate);\n          if (accessEnd <= now && merchant.status === \"active\") {\n            // Auto-suspend merchant with expired access\n            await storage.suspendMerchantAccess(merchant.id);\n            return res.status(401).json({ message: \"Seu período de acesso expirou. Entre em contato com o administrador para renovar seu plano.\" });\n          }\n        }\n\n        const validPassword = await bcrypt.compare(password, merchant.password);\n        if (!validPassword) {\n          console.log(\"Invalid password for merchant:\", merchant.email);\n          return res.status(401).json({ message: \"Credenciais inválidas\" });\n        }\n\n        const token = jwt.sign(\n          { userId: merchant.id, email: merchant.email, role: \"merchant\" },\n          JWT_SECRET,\n          { expiresIn: \"24h\" }\n        );\n\n        console.log(\"Merchant login successful:\", merchant.email);\n        return res.json({ \n          token, \n          user: { \n            id: merchant.id, \n            email: merchant.email, \n            role: \"merchant\",\n            name: merchant.name,\n            ownerName: merchant.ownerName,\n            accessEndDate: merchant.accessEndDate,\n            paymentStatus: merchant.paymentStatus\n          } \n        });\n      }\n\n      // If not found in merchants table, try employees table\n      const employee = await storage.getEmployeeByEmail(email);\n\n      if (employee) {\n        console.log(\"Found employee:\", employee.email, \"active:\", employee.isActive);\n        // Check if employee is active\n        if (!employee.isActive) {\n          return res.status(401).json({ message: \"Conta de funcionário desativada\" });\n        }\n\n        const validPassword = await bcrypt.compare(password, employee.password);\n        if (!validPassword) {\n          console.log(\"Invalid password for employee:\", employee.email);\n          return res.status(401).json({ message: \"Credenciais inválidas\" });\n        }\n\n        const token = jwt.sign(\n          { userId: employee.id, email: employee.email, role: \"employee\", merchantId: employee.merchantId },\n          JWT_SECRET,\n          { expiresIn: \"24h\" }\n        );\n\n        console.log(\"Employee login successful:\", employee.email);\n        return res.json({ \n          token, \n          user: { \n            id: employee.id, \n            email: employee.email, \n            role: \"employee\",\n            name: employee.name,\n            merchantId: employee.merchantId\n          } \n        });\n      }\n\n      // If not found in employees table, try clients table\n      const client = await storage.getClientByEmail(email);\n\n      if (client) {\n        console.log(\"Found client:\", client.email);\n        const validPassword = await bcrypt.compare(password, client.password);\n\n        if (!validPassword) {\n          console.log(\"Invalid password for client:\", client.email);\n          return res.status(401).json({ message: \"Credenciais inválidas\" });\n        }\n\n        const token = jwt.sign(\n          { userId: client.id, email: client.email, role: \"client\", merchantId: client.merchantId },\n          JWT_SECRET,\n          { expiresIn: \"24h\" }\n        );\n\n        console.log(\"Client login successful:\", client.email);\n        return res.json({ \n          token, \n          user: { \n            id: client.id, \n            email: client.email, \n            role: \"client\",\n            name: client.name,\n            phone: client.phone,\n            merchantId: client.merchantId\n          } \n        });\n      }\n\n      // If not found anywhere\n      console.log(\"User not found:\", email);\n      return res.status(401).json({ message: \"Credenciais inválidas\" });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      console.error(\"Error stack:\", error.stack);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro interno do servidor\", error: error.message });\n    }\n  });\n\n  // Verify token endpoint\n  app.post(\"/api/auth/verify\", authenticateToken, (req, res) => {\n    // Ensure user object has the same structure as login response\n    const user = {\n      id: req.user.userId,\n      email: req.user.email,\n      role: req.user.role,\n      merchantId: req.user.merchantId, // Include merchantId if present\n    };\n    res.json({ user });\n  });\n\n  // Change password endpoint\n  app.post(\"/api/auth/change-password\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"=== CHANGE PASSWORD DEBUG ===\");\n      console.log(\"User:\", { userId: req.user.userId, role: req.user.role, email: req.user.email });\n      console.log(\"Request body keys:\", Object.keys(req.body));\n\n      const { currentPassword, newPassword, confirmPassword } = changePasswordSchema.parse(req.body);\n      const userId = req.user.userId;\n      const userRole = req.user.role;\n\n      console.log(\"Validation passed, checking current user...\");\n\n      // Get current user data to verify current password\n      let currentUser;\n      let isValidPassword = false;\n\n      switch (userRole) {\n        case \"admin\":\n          console.log(\"Fetching admin user...\");\n          currentUser = await storage.getUser(userId);\n          if (currentUser) {\n            console.log(\"Admin user found, verifying password...\");\n            isValidPassword = await bcrypt.compare(currentPassword, currentUser.password);\n          }\n          break;\n\n        case \"merchant\":\n          console.log(\"Fetching merchant user...\");\n          currentUser = await storage.getMerchant(userId);\n          if (currentUser) {\n            console.log(\"Merchant user found, verifying password...\");\n            isValidPassword = await bcrypt.compare(currentPassword, currentUser.password);\n          }\n          break;\n\n        case \"employee\":\n          console.log(\"Fetching employee user...\");\n          currentUser = await storage.getEmployee(userId);\n          if (currentUser) {\n            console.log(\"Employee user found, verifying password...\");\n            isValidPassword = await bcrypt.compare(currentPassword, currentUser.password);\n          }\n          break;\n\n        case \"client\":\n          console.log(\"Fetching client user...\");\n          currentUser = await storage.getClient(userId);\n          if (currentUser) {\n            console.log(\"Client user found, verifying password...\");\n            isValidPassword = await bcrypt.compare(currentPassword, currentUser.password);\n          }\n          break;\n\n        default:\n          console.error(\"Invalid user role:\", userRole);\n          return res.status(400).json({ message: \"Tipo de usuário inválido\" });\n      }\n\n      if (!currentUser) {\n        console.error(\"User not found for role:\", userRole, \"ID:\", userId);\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n\n      console.log(\"Password validation result:\", isValidPassword);\n\n      if (!isValidPassword) {\n        console.error(\"Current password incorrect for user:\", userId);\n        return res.status(401).json({ message: \"Senha atual incorreta\" });\n      }\n\n      console.log(\"Updating password for user role:\", userRole);\n\n      // Update password based on user type\n      let passwordUpdated = false;\n      switch (userRole) {\n        case \"admin\":\n          passwordUpdated = await storage.updateUserPassword(userId, newPassword);\n          break;\n        case \"merchant\":\n          passwordUpdated = await storage.updateMerchantPassword(userId, newPassword);\n          break;\n        case \"employee\":\n          passwordUpdated = await storage.updateEmployeePassword(userId, newPassword);\n          break;\n        case \"client\":\n          passwordUpdated = await storage.updateClientPassword(userId, newPassword);\n          break;\n      }\n\n      console.log(\"Password update result:\", passwordUpdated);\n\n      if (passwordUpdated) {\n        console.log(\"Password successfully updated for user:\", userId);\n        res.json({ message: \"Senha alterada com sucesso\" });\n      } else {\n        console.error(\"Failed to update password for user:\", userId);\n        res.status(500).json({ message: \"Erro ao alterar senha\" });\n      }\n\n      console.log(\"=== END CHANGE PASSWORD DEBUG ===\");\n    } catch (error) {\n      console.error(\"Change password error:\", error);\n      console.error(\"Error stack:\", error.stack);\n\n      if (error instanceof z.ZodError) {\n        console.error(\"Validation errors:\", error.errors);\n        return res.status(400).json({ \n          message: \"Dados inválidos\", \n          errors: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        });\n      }\n      res.status(500).json({ message: \"Erro interno do servidor: \" + error.message });\n    }\n  });\n\n  // Get merchants stats\n  app.get(\"/api/merchants/stats\", authenticateToken, async (req, res) => {\n    try {\n      const stats = await storage.getMerchantsStats();\n      const accessStats = await storage.getMerchantsAccessStatus();\n      res.json({ ...stats, access: accessStats });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar estatísticas\" });\n    }\n  });\n\n  // Get all merchants\n  app.get(\"/api/merchants\", authenticateToken, async (req, res) => {\n    try {\n      const merchants = await storage.getAllMerchants();\n      res.json(merchants.map(toPublicMerchant));\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar comerciantes\" });\n    }\n  });\n\n  // Get merchant by ID\n  app.get(\"/api/merchants/:id\", authenticateToken, async (req, res) => {\n    try {\n      const merchant = await storage.getMerchant(req.params.id);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n      res.json(toPublicMerchant(merchant));\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar comerciante\" });\n    }\n  });\n\n  // Public merchant registration (no authentication required)\n  app.post(\"/api/merchants/register\", async (req, res) => {\n    try {\n      const { planType, ...merchantData } = req.body;\n\n      // Validate planType\n      const validatedPlanType = z.enum([\"trial\", \"vip\"]).default(\"trial\").parse(planType);\n\n      // Validate merchant data\n      const validatedData = insertMerchantSchema.parse(merchantData);\n\n      console.log(`=== MERCHANT REGISTRATION ===`);\n      console.log(`Email: ${validatedData.email}`);\n      console.log(`Plan: ${validatedPlanType}`);\n      console.log(`Original password length: ${validatedData.password.length}`);\n\n      // Check if email already exists in merchants table\n      const existingMerchant = await storage.getMerchantByEmail(validatedData.email);\n      if (existingMerchant) {\n        console.log(`Email ${validatedData.email} already exists`);\n        return res.status(400).json({ message: \"Email já está em uso\" });\n      }\n\n      // Check if email exists in other user tables\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Este email já está cadastrado no sistema\" });\n      }\n\n      // Get plan configuration from system settings\n      const vipPriceSetting = await storage.getSystemSetting('vip_plan_price');\n      const trialDurationSetting = await storage.getSystemSetting('trial_plan_duration');\n      const vipDurationSetting = await storage.getSystemSetting('vip_plan_duration');\n\n      const vipPrice = vipPriceSetting ? parseInt(vipPriceSetting.value) : 5000; // Default R$ 50.00\n      const trialDuration = trialDurationSetting ? parseInt(trialDurationSetting.value) : 10; // Default 10 days\n      const vipDuration = vipDurationSetting ? parseInt(vipDurationSetting.value) : 30; // Default 30 days\n\n      // Create merchant with appropriate initial status\n      let initialStatus = \"active\"; // Default for trial\n\n      // Determine plan configuration\n      if (validatedPlanType === \"vip\") {\n        initialStatus = \"payment_pending\"; // VIP requires payment confirmation\n      }\n\n      // Pass the plain password to storage - it will handle the hashing\n      const merchant = await storage.createMerchant({\n        ...validatedData,\n        status: initialStatus\n      });\n\n      const now = new Date();\n      let accessDurationDays = trialDuration; // Use system setting for trial\n\n      if (validatedPlanType === \"vip\") {\n        accessDurationDays = vipDuration; // Use system setting for VIP\n      }\n\n      const accessEndDate = new Date(now);\n      accessEndDate.setDate(now.getDate() + accessDurationDays);\n\n      const nextPaymentDue = new Date(now);\n      nextPaymentDue.setDate(now.getDate() + accessDurationDays);\n\n      const accessUpdates = {\n        status: initialStatus,\n        accessStartDate: now,\n        accessEndDate: accessEndDate,\n        accessDurationDays: accessDurationDays,\n        lastPaymentDate: validatedPlanType === \"trial\" ? now : null, // Only set payment date for trial\n        nextPaymentDue: nextPaymentDue,\n        paymentStatus: validatedPlanType === \"trial\" ? \"trial\" as const : \"pending\" as const, // Trial status for free accounts\n        monthlyFee: validatedPlanType === \"vip\" ? vipPrice : 0, // Use system setting for VIP price\n      };\n\n      console.log(`Updating merchant ${merchant.id} with access settings:`, accessUpdates);\n      await storage.updateMerchant(merchant.id, accessUpdates);\n\n      // Get the updated merchant to return\n      const updatedMerchant = await storage.getMerchant(merchant.id);\n      console.log(`Final merchant state:`, {\n        id: updatedMerchant?.id,\n        email: updatedMerchant?.email,\n        status: updatedMerchant?.status,\n        paymentStatus: updatedMerchant?.paymentStatus,\n        accessEndDate: updatedMerchant?.accessEndDate\n      });\n      console.log(`=== END MERCHANT REGISTRATION ===`);\n\n      // Send welcome email (fire-and-forget to avoid blocking response)\n      sendWelcomeEmail({\n        name: validatedData.name,\n        ownerName: validatedData.ownerName,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        address: validatedData.address,\n        planType: validatedPlanType,\n        accessEndDate: accessEndDate,\n      }).then(emailResult => {\n        if (emailResult.success) {\n          console.log(`Welcome email sent successfully to ${validatedData.email}`);\n        } else {\n          console.error(`Failed to send welcome email to ${validatedData.email}:`, emailResult.error);\n        }\n      }).catch(error => {\n        console.error(`Error in welcome email promise for ${validatedData.email}:`, error);\n      });\n\n      res.status(201).json({\n        success: true,\n        merchant: toPublicMerchant(updatedMerchant!),\n        message: validatedPlanType === \"trial\" \n          ? \"Cadastro realizado com sucesso! Sua conta está ativa por 10 dias. Verifique seu email para mais informações.\"\n          : \"Cadastro realizado! Aguardando confirmação de pagamento. Verifique seu email para mais informações.\",\n        planType: validatedPlanType,\n        emailSent: \"pending\" // Email is sent asynchronously\n      });\n    } catch (error) {\n      console.error(\"Error in merchant registration:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao criar comerciante\" });\n    }\n  });\n\n  // Create new merchant\n  app.post(\"/api/merchants\", authenticateToken, async (req, res) => {\n    try {\n      const merchantData = insertMerchantSchema.parse(req.body);\n\n      // Check if email already exists\n      const existingMerchant = await storage.getMerchantByEmail(merchantData.email);\n      if (existingMerchant) {\n        return res.status(400).json({ message: \"Email já está em uso\" });\n      }\n\n      // Create merchant with basic data first\n      const merchant = await storage.createMerchant(merchantData);\n\n      // If created by admin, automatically grant 7 days free access\n      if (req.user.role === \"admin\") {\n        const now = new Date();\n        const accessEndDate = new Date(now);\n        accessEndDate.setDate(now.getDate() + 7);\n\n        const nextPaymentDue = new Date(now);\n        nextPaymentDue.setDate(now.getDate() + 7);\n\n        const accessUpdates = {\n          status: \"active\",\n          accessStartDate: now,\n          accessEndDate: accessEndDate,\n          accessDurationDays: 7,\n          lastPaymentDate: null, // No payment made for admin-created trial\n          nextPaymentDue: nextPaymentDue,\n          paymentStatus: \"trial\" as const, // Trial status for admin-created accounts\n        };\n\n        await storage.updateMerchant(merchant.id, accessUpdates);\n\n        // Get the updated merchant to return\n        const updatedMerchant = await storage.getMerchant(merchant.id);\n        res.status(201).json(toPublicMerchant(updatedMerchant!));\n      } else {\n        res.status(201).json(toPublicMerchant(merchant));\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao criar comerciante\" });\n    }\n  });\n\n  // Update merchant\n  app.put(\"/api/merchants/:id\", authenticateToken, async (req, res) => {\n    try {\n      const updates = insertMerchantSchema.partial().parse(req.body);\n\n      // If email is being updated, check if it's already in use\n      if (updates.email) {\n        const existingMerchant = await storage.getMerchantByEmail(updates.email);\n        if (existingMerchant && existingMerchant.id !== req.params.id) {\n          return res.status(400).json({ message: \"Email já está em uso\" });\n        }\n      }\n\n      const merchant = await storage.updateMerchant(req.params.id, updates);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n      res.json(toPublicMerchant(merchant));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao atualizar comerciante\" });\n    }\n  });\n\n  // Delete merchant\n  app.delete(\"/api/merchants/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteMerchant(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n      res.json({ message: \"Comerciante removido com sucesso\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao remover comerciante\" });\n    }\n  });\n\n  // Update merchant status\n  app.patch(\"/api/merchants/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (![\"active\", \"inactive\", \"pending\"].includes(status)) {\n        return res.status(400).json({ message: \"Status inválido\" });\n      }\n\n      const merchant = await storage.updateMerchant(req.params.id, { status });\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n      res.json(toPublicMerchant(merchant));\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao atualizar status\" });\n    }\n  });\n\n  // Update merchant schedule/working hours\n  app.patch(\"/api/merchants/:id/schedule\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"=== DEBUG: SCHEDULE UPDATE ROUTE ===\");\n      console.log(\"Method:\", req.method);\n      console.log(\"URL:\", req.url);\n      console.log(\"Headers:\", req.headers);\n      console.log(\"User object:\", req.user);\n      console.log(\"Request body:\", req.body);\n      console.log(\"Merchant ID from params:\", req.params.id);\n\n      // Check if req.user exists\n      if (!req.user) {\n        console.error(\"ERROR: No user object found in request\");\n        return res.status(401).json({ message: \"Token inválido ou expirado\" });\n      }\n\n      console.log(\"User role:\", req.user.role);\n      console.log(\"User ID:\", req.user.userId);\n\n      // Only merchants can update their own schedule or admins can update any\n      if (req.user.role === \"merchant\" && req.user.userId !== req.params.id) {\n        console.error(\"Access denied: merchant trying to update another merchant's schedule\");\n        console.error(\"User ID:\", req.user.userId, \"vs Merchant ID:\", req.params.id);\n        return res.status(403).json({ message: \"Acesso negado - merchant não pode alterar outro salão\" });\n      }\n\n      // Admin users can update any merchant's schedule\n      if (req.user.role !== \"merchant\" && req.user.role !== \"admin\") {\n        console.error(\"Access denied: user role not authorized:\", req.user.role);\n        return res.status(403).json({ message: \"Acesso negado - role não autorizado\" });\n      }\n\n      console.log(\"Authorization passed\");\n\n      // Basic validation first\n      if (!req.body.workDays || !req.body.startTime || !req.body.endTime) {\n        console.error(\"Missing required fields:\");\n        console.error(\"workDays:\", req.body.workDays);\n        console.error(\"startTime:\", req.body.startTime);\n        console.error(\"endTime:\", req.body.endTime);\n        return res.status(400).json({ message: \"Dados obrigatórios não fornecidos\" });\n      }\n\n      // Clean the data\n      const scheduleData = {\n        workDays: req.body.workDays,\n        startTime: req.body.startTime,\n        endTime: req.body.endTime,\n        breakStartTime: req.body.breakStartTime || null,\n        breakEndTime: req.body.breakEndTime || null,\n      };\n\n      console.log(\"Schedule data to update:\", scheduleData);\n\n      const merchant = await storage.updateMerchant(req.params.id, scheduleData);\n      if (!merchant) {\n        console.error(\"Merchant not found in database:\", req.params.id);\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      console.log(\"Merchant updated successfully:\", merchant.id);\n      const publicMerchant = toPublicMerchant(merchant);\n      console.log(\"Returning public merchant data:\", publicMerchant);\n\n      res.json(publicMerchant);\n    } catch (error) {\n      console.error(\"=== ERROR in schedule update route ===\");\n      console.error(\"Error message:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n      res.status(500).json({ message: \"Erro ao atualizar horários de funcionamento\", error: error.message });\n    }\n  });\n\n  // Update merchant logo\n  app.patch(\"/api/merchants/:id/logo\", authenticateToken, async (req, res) => {\n    try {\n      // Only merchants can update their own logo or admins can update any\n      if (req.user.role === \"merchant\" && req.user.userId !== req.params.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (req.user.role !== \"merchant\" && req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Validate input - accept both full URLs and relative paths\n      const logoSchema = z.object({\n        logoUrl: z.string().max(2048, \"URL muito longa\").refine(\n          (url) => {\n            // Accept relative paths starting with /uploads/ or full URLs\n            return url.startsWith('/uploads/') || z.string().url().safeParse(url).success;\n          },\n          {\n            message: \"URL deve ser uma URL válida ou um caminho relativo começando com /uploads/\"\n          }\n        ).optional()\n      });\n\n      const validatedData = logoSchema.parse(req.body);\n\n      const merchant = await storage.updateMerchant(req.params.id, { logoUrl: validatedData.logoUrl || null });\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json(toPublicMerchant(merchant));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error(\"Logo validation error:\", error.errors);\n        return res.status(400).json({ message: \"URL inválida\", errors: error.errors });\n      }\n      console.error(\"Logo update error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar logo\" });\n    }\n  });\n\n  // Update merchant open/closed status\n  app.patch(\"/api/merchants/:id/is-open\", authenticateToken, async (req, res) => {\n    try {\n      // Only merchants can update their own status or admins can update any\n      if (req.user.role === \"merchant\" && req.user.userId !== req.params.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (req.user.role !== \"merchant\" && req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Validate input\n      const statusSchema = z.object({\n        isOpen: z.boolean()\n      });\n\n      const validatedData = statusSchema.parse(req.body);\n\n      const merchant = await storage.updateMerchant(req.params.id, { isOpen: validatedData.isOpen });\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json(toPublicMerchant(merchant));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao atualizar status de funcionamento\" });\n    }\n  });\n\n  // Get merchant booking policies\n  app.get(\"/api/merchants/:id/booking-policies\", authenticateToken, async (req, res) => {\n    try {\n      // Only merchants can get their own policies or admins can get any\n      if (req.user.role === \"merchant\" && req.user.userId !== req.params.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (req.user.role !== \"merchant\" && req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchant = await storage.getMerchant(req.params.id);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      // Return booking policies with defaults for backward compatibility\n      const bookingPolicies = {\n        noShowFeeEnabled: merchant.noShowFeeEnabled ?? false,\n        noShowFeeAmount: merchant.noShowFeeAmount ?? 0,\n        lateFeeEnabled: merchant.lateFeeEnabled ?? false,\n        lateFeeAmount: merchant.lateFeeAmount ?? 0,\n        lateToleranceMinutes: merchant.lateToleranceMinutes ?? 15,\n        cancellationPolicyHours: merchant.cancellationPolicyHours ?? 24,\n        cancellationFeeEnabled: merchant.cancellationFeeEnabled ?? false,\n        cancellationFeeAmount: merchant.cancellationFeeAmount ?? 0,\n      };\n\n      res.json(bookingPolicies);\n    } catch (error) {\n      console.error(\"Booking policies get error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar políticas de agendamento\" });\n    }\n  });\n\n  // Update merchant booking policies\n  app.patch(\"/api/merchants/:id/booking-policies\", authenticateToken, async (req, res) => {\n    try {\n      // Only merchants can update their own policies or admins can update any\n      if (req.user.role === \"merchant\" && req.user.userId !== req.params.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (req.user.role !== \"merchant\" && req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Validate the booking policies data\n      const validatedData = bookingPoliciesSchema.parse(req.body);\n\n      const merchant = await storage.updateMerchant(req.params.id, {\n        noShowFeeEnabled: validatedData.noShowFeeEnabled,\n        noShowFeeAmount: validatedData.noShowFeeAmount,\n        lateFeeEnabled: validatedData.lateFeeEnabled,\n        lateFeeAmount: validatedData.lateFeeAmount,\n        lateToleranceMinutes: validatedData.lateToleranceMinutes,\n        cancellationPolicyHours: validatedData.cancellationPolicyHours,\n        cancellationFeeEnabled: validatedData.cancellationFeeEnabled,\n        cancellationFeeAmount: validatedData.cancellationFeeAmount,\n      });\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json({\n        message: \"Políticas de agendamento atualizadas com sucesso\",\n        bookingPolicies: {\n          noShowFeeEnabled: merchant.noShowFeeEnabled,\n          noShowFeeAmount: merchant.noShowFeeAmount,\n          lateFeeEnabled: merchant.lateFeeEnabled,\n          lateFeeAmount: merchant.lateFeeAmount,\n          lateToleranceMinutes: merchant.lateToleranceMinutes,\n          cancellationPolicyHours: merchant.cancellationPolicyHours,\n          cancellationFeeEnabled: merchant.cancellationFeeEnabled,\n          cancellationFeeAmount: merchant.cancellationFeeAmount,\n        }\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Dados inválidos\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Booking policies update error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar políticas de agendamento\" });\n    }\n  });\n\n  // VIP Plan Management endpoints\n  app.post(\"/api/merchant/upgrade-vip\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const now = new Date();\n      const vipEndDate = new Date(now);\n      vipEndDate.setDate(now.getDate() + 30); // 30 days VIP\n\n      const merchant = await storage.updateMerchant(merchantId, {\n        planStatus: \"vip\",\n        planValidity: vipEndDate,\n        paymentStatus: \"paid\"\n      });\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json({ \n        message: \"Plano VIP ativado com sucesso!\",\n        planValidity: vipEndDate,\n        planStatus: \"vip\"\n      });\n    } catch (error) {\n      console.error(\"Error upgrading to VIP:\", error);\n      res.status(500).json({ message: \"Erro ao ativar plano VIP\" });\n    }\n  });\n\n  app.post(\"/api/merchant/renew-vip\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const merchant = await storage.getMerchant(merchantId);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      const now = new Date();\n      let newEndDate: Date;\n\n      if (merchant.planValidity && new Date(merchant.planValidity) > now) {\n        // Extend from current end date\n        newEndDate = new Date(merchant.planValidity);\n        newEndDate.setDate(newEndDate.getDate() + 30);\n      } else {\n        // Start from now if expired\n        newEndDate = new Date(now);\n        newEndDate.setDate(now.getDate() + 30);\n      }\n\n      const updatedMerchant = await storage.updateMerchant(merchantId, {\n        planStatus: \"vip\",\n        planValidity: newEndDate,\n        paymentStatus: \"paid\"\n      });\n\n      res.json({ \n        message: \"Plano VIP renovado com sucesso!\",\n        planValidity: newEndDate,\n        planStatus: \"vip\"\n      });\n    } catch (error) {\n      console.error(\"Error renewing VIP:\", error);\n      res.status(500).json({ message: \"Erro ao renovar plano VIP\" });\n    }\n  });\n\n  // Get merchant for client (only their associated merchant)\n  app.get(\"/api/client/merchants\", authenticateToken, async (req, res) => {\n    try {\n      // Only clients can access this endpoint\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.merchantId;\n      if (!merchantId) {\n        return res.status(400).json({ message: \"Merchant ID não encontrado\" });\n      }\n\n      const merchant = await storage.getMerchant(merchantId);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Salão não encontrado\" });\n      }\n\n      // Only return the merchant if it's active\n      if (merchant.status !== \"active\") {\n        return res.status(403).json({ message: \"Salão não está ativo\" });\n      }\n\n      // Return public merchant information\n      const publicMerchant = {\n        id: merchant.id,\n        name: merchant.name,\n        address: merchant.address,\n        phone: merchant.phone,\n        logoUrl: merchant.logoUrl,\n        isOpen: merchant.isOpen,\n        workDays: merchant.workDays,\n        startTime: merchant.startTime,\n        endTime: merchant.endTime,\n        breakStartTime: merchant.breakStartTime,\n        breakEndTime: merchant.breakEndTime,\n      };\n\n      res.json([publicMerchant]); // Return as array to maintain compatibility with frontend\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar salão\" });\n    }\n  });\n\n  // Services endpoints\n  // Get services for a merchant\n  app.get(\"/api/services\", requireAuth, requireRole([\"merchant\"]), async (req, res) => {\n    try {\n      const merchantId = req.user.userId;\n      const userEmail = req.user.email;\n\n      console.log(`\\n🚀 === API SERVICES ENDPOINT DEBUG ===`);\n      console.log(`📧 Request from user: ${userEmail}`);\n      console.log(`🆔 Merchant ID: ${merchantId}`);\n      console.log(`🔑 User object:`, JSON.stringify(req.user, null, 2));\n\n      // First let's check if this merchant exists\n      const merchant = await storage.getMerchant(merchantId);\n      console.log(`🏪 Merchant lookup result: ${merchant ? `Found \"${merchant.name}\" (${merchant.email})` : 'NOT FOUND'}`);\n\n      if (!merchant) {\n        console.error(`❌ CRITICAL: Merchant ${merchantId} not found in database!`);\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      // Verify the merchant ID matches the authenticated user\n      if (merchant.id !== merchantId) {\n        console.error(`❌ SECURITY BREACH: Merchant ID mismatch! Auth: ${merchantId}, DB: ${merchant.id}`);\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      console.log(`✅ Merchant verification passed. Fetching services...`);\n\n      const services = await storage.getServicesByMerchant(merchantId);\n\n      // Enrich services with promotion information\n      const servicesWithPromotions = await Promise.all(\n        services.map(async (service) => {\n          const promotionInfo = await storage.calculatePromotionalPrice(service.id, service.price);\n          return {\n            ...service,\n            hasPromotion: promotionInfo.hasPromotion,\n            originalPrice: promotionInfo.originalPrice,\n            promotionalPrice: promotionInfo.promotionalPrice,\n            promotion: promotionInfo.discount\n          };\n        })\n      );\n\n      console.log(`\\n📊 API RESULT SUMMARY:`);\n      console.log(`- Merchant: \"${merchant.name}\" (${merchant.email})`);\n      console.log(`- Services found: ${servicesWithPromotions.length}`);\n      servicesWithPromotions.forEach((service, index) => {\n        console.log(`  [${index}] \"${service.name}\" (ID: ${service.id.substring(0, 8)}...) - Active: ${service.isActive} - Has Promotion: ${service.hasPromotion}`);\n      });\n\n      console.log(`🎯 Returning ${servicesWithPromotions.length} services to frontend`);\n      console.log(`=== END API SERVICES DEBUG ===\\n`);\n\n      res.json(servicesWithPromotions);\n    } catch (error) {\n      console.error(\"❌ CRITICAL ERROR in services endpoint:\", error);\n      console.error(\"Error stack:\", (error as Error).stack);\n      res.status(500).json({ message: \"Erro ao buscar serviços\" });\n    }\n  });\n\n  // Get active services for a merchant\n  app.get(\"/api/services/active\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user;\n      console.log(\"User in active services request:\", user);\n\n      if (user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Use the userId directly as merchantId since merchant login sets userId = merchant.id\n      const merchant = await storage.getMerchant(user.userId);\n      console.log(\"Found merchant:\", merchant);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Merchant not found\" });\n      }\n\n      const services = await storage.getActiveServicesByMerchant(merchant.id);\n      console.log(`Active services for merchant ${merchant.id}:`, services);\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching active services:\", error);\n      console.error(\"Stack trace:\", (error as Error).stack);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create service\n  app.post(\"/api/services\", authenticateToken, async (req, res) => {\n    try {\n      console.log(`=== CREATE SERVICE DEBUG ===`);\n      console.log(`User creating service:`, {\n        userId: req.user.userId,\n        email: req.user.email,\n        role: req.user.role\n      });\n      console.log(`Request body:`, req.body);\n\n      if (req.user.role !== \"merchant\") {\n        console.error(`Non-merchant user trying to create service: ${req.user.role}`);\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const serviceData = serviceSchema.parse({\n        ...req.body,\n        merchantId: req.user.userId,\n      });\n\n      console.log(`Parsed service data:`, serviceData);\n      console.log(`Service will be created for merchantId: ${serviceData.merchantId}`);\n\n      const service = await storage.createService(serviceData);\n\n      console.log(`Service created successfully:`, {\n        id: service.id,\n        name: service.name,\n        merchantId: service.merchantId,\n        belongsToCreator: service.merchantId === req.user.userId\n      });\n      console.log(`=== END CREATE SERVICE DEBUG ===`);\n\n      res.status(201).json(service);\n    } catch (error) {\n      console.error(`Error creating service:`, error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao criar serviço\" });\n    }\n  });\n\n  // Update service\n  app.put(\"/api/services/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const updates = serviceSchema.partial().parse(req.body);\n      const service = await storage.updateService(req.params.id, updates);\n\n      if (!service) {\n        return res.status(404).json({ message: \"Serviço não encontrado\" });\n      }\n\n      // Verify service belongs to the merchant\n      if (service.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      res.json(service);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao atualizar serviço\" });\n    }\n  });\n\n  // Delete service\n  app.delete(\"/api/services/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ message: \"Serviço não encontrado\" });\n      }\n\n      // Verify service belongs to the merchant\n      if (service.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Manual cascade delete: first delete all appointments related to this service\n      const deletedAppointments = await storage.deleteAppointmentsByService(req.params.id);\n      console.log(`Deleted ${deletedAppointments} appointments for service ${req.params.id}`);\n\n      // Then delete the service itself\n      const success = await storage.deleteService(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Serviço não encontrado\" });\n      }\n\n      res.json({ \n        message: \"Serviço removido com sucesso\", \n        deletedAppointments: deletedAppointments \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao remover serviço\" });\n    }\n  });\n\n  // Employee endpoints\n  // Get employees for a merchant\n  app.get(\"/api/employees\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"\\n=== 🚀 DEBUG EMPLOYEES ENDPOINT ===\");\n      console.log(\"📍 Request URL:\", req.url);\n      console.log(\"👤 User from token:\", {\n        userId: req.user.userId,\n        email: req.user.email,\n        role: req.user.role\n      });\n\n      let merchantId: string;\n\n      if (req.user.role === \"merchant\") {\n        merchantId = req.user.userId; // Force merchant to only see their own employees\n        console.log(`🔒 Backend: Merchant ${req.user.email} accessing own employeesMerchantId: ${merchantId.substring(0, 8)}...`);\n      } else if (req.user.role === \"admin\") {\n        merchantId = req.query.merchantId as string;\n        if (!merchantId) {\n          console.error(\"❌ Admin request missing merchantId parameter\");\n          return res.status(400).json({ message: \"Merchant ID é obrigatório para admins\" });\n        }\n        console.log(`👨‍💼 Backend: Admin ${req.user.email} accessing merchantId: ${merchantId.substring(0, 8)}...`);\n      } else {\n        console.error(`🚨 Backend SECURITY VIOLATION: Unauthorized role ${req.user.role} trying to access employees`);\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      console.log(`📞 Backend: Fetching employees for merchantId: ${merchantId.substring(0, 8)}...`);\n      const employees = await storage.getEmployeesByMerchant(merchantId);\n\n      console.log(`📊 Backend: Employees returned: ${employees.length} employees`);\n\n      // Security check: ensure all employees belong to the requested merchant\n      const validEmployees = employees.filter(employee => employee.merchantId === merchantId);\n\n      if (validEmployees.length !== employees.length) {\n        console.error(`🚨 SECURITY BREACH: Found employees that don't belong to merchant ${merchantId}`);\n        return res.status(403).json({ message: \"Erro de segurança detectado\" });\n      }\n\n      console.log(`✅ All ${validEmployees.length} employees verified for merchant ${merchantId.substring(0, 8)}...`);\n      res.json(validEmployees.map(toPublicEmployee));\n      console.log(`=== END DEBUG EMPLOYEES ENDPOINT ===\\n`);\n    } catch (error) {\n      console.error(\"Error getting employees:\", error);\n      res.status(500).json({ message: \"Erro ao buscar funcionários\" });\n    }\n  });\n\n  // Create employee\n  app.post(\"/api/employees\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const employeeData = insertEmployeeSchema.parse({\n        ...req.body,\n        merchantId: req.user.userId,\n      });\n\n      // Check if email already exists\n      const existingEmployee = await storage.getEmployeeByEmail(employeeData.email);\n      if (existingEmployee) {\n        return res.status(400).json({ message: \"Email já está em uso\" });\n      }\n\n      const employee = await storage.createEmployee(employeeData);\n      res.status(201).json(toPublicEmployee(employee));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Error creating employee:\", error);\n      res.status(500).json({ message: \"Erro ao criar funcionário\" });\n    }\n  });\n\n  // Update employee\n  app.put(\"/api/employees/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const updates = insertEmployeeSchema.partial().parse(req.body);\n\n      // Check if email is being updated and is already in use\n      if (updates.email) {\n        const existingEmployee = await storage.getEmployeeByEmail(updates.email);\n        if (existingEmployee && existingEmployee.id !== req.params.id) {\n          return res.status(400).json({ message: \"Email já está em uso\" });\n        }\n      }\n\n      const employee = await storage.updateEmployee(req.params.id, updates);\n      if (!employee) {\n        return res.status(404).json({ message: \"Funcionário não encontrado\" });\n      }\n\n      // Verify employee belongs to the merchant\n      if (employee.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      res.json(toPublicEmployee(employee));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao atualizar funcionário\" });\n    }\n  });\n\n  // Delete employee\n  app.delete(\"/api/employees/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const employee = await storage.getEmployee(req.params.id);\n      if (!employee) {\n        return res.status(404).json({ message: \"Funcionário não encontrado\" });\n      }\n\n      // Verify employee belongs to the merchant\n      if (employee.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const success = await storage.deleteEmployee(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Funcionário não encontrado\" });\n      }\n\n      res.json({ message: \"Funcionário removido com sucesso\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao remover funcionário\" });\n    }\n  });\n\n  // Client endpoints\n  // Get clients for a merchant\n  app.get(\"/api/clients\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"\\n=== 🚀 DEBUG CLIENTS ENDPOINT ===\");\n      console.log(\"📍 Request URL:\", req.url);\n      console.log(\"👤 User from token:\", {\n        userId: req.user.userId,\n        email: req.user.email,\n        role: req.user.role\n      });\n\n      let merchantId: string;\n\n      if (req.user.role === \"merchant\") {\n        merchantId = req.user.userId; // Force merchant to only see their own clients\n        console.log(`🔒 Backend: Merchant ${req.user.email} accessing own clients MerchantId: ${merchantId.substring(0, 8)}...`);\n      } else if (req.user.role === \"admin\") {\n        merchantId = req.query.merchantId as string;\n        if (!merchantId) {\n          console.error(\"❌ Admin request missing merchantId parameter\");\n          return res.status(400).json({ message: \"Merchant ID é obrigatório para admins\" });\n        }\n        console.log(`👨‍💼 Backend: Admin ${req.user.email} accessing merchantId: ${merchantId.substring(0, 8)}...`);\n      } else {\n        console.error(`🚨 Backend SECURITY VIOLATION: Unauthorized role ${req.user.role} trying to access clients`);\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      console.log(`📞 Backend: Fetching clients for merchantId: ${merchantId.substring(0, 8)}...`);\n      const clients = await storage.getClientsByMerchant(merchantId);\n\n      console.log(`📊 Backend: Clients returned: ${clients.length} clients`);\n\n      // Security check: ensure all clients belong to the requested merchant\n      const validClients = clients.filter(client => client.merchantId === merchantId);\n\n      if (validClients.length !== clients.length) {\n        console.error(`🚨 SECURITY BREACH: Found clients that don't belong to merchant ${merchantId}`);\n        return res.status(403).json({ message: \"Erro de segurança detectado\" });\n      }\n\n      console.log(`✅ All ${validClients.length} clients verified for merchant ${merchantId.substring(0, 8)}...`);\n      res.json(validClients.map(toPublicClient));\n      console.log(`=== END DEBUG CLIENTS ENDPOINT ===\\n`);\n    } catch (error) {\n      console.error(\"Error getting clients:\", error);\n      res.status(500).json({ message: \"Erro ao buscar clientes\" });\n    }\n  });\n\n  // Create client\n  app.post(\"/api/clients\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const clientData = insertClientSchema.parse({\n        ...req.body,\n        merchantId: req.user.userId,\n      });\n\n      // Check if email already exists\n      const existingClient = await storage.getClientByEmail(clientData.email);\n      if (existingClient) {\n        return res.status(400).json({ message: \"Email já está em uso\" });\n      }\n\n      const client = await storage.createClient(clientData);\n      res.status(201).json(toPublicClient(client));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao criar cliente\" });\n    }\n  });\n\n  // Update client\n  app.put(\"/api/clients/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const updates = insertClientSchema.partial().parse(req.body);\n\n      // Check if email is being updated and is already in use\n      if (updates.email) {\n        const existingClient = await storage.getClientByEmail(updates.email);\n        if (existingClient && existingClient.id !== req.params.id) {\n          return res.status(400).json({ message: \"Email já está em uso\" });\n        }\n      }\n\n      const client = await storage.updateClient(req.params.id, updates);\n      if (!client) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      // Verify client belongs to the merchant\n      if (client.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      res.json(toPublicClient(client));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Erro ao atualizar cliente\" });\n    }\n  });\n\n  // Delete client\n  app.delete(\"/api/clients/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      // Verify client belongs to the merchant\n      if (client.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const success = await storage.deleteClient(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      res.json({ message: \"Cliente removido com sucesso\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao remover cliente\" });\n    }\n  });\n\n  // Appointments endpoints\n  // Get pending payment appointments for merchant (MUST be before :id route)\n  app.get(\"/api/appointments/pending-payments\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado - apenas comerciantes\" });\n      }\n\n      const merchantId = req.user.userId;\n      const pendingPayments = await storage.getPendingPaymentAppointments(merchantId);\n\n      res.json(pendingPayments);\n    } catch (error) {\n      console.error(\"Error getting pending payment appointments:\", error);\n      res.status(500).json({ message: \"Erro ao buscar agendamentos pendentes de pagamento\" });\n    }\n  });\n\n  // Get single appointment by ID\n  app.get(\"/api/appointments/:id\", authenticateToken, async (req, res) => {\n    try {\n      const appointmentId = req.params.id;\n      const user = (req as any).user;\n\n      const appointment = await storage.getAppointment(appointmentId);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Verify access permissions\n      let hasAccess = false;\n      if (user.role === \"merchant\" && appointment.merchantId === user.userId) {\n        hasAccess = true;\n      } else if (user.role === \"employee\" && appointment.merchantId === user.merchantId) {\n        hasAccess = true;\n      } else if (user.role === \"client\" && appointment.clientId === user.userId) {\n        hasAccess = true;\n      } else if (user.role === \"admin\") {\n        hasAccess = true;\n      }\n\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error fetching appointment:\", error);\n      res.status(500).json({ message: \"Erro ao buscar agendamento\" });\n    }\n  });\n\n  // Get appointments for a merchant\n  app.get(\"/api/appointments\", authenticateToken, async (req, res) => {\n    try {\n      const { date, startDate, endDate } = req.query;\n      const user = (req as any).user;\n\n      let merchantId: string;\n\n      // Determine merchant ID based on user role\n      if (user.role === \"merchant\") {\n        merchantId = user.userId;\n      } else if (user.role === \"employee\") {\n        merchantId = user.merchantId;\n        if (!merchantId) {\n          return res.status(400).json({ message: \"Funcionário não associado a um comerciante\" });\n        }\n      } else if (user.role === \"admin\") {\n        merchantId = req.query.merchantId as string;\n        if (!merchantId) {\n          return res.status(400).json({ message: \"Merchant ID é obrigatório para admins\" });\n        }\n      } else {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      let appointments;\n\n      // Handle different query types\n      if (date) {\n        appointments = await storage.getAppointmentsByDate(merchantId, date as string);\n      } else if (startDate && endDate) {\n        appointments = await storage.getAppointmentsByDateRange(merchantId, startDate as string, endDate as string);\n      } else {\n        // Return all appointments for the merchant\n        if (user.role === \"employee\") {\n          appointments = await storage.getAppointmentsByEmployee(user.userId);\n        } else {\n          appointments = await storage.getAppointmentsByMerchant(merchantId);\n        }\n      }\n\n      // Security check: ensure all appointments belong to the correct merchant\n      const validAppointments = appointments.filter(appointment => appointment.merchantId === merchantId);\n\n      res.json(validAppointments);\n    } catch (error) {\n      console.error(\"Error fetching appointments:\", error);\n      res.status(500).json({ message: \"Erro ao buscar agendamentos\" });\n    }\n  });\n\n  // Create appointment\n  app.post(\"/api/appointments\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user;\n      console.log(\"User in appointment creation:\", user);\n      console.log(\"Request body:\", req.body);\n\n      if (user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Use the userId directly as merchantId since merchant login sets userId = merchant.id\n      const merchant = await storage.getMerchant(user.userId);\n      console.log(\"Found merchant for appointment:\", merchant);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Merchant not found\" });\n      }\n\n      // Validate required fields\n      const { serviceId, clientName, clientPhone, appointmentDate, appointmentTime } = req.body;\n\n      if (!serviceId || !clientName || !clientPhone || !appointmentDate || !appointmentTime) {\n        console.log(\"Missing required fields:\", { serviceId, clientName, clientPhone, appointmentDate, appointmentTime });\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Check if client has pending penalties\n      let clientPenalties = [];\n      let hasPendingPenalties = false;\n\n      // If there's a clientId, check for existing penalties\n      if (req.body.clientId) {\n        clientPenalties = await storage.getPenaltiesByClient(req.body.clientId);\n        hasPendingPenalties = clientPenalties.some(penalty => penalty.status === \"pending\");\n      } else {\n        // If no clientId, check by phone number (for walk-in clients)\n        const allPenalties = await storage.getPenaltiesByMerchant(merchant.id);\n        clientPenalties = allPenalties.filter(penalty => \n          penalty.clientPhone === clientPhone && penalty.status === \"pending\"\n        );\n        hasPendingPenalties = clientPenalties.length > 0;\n      }\n\n      // Get service to calculate end time\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Serviço não encontrado\" });\n      }\n\n      // Calculate promotional price if applicable\n      const promotionInfo = await storage.calculatePromotionalPrice(serviceId, service.price);\n      const finalPrice = promotionInfo.hasPromotion ? promotionInfo.promotionalPrice : service.price;\n\n      // Calculate end time based on service duration\n      const [hours, minutes] = appointmentTime.split(':').map(Number);\n      const endMinutes = minutes + service.duration;\n      const endHour = hours + Math.floor(endMinutes / 60);\n      const finalMinutes = endMinutes % 60;\n      const endTime = `${endHour.toString().padStart(2, '0')}:${finalMinutes.toString().padStart(2, '0')}`;\n\n      const appointmentData = {\n        merchantId: merchant.id,\n        serviceId,\n        clientId: req.body.clientId || null,\n        employeeId: req.body.employeeId || null,\n        clientName,\n        clientPhone,\n        clientEmail: req.body.clientEmail || null,\n        appointmentDate,\n        appointmentTime,\n        endTime,\n        notes: req.body.notes || null,\n        status: \"pending\"\n      };\n\n      console.log('Creating appointment:', appointmentData);\n      const appointment = await storage.createAppointment(appointmentData);\n      console.log('Appointment created successfully:', appointment);\n\n      // Return appointment with penalty warning if applicable\n      const response = {\n        ...appointment,\n        hasPendingPenalties,\n        pendingPenaltiesCount: clientPenalties.length,\n        pendingPenaltiesAmount: clientPenalties.reduce((total, penalty) => total + penalty.amount, 0)\n      };\n\n      if (hasPendingPenalties) {\n        console.log(`⚠️ WARNING: Client ${clientName} (${clientPhone}) has ${clientPenalties.length} pending penalties`);\n      }\n\n      res.status(201).json(response);\n    } catch (error) {\n      console.error(\"Error creating appointment:\", error);\n      console.error(\"Stack trace:\", (error as Error).stack);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // Update appointment\n  app.put(\"/api/appointments/:id\", authenticateToken, async (req, res) => {\n    try {\n      // Check if the user is a merchant or an employee\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const updates = appointmentSchema.partial().parse(req.body);\n      const appointment = await storage.updateAppointment(req.params.id, updates);\n\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Verify appointment belongs to the merchant (or employee's merchant)\n      const userMerchantId = req.user.role === \"merchant\" ? req.user.userId : req.user.merchantId;\n      if (appointment.merchantId !== userMerchantId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Handle status updates with proper validation\n      if (updates.status && updates.rescheduleReason) {\n        // Reschedule reason is handled by the storage layer\n      }\n\n      res.json(appointment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Error updating appointment:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar agendamento\" });\n    }\n  });\n\n  // Delete appointment\n  app.delete(\"/api/appointments/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const appointment = await storage.getAppointment(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Verify appointment belongs to the merchant (or employee's merchant)\n      const userMerchantId = req.user.role === \"merchant\" ? req.user.userId : req.user.merchantId;\n      if (appointment.merchantId !== userMerchantId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const success = await storage.deleteAppointment(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      res.json({ message: \"Agendamento removido com sucesso\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao remover agendamento\" });\n    }\n  });\n\n  // New Beauty Scheduler API endpoints\n\n  // Check employee availability\n  app.post(\"/api/appointments/check-availability\", authenticateToken, async (req, res) => {\n    try {\n      const { employeeId, date, startTime, duration } = req.body;\n\n      if (!employeeId || !date || !startTime || !duration) {\n        return res.status(400).json({ message: \"Campos obrigatórios: employeeId, date, startTime, duration\" });\n      }\n\n      const isAvailable = await storage.checkEmployeeAvailability({\n        employeeId,\n        date,\n        startTime,\n        duration\n      });\n\n      res.json({ available: isAvailable });\n    } catch (error) {\n      console.error(\"Error checking availability:\", error);\n      res.status(500).json({ message: \"Erro ao verificar disponibilidade\" });\n    }\n  });\n\n  // Get available time slots for employee\n  app.get(\"/api/appointments/available-slots/:employeeId\", authenticateToken, async (req, res) => {\n    try {\n      const { employeeId } = req.params;\n      const { date, duration } = req.query;\n\n      if (!date || !duration) {\n        return res.status(400).json({ message: \"Parâmetros obrigatórios: date, duration\" });\n      }\n\n      const slots = await storage.getEmployeeAvailableSlots(\n        employeeId,\n        date as string,\n        parseInt(duration as string)\n      );\n\n      res.json({ slots });\n    } catch (error) {\n      console.error(\"Error getting available slots:\", error);\n      res.status(500).json({ message: \"Erro ao buscar horários disponíveis\" });\n    }\n  });\n\n  // Cancel appointment with business rules\n  app.post(\"/api/appointments/:id/cancel\", authenticateToken, async (req, res) => {\n    try {\n      const { reason } = req.body;\n\n      if (!reason) {\n        return res.status(400).json({ message: \"Motivo do cancelamento é obrigatório\" });\n      }\n\n      // Check if cancellation is allowed\n      const canCancel = await storage.canCancelAppointment(req.params.id);\n      if (!canCancel.canCancel) {\n        return res.status(400).json({ message: canCancel.reason });\n      }\n\n      const appointment = await storage.cancelAppointment(req.params.id, reason);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      res.json({ message: \"Agendamento cancelado com sucesso\", appointment });\n    } catch (error) {\n      console.error(\"Error canceling appointment:\", error);\n      res.status(500).json({ message: \"Erro ao cancelar agendamento\" });\n    }\n  });\n\n  // Reschedule appointment\n  app.post(\"/api/appointments/:id/reschedule\", authenticateToken, async (req, res) => {\n    try {\n      // Check if the user is a merchant or an employee\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { newDate, newTime, reason } = req.body;\n\n      if (!newDate || !newTime || !reason) {\n        return res.status(400).json({ message: \"Campos obrigatórios: newDate, newTime, reason\" });\n      }\n\n      // Get appointment to verify ownership\n      const existingAppointment = await storage.getAppointment(req.params.id);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Verify appointment belongs to the merchant (or employee's merchant)\n      const userMerchantId = req.user.role === \"merchant\" ? req.user.userId : req.user.merchantId;\n      if (existingAppointment.merchantId !== userMerchantId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Check if rescheduling is allowed (funcionários podem reagendar a qualquer momento)\n      const canReschedule = await storage.canRescheduleAppointment(req.params.id, req.user.role);\n      if (!canReschedule.canReschedule) {\n        return res.status(400).json({ message: canReschedule.reason });\n      }\n\n      const appointment = await storage.rescheduleAppointment(req.params.id, newDate, newTime, reason);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      res.json({ message: \"Agendamento reagendado com sucesso\", appointment });\n    } catch (error) {\n      console.error(\"Error rescheduling appointment:\", error);\n      res.status(500).json({ message: \"Erro ao reagendar agendamento\" });\n    }\n  });\n\n  // Mark appointment as late\n  app.post(\"/api/appointments/:id/late\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const appointment = await storage.markAppointmentAsLate(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      res.json({ message: \"Agendamento marcado como atrasado\", appointment });\n    } catch (error) {\n      console.error(\"Error marking appointment as late:\", error);\n      res.status(500).json({ message: \"Erro ao marcar agendamento como atrasado\" });\n    }\n  });\n\n  // Mark appointment as no-show\n  app.post(\"/api/appointments/:id/no-show\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const appointment = await storage.markAppointmentAsNoShow(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      res.json({ message: \"Agendamento marcado como falta\", appointment });\n    } catch (error) {\n      console.error(\"Error marking appointment as no-show:\", error);\n      res.status(500).json({ message: \"Erro ao marcar agendamento como falta\" });\n    }\n  });\n\n  // Update appointment status\n  app.post(\"/api/appointments/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"\\n=== DEBUG: APPOINTMENT STATUS UPDATE ROUTE ===\");\n      console.log(`Appointment ID: ${req.params.id}`);\n      console.log(`User: ${req.user?.email} (${req.user?.role})`);\n      console.log(`Request body:`, JSON.stringify(req.body, null, 2));\n      console.log(`Request headers:`, Object.fromEntries(Object.entries(req.headers).filter(([key]) => \n        ['content-type', 'authorization', 'user-agent'].includes(key.toLowerCase()))));\n\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        console.error(`Access denied: user role ${req.user.role} not authorized`);\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      console.log(\"✅ Authorization passed\");\n\n      // Get current appointment before update\n      const currentAppointment = await storage.getAppointment(req.params.id);\n      if (!currentAppointment) {\n        console.error(`❌ Appointment ${req.params.id} not found in database`);\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      console.log(\"Current appointment state:\", {\n        id: currentAppointment.id,\n        status: currentAppointment.status,\n        paymentStatus: (currentAppointment as any).paymentStatus,\n        clientName: currentAppointment.clientName,\n        appointmentDate: currentAppointment.appointmentDate,\n        appointmentTime: currentAppointment.appointmentTime\n      });\n\n      const statusUpdate = req.body;\n      console.log(\"About to call storage.updateAppointmentStatus...\");\n\n      const appointment = await storage.updateAppointmentStatus(req.params.id, statusUpdate);\n\n      if (!appointment) {\n        console.error(`❌ updateAppointmentStatus returned null/undefined`);\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      console.log(\"Updated appointment state:\", {\n        id: appointment.id,\n        status: appointment.status,\n        paymentStatus: (appointment as any).paymentStatus,\n        clientName: appointment.clientName,\n        updatedAt: appointment.updatedAt\n      });\n\n      console.log(`✅ Appointment ${req.params.id} status updated successfully`);\n      console.log(\"=== END DEBUG ===\\n\");\n\n      res.json({ message: \"Status do agendamento atualizado\", appointment });\n    } catch (error) {\n      console.error(\"\\n❌ ERROR in appointment status update:\");\n      console.error(\"Error message:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n      console.error(\"=== END ERROR DEBUG ===\\n\");\n      res.status(500).json({ message: \"Erro ao atualizar status do agendamento\", error: error.message });\n    }\n  });\n\n  // Get employee schedule\n  app.get(\"/api/employees/:id/schedule\", authenticateToken, async (req, res) => {\n    try {\n      const schedule = await storage.getEmployeeSchedule(req.params.id);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error getting employee schedule:\", error);\n      res.status(500).json({ message: \"Erro ao buscar horários do funcionário\" });\n    }\n  });\n\n  // Promotions endpoints\n  // Get promotions for a merchant\n  app.get(\"/api/promotions\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const promotions = await storage.getPromotionsByMerchant(merchantId);\n      res.json(promotions);\n    } catch (error) {\n      console.error(\"Error getting promotions:\", error);\n      res.status(500).json({ message: \"Erro ao buscar promoções\" });\n    }\n  });\n\n  // Get active promotions for a merchant\n  app.get(\"/api/promotions/active\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const promotions = await storage.getActivePromotionsByMerchant(merchantId);\n      res.json(promotions);\n    } catch (error) {\n      console.error(\"Error getting active promotions:\", error);\n      res.status(500).json({ message: \"Erro ao buscar promoções ativas\" });\n    }\n  });\n\n  // Create promotion\n  app.post(\"/api/promotions\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const promotionData = promotionSchema.parse({\n        ...req.body,\n        merchantId: req.user.userId,\n      });\n\n      const promotion = await storage.createPromotion(promotionData);\n      res.status(201).json(promotion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Error creating promotion:\", error);\n      res.status(500).json({ message: \"Erro ao criar promoção\" });\n    }\n  });\n\n  // Update promotion\n  app.put(\"/api/promotions/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const updates = promotionSchema.partial().parse(req.body);\n      const promotion = await storage.updatePromotion(req.params.id, updates);\n\n      if (!promotion) {\n        return res.status(404).json({ message: \"Promoção não encontrada\" });\n      }\n\n      // Verify promotion belongs to the merchant\n      if (promotion.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      res.json(promotion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Error updating promotion:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar promoção\" });\n    }\n  });\n\n  // Delete promotion\n  app.delete(\"/api/promotions/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const promotion = await storage.getPromotion(req.params.id);\n      if (!promotion) {\n        return res.status(404).json({ message: \"Promoção não encontrada\" });\n      }\n\n      // Verify promotion belongs to the merchant\n      if (promotion.merchantId !== req.user.userId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const success = await storage.deletePromotion(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Promoção não encontrada\" });\n      }\n\n      res.json({ message: \"Promoção removida com sucesso\" });\n    } catch (error) {\n      console.error(\"Error deleting promotion:\", error);\n      res.status(500).json({ message: \"Erro ao remover promoção\" });\n    }\n  });\n\n  // Update employee schedule  \n  app.put(\"/api/employees/:id/schedule\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const schedule = req.body;\n      const employee = await storage.updateEmployeeSchedule(req.params.id, schedule);\n\n      if (!employee) {\n        return res.status(404).json({ message: \"Funcionário não encontrado\" });\n      }\n\n      res.json({ message: \"Horários do funcionário atualizados\", employee });\n    } catch (error) {\n      console.error(\"Error updating employee schedule:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar horários do funcionário\" });\n    }\n  });\n\n  // Get merchant dashboard stats\n  app.get(\"/api/merchant/stats\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      console.log(\"Getting merchant stats for:\", req.user.userId);\n      const stats = await storage.getMerchantDashboardStats(req.user.userId);\n      console.log(\"Merchant stats retrieved:\", stats);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error in merchant stats endpoint:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estatísticas\", error: error.message });\n    }\n  });\n\n  // Get merchant penalties\n  app.get(\"/api/merchant/penalties\", authenticateToken, async (req, res) => {\n    try {\n      let merchantId: string;\n\n      if (req.user.role === \"merchant\") {\n        merchantId = req.user.userId;\n      } else if (req.user.role === \"employee\") {\n        merchantId = req.user.merchantId;\n        if (!merchantId) {\n          return res.status(400).json({ message: \"Funcionário não associado a um comerciante\" });\n        }\n      } else {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const penalties = await storage.getPenaltiesByMerchant(merchantId);\n\n      res.json(penalties);\n    } catch (error) {\n      console.error(\"Error fetching merchant penalties:\", error);\n      res.status(500).json({ message: \"Erro ao buscar multas\" });\n    }\n  });\n\n  // Update penalty status\n  app.put(\"/api/penalties/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const penaltyId = req.params.id;\n      const { status } = req.body;\n      const paidBy = req.user.userId;\n\n      if (![\"paid\", \"waived\"].includes(status)) {\n        return res.status(400).json({ message: \"Status inválido\" });\n      }\n\n      const updatedPenalty = await storage.updatePenaltyStatus(penaltyId, status, paidBy);\n\n      if (!updatedPenalty) {\n        return res.status(404).json({ message: \"Multa não encontrada\" });\n      }\n\n      res.json(updatedPenalty);\n    } catch (error) {\n      console.error(\"Error updating penalty status:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar status da multa\" });\n    }\n  });\n\n  // Get merchant settings for employee\n  app.get(\"/api/employee/merchant-settings\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n\n      // Get employee data to find merchant\n      const employee = await storage.getUser(employeeId);\n\n      if (!employee || employee.role !== 'employee') {\n        return res.status(404).json({ error: 'Employee not found' });\n      }\n\n      // Get merchant data\n      const merchant = await storage.getMerchant(employee.merchantId!);\n\n      if (!merchant) {\n        return res.status(404).json({ error: 'Merchant not found' });\n      }\n\n      // Return only the relevant settings\n      res.json({\n        cancellationFeeEnabled: merchant.cancellationFeeEnabled || false,\n        cancellationFeeAmount: merchant.cancellationFeeAmount || 0,\n        cancellationPolicyHours: merchant.cancellationPolicyHours || 24\n      });\n    } catch (error) {\n      console.error('Error fetching merchant settings for employee:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Get employee appointments\n  app.get(\"/api/employee/appointments\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n      const date = req.query.date as string || new Date().toISOString().split('T')[0];\n\n      const appointments = await storage.getAppointmentsByEmployeeAndDate(employeeId, date);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching employee appointments:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Employee dashboard - get upcoming appointments\n  app.get(\"/api/employee/appointments/upcoming\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n\n      const appointments = await storage.getEmployeeUpcomingAppointments(employeeId);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching employee upcoming appointments:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Employee dashboard - get historical appointments\n  app.get(\"/api/employee/appointments/history\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n      const filter = req.query.filter as string || \"month\";\n\n      const appointments = await storage.getEmployeeHistoricalAppointments(employeeId, filter);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching employee historical appointments:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Client dashboard - get historical appointments\n  app.get(\"/api/client/appointments/history\", requireAuth, requireRole([\"client\"]), async (req, res) => {\n    try {\n      const clientId = req.user.userId;\n      const filter = req.query.filter as string || \"month\";\n\n      const appointments = await storage.getClientHistoricalAppointments(clientId, filter);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching client historical appointments:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Client dashboard stats\n  app.get(\"/api/client/stats\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Assuming storage has a method to get client-specific stats\n      // For now, let's return basic client info\n      const client = await storage.getClient(req.user.userId);\n      if (!client) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      const stats = {\n        id: client.id,\n        name: client.name,\n        email: client.email,\n        phone: client.phone,\n        merchantId: client.merchantId,\n        // Add any other relevant client stats here\n      };\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching client stats:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estatísticas do cliente\" });\n    }\n  });\n\n  // Upgrade merchant to VIP plan\n  app.post(\"/api/merchant/upgrade-to-vip\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const merchant = await storage.getMerchant(merchantId);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      // Calculate new plan validity (30 days from now)\n      const now = new Date();\n      const planValidity = new Date(now.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days\n\n      const updates = {\n        planStatus: \"vip\",\n        planValidity: planValidity,\n        monthlyFee: 100, // R$ 1.00 in cents\n        paymentStatus: \"paid\" as const,\n      };\n\n      const updatedMerchant = await storage.updateMerchant(merchantId, updates);\n\n      if (!updatedMerchant) {\n        return res.status(500).json({ message: \"Erro ao ativar plano VIP\" });\n      }\n\n      res.json({\n        message: \"Plano VIP ativado com sucesso! Válido por 30 dias.\",\n        merchant: {\n          id: updatedMerchant.id,\n          planStatus: updatedMerchant.planStatus,\n          planValidity: updatedMerchant.planValidity,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error upgrading to VIP:\", error);\n      res.status(500).json({ message: \"Erro ao ativar plano VIP\" });\n    }\n  });\n\n  // Renew VIP plan\n  app.post(\"/api/merchant/renew-vip\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const merchant = await storage.getMerchant(merchantId);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      // Calculate new validity (add 30 days to current validity or now if expired)\n      const now = new Date();\n      const currentValidity = merchant.planValidity ? new Date(merchant.planValidity) : now;\n      const baseDate = currentValidity > now ? currentValidity : now;\n      const newValidity = new Date(baseDate.getTime() + (30 * 24 * 60 * 60 * 1000)); // Add 30 days\n\n      const updates = {\n        planStatus: \"vip\",\n        planValidity: newValidity,\n        paymentStatus: \"paid\" as const,\n      };\n\n      const updatedMerchant = await storage.updateMerchant(merchantId, updates);\n\n      if (!updatedMerchant) {\n        return res.status(500).json({ message: \"Erro ao renovar plano VIP\" });\n      }\n\n      const daysAdded = Math.ceil((newValidity.getTime() - (merchant.planValidity ? new Date(merchant.planValidity).getTime() : now.getTime())) / (1000 * 60 * 60 * 24));\n\n      res.json({\n        message: `Plano VIP renovado com sucesso! ${daysAdded} dias adicionados.`,\n        merchant: {\n          id: updatedMerchant.id,\n          planStatus: updatedMerchant.planStatus,\n          planValidity: updatedMerchant.planValidity,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error renewing VIP:\", error);\n      res.status(500).json({ message: \"Erro ao renovar plano VIP\" });\n    }\n  });\n\n  // Get client appointments\n  app.get(\"/api/client/appointments\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const clientId = req.user.userId;\n      const merchantId = req.user.merchantId; // Assuming merchantId is available in client token\n\n      if (!clientId || !merchantId) {\n        return res.status(400).json({ message: \"Informações do cliente ou do comerciante não encontradas\" });\n      }\n\n      const { date, startDate, endDate } = req.query;\n\n      // Get merchant info to include cancellation policies\n      const merchant = await storage.getMerchant(merchantId);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Merchant não encontrado\" });\n      }\n\n      let appointments;\n      if (date) {\n        appointments = await storage.getClientAppointmentsByDate(clientId, merchantId, date as string);\n      } else if (startDate && endDate) {\n        appointments = await storage.getClientAppointmentsByDateRange(clientId, merchantId, startDate as string, endDate as string);\n      } else {\n        appointments = await storage.getClientAppointments(clientId, merchantId);\n      }\n\n      // Log for debugging\n      console.log(`Client ${clientId} appointments:`, appointments.length, appointments.map(a => ({ id: a.id, status: a.status, date: a.appointmentDate })));\n\n      // Include merchant cancellation policies in the response\n      const merchantPolicies = {\n        cancellationFeeEnabled: merchant.cancellationFeeEnabled || false,\n        cancellationFeeAmount: merchant.cancellationFeeAmount || 0,\n        cancellationPolicyHours: merchant.cancellationPolicyHours || 24\n      };\n\n      console.log(\"=== SENDING MERCHANT POLICIES TO CLIENT ===\");\n      console.log(\"Merchant:\", merchant.name);\n      console.log(\"Policies:\", merchantPolicies);\n      console.log(\"Raw merchant data:\", {\n        cancellationFeeEnabled: merchant.cancellationFeeEnabled,\n        cancellationFeeAmount: merchant.cancellationFeeAmount, \n        cancellationPolicyHours: merchant.cancellationPolicyHours\n      });\n      console.log(\"=== END MERCHANT POLICIES ===\");\n\n      const response = {\n        appointments,\n        merchantPolicies\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error fetching client appointments:\", error);\n      res.status(500).json({ message: \"Erro ao buscar agendamentos do cliente\" });\n    }\n  });\n\n  // Get services available for client\n  app.get(\"/api/client/services\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.merchantId;\n      if (!merchantId) {\n        return res.status(400).json({ message: \"Merchant ID não encontrado\" });\n      }\n\n      const services = await storage.getActiveServicesByMerchant(merchantId);\n\n      // Enrich services with promotion information\n      const servicesWithPromotions = await Promise.all(\n        services.map(async (service) => {\n          const promotionInfo = await storage.calculatePromotionalPrice(service.id, service.price);\n          return {\n            ...service,\n            hasPromotion: promotionInfo.hasPromotion,\n            originalPrice: promotionInfo.originalPrice,\n            promotionalPrice: promotionInfo.promotionalPrice,\n            promotion: promotionInfo.discount\n          };\n        })\n      );\n\n      res.json(servicesWithPromotions);\n    } catch (error) {\n      console.error(\"Error fetching client services:\", error);\n      res.status(500).json({ message: \"Erro ao buscar serviços\" });\n    }\n  });\n\n  // Get employees available for client\n  app.get(\"/api/client/employees\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.merchantId;\n      if (!merchantId) {\n        return res.status(400).json({ message: \"Merchant ID não encontrado\" });\n      }\n\n      const { date } = req.query;\n\n      const employees = await storage.getActiveEmployeesByMerchant(merchantId);\n\n      // If date is provided, filter out employees who are on day off\n      if (date) {\n        const availableEmployees = [];\n        for (const employee of employees) {\n          const isOnDayOff = await storage.isEmployeeOnDayOff(employee.id, date as string);\n          if (!isOnDayOff) {\n            availableEmployees.push(employee);\n          }\n        }\n        res.json(availableEmployees.map(toPublicEmployee));\n      } else {\n        res.json(employees.map(toPublicEmployee));\n      }\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n      res.status(500).json({ message: \"Erro ao buscar funcionários\" });\n    }\n  });\n\n  // Check employee availability\n  app.get(\"/api/client/availability\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { employeeId, date, time, duration } = req.query;\n      const merchantId = req.user.merchantId;\n\n      if (!merchantId || !date || !time || !duration) {\n        return res.status(400).json({ message: \"Parâmetros obrigatórios: date, time, duration\" });\n      }\n\n      // Get all appointments for the specified date\n      const appointments = await storage.getAppointmentsByDate(merchantId, date as string);\n\n      // Only consider appointments that are still active\n      const now = new Date();\n      const today = now.toISOString().split('T')[0];\n      const isToday = date === today;\n\n      const activeAppointments = appointments.filter(apt => {\n        // First filter by status - only include active appointments\n        const isActiveStatus = apt.status === \"pending\" || apt.status === \"confirmed\" || apt.status === \"scheduled\" || apt.status === \"late\";\n\n        // For today's appointments, also check if the appointment time has passed\n        if (isToday && isActiveStatus) {\n          const [aptHour, aptMinute] = apt.appointmentTime.split(':').map(Number);\n          const aptTimeMinutes = aptHour * 60 + aptMinute;\n          const currentTimeMinutes = now.getHours() * 60 + now.getMinutes();\n\n          // If appointment was more than 5 minutes ago and still pending, consider it available\n          if (aptTimeMinutes + 5 < currentTimeMinutes && apt.status === \"pending\") {\n            return false;\n          }\n        }\n\n        return isActiveStatus;\n      });\n\n      // Filter appointments based on employee selection\n      let relevantAppointments;\n      if (employeeId && employeeId !== \"any\") {\n        // Check specific employee availability\n        relevantAppointments = activeAppointments.filter(apt => apt.employeeId === employeeId);\n      } else {\n        // Check if ANY employee is available (only active appointments count as conflicts)\n        relevantAppointments = activeAppointments;\n      }\n\n      // Check if the requested time slot conflicts with existing appointments\n      const requestedTime = time as string;\n      const requestedDuration = parseInt(duration as string);\n\n      // Convert time to minutes for easier comparison\n      const timeToMinutes = (timeStr: string) => {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours * 60 + minutes;\n      };\n\n      const requestedStart = timeToMinutes(requestedTime);\n      const requestedEnd = requestedStart + requestedDuration;\n\n      // Get service durations for existing appointments\n      const appointmentsWithDuration = await Promise.all(\n        relevantAppointments.map(async (apt) => {\n          const service = await storage.getService(apt.serviceId);\n          return {\n            ...apt,\n            serviceDuration: service?.duration || 60, // Default to 60 minutes if service not found\n          };\n        })\n      );\n\n      const isAvailable = !appointmentsWithDuration.some(apt => {\n        const aptStart = timeToMinutes(apt.appointmentTime);\n        const aptEnd = aptStart + apt.serviceDuration;\n\n        // Check for overlap: appointments conflict if they overlap in any way\n        return (requestedStart < aptEnd && requestedEnd > aptStart);\n      });\n\n      res.json({ available: isAvailable });\n    } catch (error) {\n      console.error(\"Error checking availability:\", error);\n      res.status(500).json({ message: \"Erro ao verificar disponibilidade\" });\n    }\n  });\n\n  // Get occupied time slots for a specific date\n  app.get(\"/api/client/occupied-times\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { date, employeeId } = req.query;\n      const merchantId = req.user.merchantId;\n\n      if (!merchantId || !date) {\n        return res.status(400).json({ message: \"Parâmetros obrigatórios: date\" });\n      }\n\n      // Get all appointments for the specified date\n      const appointments = await storage.getAppointmentsByDate(merchantId, date as string);\n      console.log(`Found ${appointments.length} appointments for date ${date}:`, appointments);\n\n      // Only consider appointments that are still active (pending, confirmed, scheduled, late)\n      // Completed, cancelled, and no_show appointments should free up the time slot after being marked as such\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      const today = now.toISOString().split('T')[0];\n      const isToday = date === today;\n\n      let filteredAppointments = appointments.filter(apt => {\n        // First filter by status - only include active appointments\n        const isActiveStatus = apt.status === \"pending\" || apt.status === \"confirmed\" || apt.status === \"scheduled\" || apt.status === \"late\";\n\n        // For today's appointments, also check if the appointment time has passed\n        // If it's past the appointment time and still not marked as completed/cancelled/no_show,\n        // we should still consider it as occupying the slot (in case it's running late)\n        if (isToday && isActiveStatus) {\n          // If appointment time has passed by more than 5 minutes and it's still \"pending\", \n          // we can consider it available for new bookings\n          const [aptHour, aptMinute] = apt.appointmentTime.split(':').map(Number);\n          const aptTimeMinutes = aptHour * 60 + aptMinute;\n          const currentTimeMinutes = now.getHours() * 60 + now.getMinutes();\n\n          // If appointment was more than 5 minutes ago and still pending, free the slot\n          if (aptTimeMinutes + 5 < currentTimeMinutes && apt.status === \"pending\") {\n            return false;\n          }\n        }\n\n        return isActiveStatus;\n      });\n\n      console.log(`Filtered to active appointments only: ${appointments.length} -> ${filteredAppointments.length}`);\n\n      if (employeeId && employeeId !== \"any\" && employeeId !== \"\") {\n        // If specific employee is selected, only consider their active appointments\n        filteredAppointments = filteredAppointments.filter(apt => apt.employeeId === employeeId);\n        console.log(`Filtered to ${filteredAppointments.length} active appointments for employee ${employeeId}`);\n      } else {\n        // For \"any employee\" or no employee selection, consider all active appointments\n        // This prevents double-booking any time slot\n        console.log(`Using all ${filteredAppointments.length} active appointments (no specific employee selected)`);\n      }\n\n      // Get service durations and calculate occupied time slots\n      const occupiedSlots = [];\n\n      for (const apt of filteredAppointments) {\n        const service = await storage.getService(apt.serviceId);\n        const duration = service?.duration || 60;\n\n        // Convert appointment time to minutes\n        const [hours, minutes] = apt.appointmentTime.split(':').map(Number);\n        const startMinutes = hours * 60 + minutes;\n\n        // Mark the exact start time as occupied (this is what we check against)\n        const timeSlot = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n        occupiedSlots.push(timeSlot);\n\n        console.log(`Active appointment at ${apt.appointmentTime} (status: ${apt.status}, duration: ${duration}min) marks ${timeSlot} as occupied`);\n      }\n\n      // Remove duplicates\n      const uniqueOccupiedSlots = Array.from(new Set(occupiedSlots));\n      console.log(`Total occupied time slots:`, uniqueOccupiedSlots);\n\n      res.json({ occupiedTimes: uniqueOccupiedSlots });\n    } catch (error) {\n      console.error(\"Error getting occupied times:\", error);\n      res.status(500).json({ message: \"Erro ao buscar horários ocupados\" });\n    }\n  });\n\n  // Create appointment for client\n  app.post(\"/api/client/appointments\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const clientId = req.user.userId;\n      const merchantId = req.user.merchantId;\n      const client = await storage.getClient(clientId);\n\n      if (!client) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      // Get merchant info to check if salon is open\n      const merchant = await storage.getMerchant(merchantId);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Salão não encontrado\" });\n      }\n\n      const { serviceId, employeeId, appointmentDate, appointmentTime, notes } = req.body;\n\n      if (!serviceId || !appointmentDate || !appointmentTime) {\n        return res.status(400).json({ message: \"Campos obrigatórios: serviceId, appointmentDate, appointmentTime\" });\n      }\n\n      // Check if salon is closed and if trying to book for today\n      const today = new Date().toISOString().split('T')[0];\n      const isBookingForToday = appointmentDate === today;\n\n      if (!merchant.isOpen && isBookingForToday) {\n        return res.status(400).json({ \n          message: \"O salão está fechado hoje. Você só pode agendar para os próximos dias quando o salão estiver funcionando normalmente.\" \n        });\n      }\n\n      // Get service to check duration\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Serviço não encontrado\" });\n      }\n\n      // Check for conflicts\n      const existingAppointments = await storage.getAppointmentsByDate(merchantId, appointmentDate);\n\n      // If a specific employee is selected, check only their appointments\n      // If no employee is selected (any employee), check all appointments\n      const relevantAppointments = employeeId \n        ? existingAppointments.filter(apt => apt.employeeId === employeeId)\n        : existingAppointments;\n\n      // Convert time to minutes for easier comparison\n      const timeToMinutes = (timeStr: string) => {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours * 60 + minutes;\n      };\n\n      const requestedStart = timeToMinutes(appointmentTime);\n      const requestedEnd = requestedStart + service.duration;\n\n      // Check for conflicts with existing appointments\n      for (const existingApt of relevantAppointments) {\n        // Skip appointments that don't occupy time slots\n        if (existingApt.status === \"cancelled\" || existingApt.status === \"completed\" || existingApt.status === \"no_show\") {\n          continue;\n        }\n\n        const existingService = await storage.getService(existingApt.serviceId);\n        const existingDuration = existingService?.duration || 60;\n\n        const existingStart = timeToMinutes(existingApt.appointmentTime);\n        const existingEnd = existingStart + existingDuration;\n\n        // Check for overlap\n        if (requestedStart < existingEnd && requestedEnd > existingStart) {\n          return res.status(409).json({ \n            message: employeeId \n              ? \"Este horário já está ocupado para o funcionário selecionado\" \n              : \"Este horário já está ocupado. Por favor, selecione outro horário.\"\n          });\n        }\n      }\n\n      // Calculate end time based on service duration\n      const [hours, minutes] = appointmentTime.split(':').map(Number);\n      const endMinutes = minutes + service.duration;\n      const endHour = hours + Math.floor(endMinutes / 60);\n      const finalMinutes = endMinutes % 60;\n      const endTime = `${endHour.toString().padStart(2, '0')}:${finalMinutes.toString().padStart(2, '0')}`;\n\n      const appointmentData = {\n        merchantId,\n        serviceId,\n        clientId,\n        employeeId: employeeId || null,\n        clientName: client.name,\n        clientPhone: client.phone,\n        clientEmail: client.email,\n        appointmentDate,\n        appointmentTime,\n        endTime,\n        notes: notes || null,\n        status: \"pending\"\n      };\n\n      const appointment = await storage.createAppointment(appointmentData);\n      res.status(201).json(appointment);\n    } catch (error) {\n      console.error(\"Error creating client appointment:\", error);\n\n      // Check if the error is about employee day off\n      if ((error as Error).message === \"Este funcionário está de folga neste dia.\") {\n        return res.status(400).json({ message: (error as Error).message });\n      }\n\n      res.status(500).json({ message: \"Erro ao criar agendamento\" });\n    }\n  });\n\n  // Cancel appointment for client\n  app.post(\"/api/client/appointments/:id/cancel\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { reason } = req.body;\n      if (!reason) {\n        return res.status(400).json({ message: \"Motivo do cancelamento é obrigatório\" });\n      }\n\n      const appointmentId = req.params.id;\n\n      // Get appointment to verify ownership\n      const existingAppointment = await storage.getAppointment(appointmentId);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Verify appointment belongs to the client\n      if (existingAppointment.clientId !== req.user.userId) {\n        return res.status(403).json({ message: \"Você só pode cancelar seus próprios agendamentos\" });\n      }\n\n      // Get merchant policies for fee calculation\n      const merchant = await storage.getMerchant(existingAppointment.merchantId);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Merchant não encontrado\" });\n      }\n\n      // Check if appointment can be cancelled (only confirmed appointments)\n      if (existingAppointment.status !== \"confirmed\") {\n        return res.status(400).json({ message: \"Apenas agendamentos confirmados podem ser cancelados\" });\n      }\n\n      // Calculate if there will be a cancellation fee\n      let hasFee = false;\n      let feeAmount = 0;\n\n      if (merchant.cancellationFeeEnabled) {\n        const now = new Date();\n        const appointmentDateTime = new Date(`${existingAppointment.appointmentDate}T${existingAppointment.appointmentTime}`);\n        const timeDiff = appointmentDateTime.getTime() - now.getTime();\n        const hoursDiff = timeDiff / (1000 * 60 * 60);\n        const policyHours = merchant.cancellationPolicyHours || 24;\n\n        console.log(\"Backend cancellation fee calculation:\", {\n          appointmentId: appointmentId,\n          appointmentDate: existingAppointment.appointmentDate,\n          appointmentTime: existingAppointment.appointmentTime,\n          now: now.toISOString(),\n          appointmentDateTime: appointmentDateTime.toISOString(),\n          timeDiff,\n          hoursDiff,\n          policyHours,\n          feeEnabled: merchant.cancellationFeeEnabled,\n          feeAmount: merchant.cancellationFeeAmount\n        });\n\n        // There will be a fee if canceling with less time than policy requires\n        // Se a diferença for menor que 23h59min (1439 minutos), paga multa\n        if (hoursDiff * 60 < 1439) {\n          hasFee = true;\n          feeAmount = merchant.cancellationFeeAmount || 0;\n          console.log(\"Multa será aplicada:\", { hasFee, feeAmount });\n        } else if (hoursDiff > 24) {\n          // Se a diferença for maior que 24h, não paga multa\n          hasFee = false;\n          feeAmount = 0;\n          console.log(\"Sem multa - cancelamento com antecedência suficiente\");\n        } else {\n          // Caso contrário, usa a política padrão (se houver)\n          if (hoursDiff < policyHours) {\n            hasFee = true;\n            feeAmount = merchant.cancellationFeeAmount || 0;\n            console.log(\"Multa será aplicada com base na política:\", { hasFee, feeAmount });\n          } else {\n            console.log(\"Sem multa - cancelamento dentro do tempo da política\");\n          }\n        }\n      } else {\n        console.log(\"Cancellation fee disabled for this merchant\");\n      }\n\n      const appointment = await storage.cancelAppointment(appointmentId, reason);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Create penalty record if there's a fee and the system is enabled\n      if (hasFee && feeAmount > 0 && merchant.cancellationFeeEnabled) {\n        await storage.createPenalty({\n          merchantId: existingAppointment.merchantId,\n          clientId: existingAppointment.clientId || null,\n          appointmentId: appointmentId,\n          clientName: existingAppointment.clientName,\n          clientPhone: existingAppointment.clientPhone,\n          clientEmail: existingAppointment.clientEmail || null,\n          type: \"cancellation\",\n          amount: feeAmount,\n          reason: `Multa por cancelamento com menos de ${merchant.cancellationPolicyHours || 24} horas de antecedência`,\n          status: \"pending\"\n        });\n      }\n\n      const response = {\n        message: \"Agendamento cancelado com sucesso\",\n        appointment,\n        cancellationFee: {\n          hasFee,\n          amount: feeAmount,\n          amountInReais: feeAmount / 100\n        }\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error canceling client appointment:\", error);\n      res.status(500).json({ message: \"Erro ao cancelar agendamento\" });\n    }\n  });\n\n  // Reschedule appointment for client  \n  app.post(\"/api/client/appointments/:id/reschedule\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { newDate, newTime, reason } = req.body;\n      if (!newDate || !newTime || !reason) {\n        return res.status(400).json({ message: \"Campos obrigatórios: newDate, newTime, reason\" });\n      }\n\n      const appointmentId = req.params.id;\n\n      // Get appointment to verify ownership\n      const existingAppointment = await storage.getAppointment(appointmentId);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      // Verify appointment belongs to the client\n      if (existingAppointment.clientId !== req.user.userId) {\n        return res.status(403).json({ message: \"Você só pode reagendar seus próprios agendamentos\" });\n      }\n\n      // Check if rescheduling is allowed (aplicar política de 24h para clientes)\n      const canReschedule = await storage.canRescheduleAppointment(appointmentId, \"client\");\n      if (!canReschedule.canReschedule) {\n        return res.status(400).json({ message: canReschedule.reason });\n      }\n\n      const appointment = await storage.rescheduleAppointment(appointmentId, newDate, newTime, reason);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Agendamento não encontrado\" });\n      }\n\n      res.json({ message: \"Agendamento reagendado com sucesso\", appointment });\n    } catch (error) {\n      console.error(\"Error rescheduling client appointment:\", error);\n      res.status(500).json({ message: \"Erro ao reagendar agendamento\" });\n    }\n  });\n\n  // Employee dashboard stats\n  app.get(\"/api/employee/stats\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Assuming storage has a method to get employee-specific stats\n      // For now, let's return basic employee info\n      const employee = await storage.getEmployee(req.user.userId);\n      if (!employee) {\n        return res.status(404).json({ message: \"Funcionário não encontrado\" });\n      }\n\n      const stats = {\n        id: employee.id,\n        name: employee.name,\n        email: employee.email,\n        phone: employee.phone,\n        merchantId: employee.merchantId,\n        // Add any other relevant employee stats here\n      };\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching employee stats:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estatísticas do funcionário\" });\n    }\n  });\n\n  // Get employee earnings for a period\n  app.get(\"/api/employee/earnings\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n      const { startDate, endDate } = req.query;\n\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"startDate e endDate são obrigatórios\" });\n      }\n\n      const earnings = await storage.calculateEmployeeEarnings(\n        employeeId, \n        startDate as string, \n        endDate as string\n      );\n\n      res.json({ earnings });\n    } catch (error) {\n      console.error(\"Error calculating employee earnings:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Extend working hours for employee\n  app.post(\"/api/employee/extend-hours\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n      const { newEndTime } = req.body;\n\n      if (!newEndTime) {\n        return res.status(400).json({ message: \"Novo horário de fim é obrigatório\" });\n      }\n\n      // Validate time format\n      if (!/^\\d{2}:\\d{2}$/.test(newEndTime)) {\n        return res.status(400).json({ message: \"Horário deve estar no formato HH:MM\" });\n      }\n\n      const employee = await storage.extendWorkingHours(employeeId, newEndTime);\n      if (!employee) {\n        return res.status(404).json({ message: \"Funcionário não encontrado\" });\n      }\n\n      res.json({ \n        message: \"Horário de trabalho estendido com sucesso\", \n        employee: {\n          id: employee.id,\n          name: employee.name,\n          originalEndTime: employee.endTime,\n          extendedEndTime: employee.extendedEndTime\n        }\n      });\n    } catch (error) {\n      console.error(\"Error extending work hours:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Finish workday and calculate overtime\n  app.post(\"/api/employee/finish-workday\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n      const { actualEndTime } = req.body;\n\n      if (!actualEndTime) {\n        return res.status(400).json({ message: \"Horário real de saída é obrigatório\" });\n      }\n\n      // Validate time format\n      if (!/^\\d{2}:\\d{2}$/.test(actualEndTime)) {\n        return res.status(400).json({ message: \"Horário deve estar no formato HH:MM\" });\n      }\n\n      const result = await storage.finishWorkdayWithOvertime(employeeId, actualEndTime);\n\n      const overtimeHours = Math.floor(result.overtimeMinutes / 60);\n      const overtimeMinutes = result.overtimeMinutes % 60;\n\n      res.json({ \n        message: \"Expediente encerrado com sucesso\", \n        employee: {\n          id: result.employee.id,\n          name: result.employee.name,\n          originalEndTime: result.employee.endTime,\n          actualEndTime: actualEndTime\n        },\n        overtime: {\n          totalMinutes: result.overtimeMinutes,\n          hours: overtimeHours,\n          minutes: overtimeMinutes,\n          formattedTime: `${overtimeHours}h ${overtimeMinutes}min`\n        }\n      });\n    } catch (error) {\n      console.error(\"Error finishing workday:\", error);\n      res.status(500).json({ message: error.message || \"Erro interno do servidor\" });\n    }\n  });\n\n  // Get employee overtime statistics\n  app.get(\"/api/employee/overtime-stats\", requireAuth, requireRole([\"employee\"]), async (req, res) => {\n    try {\n      const employeeId = req.user.userId;\n      const period = req.query.period as 'week' | 'month' | 'year' || 'month';\n\n      const stats = await storage.getEmployeeOvertimeStats(employeeId, period);\n\n      res.json({\n        totalOvertimeMinutes: stats.totalOvertimeMinutes,\n        totalOvertimeHours: stats.totalOvertimeHours,\n        lastOvertimeDate: stats.lastOvertimeDate,\n        formattedTime: `${Math.floor(stats.totalOvertimeMinutes / 60)}h ${stats.totalOvertimeMinutes % 60}min`\n      });\n    } catch (error) {\n      console.error(\"Error getting overtime stats:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Employee days off endpoints\n\n  // Get employee days off\n  app.get(\"/api/employee-days-off\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const { employeeId, date } = req.query;\n\n      const daysOff = await storage.getEmployeeDaysOff(\n        merchantId,\n        employeeId as string,\n        date as string\n      );\n\n      res.json(daysOff);\n    } catch (error) {\n      console.error(\"Error getting employee days off:\", error);\n      res.status(500).json({ message: \"Erro ao buscar folgas\" });\n    }\n  });\n\n  // Create employee day off\n  app.post(\"/api/employee-days-off\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"=== CREATE EMPLOYEE DAY OFF ===\");\n      console.log(\"User:\", req.user);\n      console.log(\"Request body:\", req.body);\n\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const { employeeId, date, reason } = req.body;\n\n      if (!employeeId || !date) {\n        return res.status(400).json({ message: \"ID do funcionário e data são obrigatórios\" });\n      }\n\n      // Validate date format\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n        return res.status(400).json({ message: \"Data deve estar no formato YYYY-MM-DD\" });\n      }\n\n      // Check if date is in the past\n      const selectedDate = new Date(date);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      if (selectedDate < today) {\n        return res.status(400).json({ message: \"Não é possível criar folga para datas no passado\" });\n      }\n\n      // Verify employee belongs to this merchant\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee || employee.merchantId !== merchantId) {\n        return res.status(403).json({ message: \"Funcionário não encontrado ou não pertence a este salão\" });\n      }\n\n      // Check if day off already exists for this employee and date\n      const existingDaysOff = await storage.getEmployeeDaysOff(merchantId, employeeId, date);\n      if (existingDaysOff.length > 0) {\n        return res.status(409).json({ message: \"Este funcionário já possui folga registrada para esta data\" });\n      }\n\n      console.log(\"Creating day off for employee:\", employee.name, \"on date:\", date);\n\n      const dayOff = await storage.createEmployeeDayOff({\n        merchantId,\n        employeeId,\n        date,\n        reason: reason || null,\n      });\n\n      console.log(\"Day off created successfully:\", dayOff);\n      res.status(201).json(dayOff);\n    } catch (error) {\n      console.error(\"Error creating employee day off:\", error);\n      console.error(\"Error stack:\", error.stack);\n      res.status(500).json({ \n        message: \"Erro ao criar folga\",\n        error: error.message \n      });\n    }\n  });\n\n  // Update employee day off\n  app.put(\"/api/employee-days-off/:id\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"=== UPDATE EMPLOYEE DAY OFF ===\");\n      console.log(\"User:\", req.user);\n      console.log(\"Request body:\", req.body);\n      console.log(\"Day off ID:\", req.params.id);\n\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const dayOffId = req.params.id;\n      const { employeeId, date, reason } = req.body;\n\n      if (!employeeId || !date) {\n        return res.status(400).json({ message: \"ID do funcionário e data são obrigatórios\" });\n      }\n\n      // Validate date format\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n        return res.status(400).json({ message: \"Data deve estar no formato YYYY-MM-DD\" });\n      }\n\n      // Check if date is in the past\n      const selectedDate = new Date(date);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      if (selectedDate < today) {\n        return res.status(400).json({ message: \"Não é possível editar folga para datas no passado\" });\n      }\n\n      // Get the day off to verify ownership\n      const daysOff = await storage.getEmployeeDaysOff(merchantId);\n      const existingDayOff = daysOff.find(d => d.id === dayOffId);\n\n      if (!existingDayOff) {\n        return res.status(404).json({ message: \"Folga não encontrada\" });\n      }\n\n      // Verify employee belongs to this merchant\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee || employee.merchantId !== merchantId) {\n        return res.status(403).json({ message: \"Funcionário não encontrado ou não pertence a este salão\" });\n      }\n\n      // Check if day off already exists for this employee and date (excluding current one)\n      const conflictingDayOff = daysOff.find(\n        d => d.employeeId === employeeId && \n             d.date === date && \n             d.id !== dayOffId\n      );\n\n      if (conflictingDayOff) {\n        return res.status(409).json({ message: \"Este funcionário já possui folga registrada para esta data\" });\n      }\n\n      console.log(\"Updating day off for employee:\", employee.name, \"on date:\", date);\n\n      const updatedDayOff = await storage.updateEmployeeDayOff(dayOffId, {\n        employeeId,\n        date,\n        reason: reason || null,\n      });\n\n      if (!updatedDayOff) {\n        return res.status(404).json({ message: \"Folga não encontrada\" });\n      }\n\n      console.log(\"Day off updated successfully:\", updatedDayOff);\n      res.json(updatedDayOff);\n    } catch (error) {\n      console.error(\"Error updating employee day off:\", error);\n      console.error(\"Error stack:\", error.stack);\n      res.status(500).json({ \n        message: \"Erro ao atualizar folga\",\n        error: error.message \n      });\n    }\n  });\n\n  // Delete employee day off\n  app.delete(\"/api/employee-days-off/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const dayOffId = req.params.id;\n\n      // Get the day off to verify ownership\n      const daysOff = await storage.getEmployeeDaysOff(merchantId);\n      const dayOff = daysOff.find(d => d.id === dayOffId);\n\n      if (!dayOff) {\n        return res.status(404).json({ message: \"Folga não encontrada\" });\n      }\n\n      const success = await storage.deleteEmployeeDayOff(dayOffId);\n      if (!success) {\n        return res.status(404).json({ message: \"Folga não encontrada\" });\n      }\n\n      res.json({ message: \"Folga removida com sucesso\" });\n    } catch (error) {\n      console.error(\"Error deleting employee day off:\", error);\n      res.status(500).json({ message: \"Erro ao remover folga\" });\n    }\n  });\n\n  // Debug endpoint to clean duplicate merchant data\n  app.post(\"/api/debug/clean-duplicates\", async (req, res) => {\n    try {\n      console.log(\"\\n=== CLEANING DUPLICATE MERCHANT DATA ===\");\n\n      const { email } = req.body;\n      if (!email) {\n        return res.status(400).json({ error: \"Email é obrigatório\" });\n      }\n\n      // Get all merchants with this email\n      const merchants = await storage.getAllMerchants();\n      const duplicates = merchants.filter(m => m.email === email);\n\n      console.log(`Found ${duplicates.length} merchants with email ${email}`);\n\n      if (duplicates.length <= 1) {\n        return res.json({ message: \"Nenhum duplicado encontrado\", duplicates: duplicates.length });\n      }\n\n      // Keep the most recent one and delete others\n      const sortedDuplicates = duplicates.sort((a, b) => \n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n      );\n\n      const keepMerchant = sortedDuplicates[0];\n      const toDelete = sortedDuplicates.slice(1);\n\n      console.log(`Keeping merchant: ${keepMerchant.id} (${keepMerchant.createdAt})`);\n      console.log(`Deleting ${toDelete.length} duplicates`);\n\n      let deletedCount = 0;\n      for (const duplicate of toDelete) {\n        const success = await storage.deleteMerchant(duplicate.id);\n        if (success) {\n          deletedCount++;\n          console.log(`Deleted duplicate: ${duplicate.id}`);\n        }\n      }\n\n      console.log(`=== CLEANUP COMPLETE: Deleted ${deletedCount} duplicates ===\\n`);\n\n      res.json({ \n        message: `Limpeza concluída: ${deletedCount} duplicados removidos`,\n        keptMerchant: keepMerchant.id,\n        deletedCount \n      });\n    } catch (error: any) {\n      console.error(\"Cleanup error:\", error);\n      res.status(500).json({ error: error?.message || \"Erro desconhecido\" });\n    }\n  });\n\n  // Debug endpoint to reset merchant password  \n  app.post(\"/api/debug/reset-merchant-password\", async (req, res) => {\n    try {\n      console.log(\"\\n=== RESETTING MERCHANT PASSWORD ===\");\n\n      const { email, newPassword } = req.body;\n      if (!email || !newPassword) {\n        return res.status(400).json({ error: \"Email e nova senha são obrigatórios\" });\n      }\n\n      // Find merchant by email\n      const merchant = await storage.getMerchantByEmail(email);\n      if (!merchant) {\n        return res.status(404).json({ error: \"Merchant não encontrado\" });\n      }\n\n      console.log(`Resetting password for merchant: ${email}`);\n      console.log(`Merchant ID: ${merchant.id}`);\n      console.log(`Current status: ${merchant.status}`);\n\n      // Update password directly using the storage method\n      const success = await storage.updateMerchantPassword(merchant.id, newPassword);\n\n      if (success) {\n        console.log(`Password successfully reset for merchant: ${email}`);\n        res.json({ \n          message: `Senha redefinida com sucesso para ${email}`,\n          merchantId: merchant.id,\n          status: merchant.status\n        });\n      } else {\n        res.status(500).json({ error: \"Falha ao redefinir senha\" });\n      }\n\n      console.log(\"=== END PASSWORD RESET ===\\n\");\n    } catch (error: any) {\n      console.error(\"Password reset error:\", error);\n      res.status(500).json({ error: error?.message || \"Erro desconhecido\" });\n    }\n  });\n\n  // Debug endpoint to set default password for all merchants\n  app.post(\"/api/debug/reset-all-merchant-passwords\", async (req, res) => {\n    try {\n      console.log(\"\\n=== RESETTING ALL MERCHANT PASSWORDS ===\");\n\n      const { newPassword } = req.body;\n      const defaultPassword = newPassword || \"123456\";\n\n      // Get all merchants\n      const merchants = await storage.getAllMerchants();\n      console.log(`Found ${merchants.length} merchants to reset`);\n\n      let successCount = 0;\n      let failedCount = 0;\n\n      for (const merchant of merchants) {\n        try {\n          const success = await storage.updateMerchantPassword(merchant.id, defaultPassword);\n          if (success) {\n            successCount++;\n            console.log(`✅ Reset password for: ${merchant.email}`);\n          } else {\n            failedCount++;\n            console.log(`❌ Failed to reset password for: ${merchant.email}`);\n          }\n        } catch (error) {\n          failedCount++;\n          console.log(`❌ Error resetting password for ${merchant.email}:`, error);\n        }\n      }\n\n      console.log(`=== RESET COMPLETE: ${successCount} success, ${failedCount} failed ===\\n`);\n\n      res.json({ \n        message: `Senhas redefinidas: ${successCount} sucessos, ${failedCount} falhas`,\n        defaultPassword: defaultPassword,\n        successCount,\n        failedCount\n      });\n    } catch (error: any) {\n      console.error(\"Bulk password reset error:\", error);\n      res.status(500).json({ error: error?.message || \"Erro desconhecido\" });\n    }\n  });\n\n  // Debug endpoint to fix service merchant assignment\n  app.post(\"/api/debug/fix-service-merchant\", async (req, res) => {\n    try {\n      console.log(\"\\n=== FIXING SERVICE MERCHANT ASSIGNMENT ===\");\n\n      // Get all merchants to identify dono1 and dono2\n      const merchants = await storage.getAllMerchants();\n      console.log(\"\\n🏪 ALL MERCHANTS:\");\n\n      let dono1Id: string | null = null;\n      let dono2Id: string | null = null;\n\n      merchants.forEach((m, index) => {\n        console.log(`  [${index}] ${m.name} (${m.email}) - ID: ${m.id}`);\n        if (m.email.includes('dono1') || m.name.toLowerCase().includes('dono1') || m.name.toLowerCase().includes('salao1')) {\n          dono1Id = m.id;\n          console.log(`  --> Found DONO1: ${m.id}`);\n        }\n        if (m.email.includes('dono2') || m.name.toLowerCase().includes('dono2') || m.name.toLowerCase().includes('salao2')) {\n          dono2Id = m.id;\n          console.log(`  --> Found DONO2: ${m.id}`);\n        }\n      });\n\n      if (!dono1Id || !dono2Id) {\n        console.log(`❌ Could not find both merchants. dono1Id: ${dono1Id}, dono2Id: ${dono2Id}`);\n        return res.status(400).json({ error: \"Não foi possível identificar dono1 e dono2\" });\n      }\n\n      console.log(`\\n🔧 FIXING: Moving service from dono2 (${dono2Id.substring(0, 8)}...) to dono1 (${dono1Id.substring(0, 8)}...)`);\n\n      // Get all services from dono2 that should belong to dono1\n      const dono2Services = await storage.getServicesByMerchant(dono2Id);\n      console.log(`\\n📋 Services currently assigned to dono2: ${dono2Services.length}`);\n\n      let fixedCount = 0;\n      for (const service of dono2Services) {\n        console.log(`  - \"${service.name}\" (ID: ${service.id.substring(0, 8)}...)`);\n\n        // Update the service to belong to dono1\n        const success = await storage.updateServiceMerchant(service.id, dono1Id);\n        if (success) {\n          fixedCount++;\n          console.log(`    ✅ Fixed: \"${service.name}\" now belongs to dono1`);\n        } else {\n          console.log(`    ❌ Failed to fix: \"${service.name}\"`);\n        }\n      }\n\n      console.log(`\\n🎯 RESULT: Fixed ${fixedCount} services`);\n      console.log(\"=== END FIX ===\\n\");\n\n      res.json({ \n        message: `Successfully fixed ${fixedCount} services`,\n        fixedCount,\n        dono1Id: dono1Id.substring(0, 8) + \"...\",\n        dono2Id: dono2Id.substring(0, 8) + \"...\"\n      });\n    } catch (error: any) {\n      console.error(\"Fix error:\", error);\n      res.status(500).json({ error: error?.message || \"Unknown error\" });\n    }\n  });\n\n  // Get penalties for merchant\n  app.get(\"/api/merchant/penalties\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const penalties = await storage.getPenaltiesByMerchant(req.user.userId);\n      res.json(penalties);\n    } catch (error) {\n      console.error(\"Error getting merchant penalties:\", error);\n      res.status(500).json({ message: \"Erro ao buscar multas\" });\n    }\n  });\n\n  // Get penalties for employee (same as merchant since employee belongs to merchant)\n  app.get(\"/api/employee/penalties\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      // Employee sees penalties from their merchant\n      const merchantId = req.user.merchantId;\n      const penalties = await storage.getPenaltiesByMerchant(merchantId);\n      res.json(penalties);\n    } catch (error) {\n      console.error(\"Error getting employee penalties:\", error);\n      res.status(500).json({ message: \"Erro ao buscar multas\" });\n    }\n  });\n\n  // Get penalties for client\n  app.get(\"/api/client/penalties\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"client\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const clientId = req.user.userId;\n      const merchantId = req.user.merchantId;\n\n      // Get all penalties from the merchant and filter by client\n      const allPenalties = await storage.getPenaltiesByMerchant(merchantId);\n      const clientPenalties = allPenalties.filter(penalty => \n        penalty.clientId === clientId || penalty.clientPhone === req.user.phone\n      );\n\n      // Only return pending penalties (paid and waived should not be shown to client)\n      const pendingPenalties = clientPenalties.filter(penalty => penalty.status === \"pending\");\n\n      res.json(pendingPenalties);\n    } catch (error) {\n      console.error(\"Error getting client penalties:\", error);\n      res.status(500).json({ message: \"Erro ao buscar multas\" });\n    }\n  });\n\n  // VIP Plan Management endpoints  \n  app.post(\"/api/merchant/upgrade-to-vip\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const merchant = await storage.getMerchant(merchantId);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      const now = new Date();\n      const planValidity = new Date(now.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days\n\n      const updates = {\n        planStatus: \"vip\",\n        planValidity: planValidity,\n        monthlyFee: 100, // R$ 1.00 in cents\n        paymentStatus: \"paid\" as const,\n      };\n\n      const updatedMerchant = await storage.updateMerchant(merchantId, updates);\n\n      if (!updatedMerchant) {\n        return res.status(500).json({ message: \"Erro ao ativar plano VIP\" });\n      }\n\n      res.json({\n        message: \"Plano VIP ativado com sucesso! Válido por 30 dias.\",\n        merchant: {\n          id: updatedMerchant.id,\n          planStatus: updatedMerchant.planStatus,\n          planValidity: updatedMerchant.planValidity,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error upgrading to VIP:\", error);\n      res.status(500).json({ message: \"Erro ao ativar plano VIP\" });\n    }\n  });\n\n  app.post(\"/api/merchant/renew-vip\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const merchantId = req.user.userId;\n      const merchant = await storage.getMerchant(merchantId);\n\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      const now = new Date();\n      let newValidity = new Date();\n\n      // If merchant still has valid plan, extend from current validity\n      if (merchant.planValidity && new Date(merchant.planValidity) > now) {\n        newValidity = new Date(merchant.planValidity);\n      } else {\n        newValidity = new Date(now);\n      }\n\n      newValidity.setDate(newValidity.getDate() + 30);\n\n      const updates = {\n        planStatus: \"vip\",\n        planValidity: newValidity,\n        paymentStatus: \"paid\" as const,\n      };\n\n      const updatedMerchant = await storage.updateMerchant(merchantId, updates);\n\n      if (!updatedMerchant) {\n        return res.status(500).json({ message: \"Erro ao renovar plano VIP\" });\n      }\n\n      const daysAdded = Math.ceil((newValidity.getTime() - (merchant.planValidity ? new Date(merchant.planValidity).getTime() : now.getTime())) / (1000 * 60 * 60 * 24));\n\n      res.json({\n        message: `Plano VIP renovado com sucesso! ${daysAdded} dias adicionados.`,\n        merchant: {\n          id: updatedMerchant.id,\n          planStatus: updatedMerchant.planStatus,\n          planValidity: updatedMerchant.planValidity,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error renewing VIP:\", error);\n      res.status(500).json({ message: \"Erro ao renovar plano VIP\" });\n    }\n  });\n\n  // Update penalty status (mark as paid/waived)\n  app.put(\"/api/penalties/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\" && req.user.role !== \"employee\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { status } = req.body;\n      if (![\"paid\", \"waived\"].includes(status)) {\n        return res.status(400).json({ message: \"Status inválido\" });\n      }\n\n      const penalty = await storage.updatePenaltyStatus(req.params.id, status, req.user.userId);\n      if (!penalty) {\n        return res.status(404).json({ message: \"Multa não encontrada\" });\n      }\n\n      res.json({ message: \"Status da multa atualizado\", penalty });\n    } catch (error) {\n      console.error(\"Error updating penalty status:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar status da multa\" });\n    }\n  });\n\n  // System Settings endpoints (Admin only)\n\n  // Get all system settings\n  app.get(\"/api/admin/system-settings\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const settings = await storage.getAllSystemSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error getting system settings:\", error);\n      res.status(500).json({ message: \"Erro ao buscar configurações do sistema\" });\n    }\n  });\n\n  // Get specific system setting\n  app.get(\"/api/admin/system-settings/:key\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const setting = await storage.getSystemSetting(req.params.key);\n      if (!setting) {\n        return res.status(404).json({ message: \"Configuração não encontrada\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Error getting system setting:\", error);\n      res.status(500).json({ message: \"Erro ao buscar configuração\" });\n    }\n  });\n\n  // Update system setting\n  app.put(\"/api/admin/system-settings/:key\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { value } = req.body;\n\n      if (value === undefined || value === null) {\n        return res.status(400).json({ message: \"Valor é obrigatório\" });\n      }\n\n      const setting = await storage.updateSystemSetting(req.params.key, String(value));\n      if (!setting) {\n        return res.status(404).json({ message: \"Configuração não encontrada\" });\n      }\n\n      res.json({ message: \"Configuração atualizada com sucesso\", setting });\n    } catch (error) {\n      console.error(\"Error updating system setting:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar configuração\" });\n    }\n  });\n\n  // Create new system setting\n  app.post(\"/api/admin/system-settings\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { key, value, description, type } = req.body;\n\n      if (!key || value === undefined || value === null) {\n        return res.status(400).json({ message: \"Chave e valor são obrigatórios\" });\n      }\n\n      const setting = await storage.createSystemSetting({\n        key,\n        value: String(value),\n        description,\n        type: type || 'string'\n      });\n\n      res.status(201).json({ message: \"Configuração criada com sucesso\", setting });\n    } catch (error) {\n      console.error(\"Error creating system setting:\", error);\n      res.status(500).json({ message: \"Erro ao criar configuração\" });\n    }\n  });\n\n  // Public endpoints for plan pricing (no authentication required)\n  app.get(\"/api/public/plan-pricing\", async (req, res) => {\n    try {\n      const vipPriceSetting = await storage.getSystemSetting('vip_plan_price');\n      const trialDurationSetting = await storage.getSystemSetting('trial_plan_duration');\n      const vipDurationSetting = await storage.getSystemSetting('vip_plan_duration');\n\n      const pricing = {\n        vipPrice: vipPriceSetting ? (parseInt(vipPriceSetting.value) / 100).toFixed(2) : \"50.00\",\n        trialDuration: trialDurationSetting ? parseInt(trialDurationSetting.value) : 10,\n        vipDuration: vipDurationSetting ? parseInt(vipDurationSetting.value) : 30\n      };\n\n      res.json(pricing);\n    } catch (error) {\n      console.error(\"Error getting plan pricing:\", error);\n      res.status(500).json({ message: \"Erro ao buscar informações de preços\" });\n    }\n  });\n\n  // Merchant Access Management Routes (Admin Only)\n\n  // Grant access to merchant\n  app.post(\"/api/admin/merchants/:id/grant-access\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { durationDays, monthlyFee } = req.body;\n\n      if (!durationDays || durationDays < 1) {\n        return res.status(400).json({ message: \"Duração deve ser pelo menos 1 dia\" });\n      }\n\n      const merchant = await storage.grantMerchantAccess(req.params.id, durationDays, monthlyFee);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json({ message: \"Acesso concedido com sucesso\", merchant: toPublicMerchant(merchant) });\n    } catch (error) {\n      console.error(\"Error granting merchant access:\", error);\n      res.status(500).json({ message: \"Erro ao conceder acesso\" });\n    }\n  });\n\n  // Suspend merchant access\n  app.post(\"/api/admin/merchants/:id/suspend-access\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const merchant = await storage.suspendMerchantAccess(req.params.id);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json({ message: \"Acesso suspenso com sucesso\", merchant: toPublicMerchant(merchant) });\n    } catch (error) {\n      console.error(\"Error suspending merchant access:\", error);\n      res.status(500).json({ message: \"Erro ao suspender acesso\" });\n    }\n  });\n\n  // Renew merchant access\n  app.post(\"/api/admin/merchants/:id/renew-access\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const merchant = await storage.renewMerchantAccess(req.params.id);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json({ message: \"Acesso renovado com sucesso\", merchant: toPublicMerchant(merchant) });\n    } catch (error) {\n      console.error(\"Error renewing merchant access:\", error);\n      res.status(500).json({ message: \"Erro ao renovar acesso\" });\n    }\n  });\n\n  // Update merchant access settings\n  app.put(\"/api/admin/merchants/:id/access-settings\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { accessDurationDays, monthlyFee, paymentStatus } = req.body;\n\n      const updates: any = {};\n      if (accessDurationDays !== undefined) updates.accessDurationDays = accessDurationDays;\n      if (monthlyFee !== undefined) updates.monthlyFee = monthlyFee;\n      if (paymentStatus !== undefined) updates.paymentStatus = paymentStatus;\n\n      const merchant = await storage.updateMerchantAccessSettings(req.params.id, updates);\n      if (!merchant) {\n        return res.status(404).json({ message: \"Comerciante não encontrado\" });\n      }\n\n      res.json({ message: \"Configurações de acesso atualizadas\", merchant: toPublicMerchant(merchant) });\n    } catch (error) {\n      console.error(\"Error updating merchant access settings:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar configurações de acesso\" });\n    }\n  });\n\n  // Get merchants with expired access\n  app.get(\"/api/admin/merchants/expired-access\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const expiredMerchants = await storage.getMerchantsWithExpiredAccess();\n      res.json(expiredMerchants.map(toPublicMerchant));\n    } catch (error) {\n      console.error(\"Error getting expired merchants:\", error);\n      res.status(500).json({ message: \"Erro ao buscar comerciantes com acesso expirado\" });\n    }\n  });\n\n  // Auto-suspend merchants with expired access (can be called periodically)\n  app.post(\"/api/admin/merchants/process-expired-access\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const processedCount = await storage.processExpiredAccess();\n\n      res.json({ \n        message: `${processedCount} comerciantes com acesso expirado foram marcados como expirados`,\n        processedCount \n      });\n    } catch (error) {\n      console.error(\"Error processing expired merchants:\", error);\n      res.status(500).json({ message: \"Erro ao processar comerciantes com acesso expirado\" });\n    }\n  });\n\n  // PIX Payment Routes for VIP renewal\n  app.post(\"/api/pix/create-payment\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { description, amount } = req.body;\n      const merchantEmail = req.user.email;\n\n      if (!description || !amount) {\n        return res.status(400).json({ message: \"Descrição e valor são obrigatórios\" });\n      }\n\n      // Create payment body for PIX\n      const paymentData = {\n        transaction_amount: amount / 100, // Convert from cents to reais\n        description: `Beauty Scheduler - Renovação Plano VIP - Sistema Agendamento Salão`,\n        payment_method_id: \"pix\",\n        payer: {\n          email: merchantEmail,\n        },\n        external_reference: `vip_renewal_${merchantEmail}_${Date.now()}`,\n        notification_url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/api/payment/webhook`,\n        metadata: {\n          merchant_email: merchantEmail,\n          plan_type: \"vip_renewal\",\n          business_type: \"beauty_salon\",\n          service_description: \"Renovação sistema de agendamento para salão de beleza\"\n        }\n      };\n\n      const result = await payment.create({ body: paymentData });\n\n      if (result.point_of_interaction?.transaction_data?.qr_code) {\n        res.json({\n          success: true,\n          id: result.id,\n          payment_id: result.id,\n          qr_code: result.point_of_interaction.transaction_data.qr_code,\n          qr_code_base64: result.point_of_interaction.transaction_data.qr_code_base64,\n          external_reference: result.external_reference,\n          expires_at: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes\n        });\n      } else {\n        throw new Error(\"Failed to generate PIX QR code\");\n      }\n    } catch (error) {\n      console.error(\"Error creating PIX payment:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Erro ao criar pagamento PIX\",\n        error: error.message \n      });\n    }\n  });\n\n  // Check PIX payment status\n  app.get(\"/api/pix/payment-status/:paymentId\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== \"merchant\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { paymentId } = req.params;\n      const result = await payment.get({ id: paymentId });\n\n      // If payment is approved, update merchant VIP status\n      if (result.status === \"approved\") {\n        const merchantId = req.user.userId;\n        const merchant = await storage.getMerchant(merchantId);\n\n        if (merchant) {\n          const now = new Date();\n          let newValidity;\n\n          if (merchant.planValidity && new Date(merchant.planValidity) > now) {\n            newValidity = new Date(merchant.planValidity);\n            newValidity.setDate(newValidity.getDate() + 30);\n          } else {\n            newValidity = new Date(now);\n            newValidity.setDate(now.getDate() + 30);\n          }\n\n          await storage.updateMerchant(merchantId, {\n            planStatus: \"vip\",\n            planValidity: newValidity,\n            paymentStatus: \"paid\",\n            status: \"active\"\n          });\n        }\n      }\n\n      res.json({\n        id: result.id,\n        status: result.status === \"approved\" ? \"paid\" : result.status,\n        status_detail: result.status_detail,\n        external_reference: result.external_reference,\n        transaction_amount: result.transaction_amount,\n        date_approved: result.date_approved,\n      });\n    } catch (error) {\n      console.error(\"Error checking PIX payment status:\", error);\n      res.status(500).json({ \n        message: \"Erro ao verificar status do pagamento\",\n        error: error.message \n      });\n    }\n  });\n\n  // Mercado Pago Payment Routes\n\n  // Create PIX payment for VIP plan\n  app.post(\"/api/payment/create-pix\", async (req, res) => {\n    try {\n      const { merchantEmail, amount } = req.body;\n\n      if (!merchantEmail || !amount) {\n        return res.status(400).json({ message: \"Email e valor são obrigatórios\" });\n      }\n\n      // Create payment body for PIX\n      const paymentData = {\n        transaction_amount: parseFloat(amount),\n        description: `Beauty Scheduler - Plano VIP Salão de Beleza - 30 dias`,\n        payment_method_id: \"pix\",\n        payer: {\n          email: merchantEmail,\n        },\n        external_reference: `vip_plan_${merchantEmail}_${Date.now()}`,\n        notification_url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/api/payment/webhook`,\n        metadata: {\n          merchant_email: merchantEmail,\n          plan_type: \"vip\",\n          business_type: \"beauty_salon\",\n          service_description: \"Sistema de agendamento para salão de beleza\"\n        }\n      };\n\n      const result = await payment.create({ body: paymentData });\n\n      if (result.point_of_interaction?.transaction_data?.qr_code) {\n        res.json({\n          success: true,\n          payment_id: result.id,\n          qr_code: result.point_of_interaction.transaction_data.qr_code,\n          qr_code_base64: result.point_of_interaction.transaction_data.qr_code_base64,\n          external_reference: result.external_reference,\n          expires_at: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes\n        });\n      } else {\n        throw new Error(\"Failed to generate PIX QR code\");\n      }\n    } catch (error) {\n      console.error(\"Error creating PIX payment:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Erro ao criar pagamento PIX\",\n        error: error.message \n      });\n    }\n  });\n\n  // Webhook to receive payment notifications\n  app.post(\"/api/payment/webhook\", async (req, res) => {\n    try {\n      console.log(\"=== Mercado Pago Webhook ===\");\n      console.log(\"Headers:\", req.headers);\n      console.log(\"Body:\", req.body);\n\n      // Basic webhook validation - check if required fields are present\n      const { type, data, action } = req.body;\n      if (!data?.id) {\n        console.log(\"Invalid webhook data - missing payment ID\");\n        return res.status(400).send(\"Invalid data\");\n      }\n\n      // TODO: Add proper webhook signature validation here when moving to production\n      // For development, we skip signature validation but log the headers\n      const xSignature = req.headers['x-signature'];\n      const xRequestId = req.headers['x-request-id'];\n      console.log(\"Webhook signature info:\", { xSignature, xRequestId });\n\n      // Respond quickly to acknowledge receipt\n      res.status(200).send(\"OK\");\n\n      // Process payment notification asynchronously\n      if (type === \"payment\" && data?.id) {\n        setTimeout(async () => {\n          try {\n            const mpPayment = await payment.get({ id: data.id });\n            console.log(\"Payment status:\", mpPayment.status);\n\n            // If payment is approved, activate VIP for merchant (both new signups and renewals)\n            if (mpPayment.status === \"approved\" && (mpPayment.external_reference?.includes(\"vip_plan_\") || mpPayment.external_reference?.includes(\"vip_renewal_\"))) {\n              const isRenewal = mpPayment.external_reference.includes(\"vip_renewal_\");\n              const merchantEmail = mpPayment.external_reference.split('_')[isRenewal ? 2 : 2]; // Extract email from external_reference\n              console.log(`Payment approved for merchant: ${merchantEmail} (${isRenewal ? 'renewal' : 'signup'})`);\n\n              // Find merchant and update VIP status\n              let merchant = await storage.getMerchantByEmail(merchantEmail);\n              let attempts = 0;\n              const maxAttempts = 3;\n\n              while (!merchant && attempts < maxAttempts) {\n                attempts++;\n                console.log(`Merchant not found, attempt ${attempts}/${maxAttempts}, waiting 2 seconds...`);\n                await new Promise(resolve => setTimeout(resolve, 2000));\n                merchant = await storage.getMerchantByEmail(merchantEmail);\n              }\n\n              if (merchant) {\n                const now = new Date();\n                let vipEndDate;\n\n                if (isRenewal) {\n                  // For renewals, extend from current end date if still valid, otherwise from now\n                  if (merchant.planValidity && new Date(merchant.planValidity) > now) {\n                    vipEndDate = new Date(merchant.planValidity);\n                    vipEndDate.setDate(vipEndDate.getDate() + 30);\n                  } else {\n                    vipEndDate = new Date(now);\n                    vipEndDate.setDate(now.getDate() + 30);\n                  }\n                } else {\n                  // For new signups, always start from now\n                  vipEndDate = new Date(now);\n                  vipEndDate.setDate(now.getDate() + 30);\n                }\n\n                await storage.updateMerchant(merchant.id, {\n                  planStatus: \"vip\",\n                  planValidity: vipEndDate,\n                  paymentStatus: \"paid\",\n                  status: \"active\"\n                });\n\n                console.log(`VIP access ${isRenewal ? 'renewed' : 'granted'} to merchant ${merchantEmail} for 30 days`);\n              } else {\n                console.error(`Merchant ${merchantEmail} not found after ${maxAttempts} attempts`);\n              }\n            }\n          } catch (error) {\n            console.error(\"Error processing payment webhook:\", error);\n          }\n        }, 1000);\n      }\n    } catch (error) {\n      console.error(\"Webhook error:\", error);\n      res.status(500).send(\"Error\");\n    }\n  });\n\n  // Check payment status\n  app.get(\"/api/payment/status/:paymentId\", async (req, res) => {\n    try {\n      const { paymentId } = req.params;\n      const result = await payment.get({ id: paymentId });\n\n      res.json({\n        payment_id: result.id,\n        status: result.status,\n        status_detail: result.status_detail,\n        external_reference: result.external_reference,\n        transaction_amount: result.transaction_amount,\n        date_approved: result.date_approved,\n      });\n    } catch (error) {\n      console.error(\"Error checking payment status:\", error);\n      res.status(500).json({ \n        message: \"Erro ao verificar status do pagamento\",\n        error: error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":163781},"server/sqlite-storage.ts":{"content":"import { type User, type InsertUser, type Merchant, type InsertMerchant, type Service, type InsertService, type Employee, type InsertEmployee, type Client, type InsertClient, type Appointment, type InsertAppointment, type AvailabilityData, type AppointmentStatusData, promotions, type EmployeeDayOff, type InsertEmployeeDayOff, type Promotion, type InsertPromotion, type SystemSetting, users, merchants, \n  services, \n  employees, \n  clients, \n  appointments, \n  employeeDaysOff, \n  systemSettings } from \"../shared/schema\";\n\nimport { db, initializeDatabase } from \"./db\";import { eq, count, gte, and, sql, lte, desc, asc, inArray, or } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport type { IStorage } from \"./storage\";import { format, subDays } from 'date-fns';\n\n\nexport class PostgreSQLStorage implements IStorage {\n  private initialized = false;\n\n  // Using db instance from ./db for all operations\n  private db = db;\n\n\n  constructor() {\n    // Don't call initialize in constructor\n  }\n\n  async initialize(): Promise<void> {\n    if (!this.initialized) {\n      await initializeDatabase();\n      // Check if database exists and has tables\n      const tables = await this.db.select({ tableName: sql<string>`tablename` })\n        .from(sql`pg_catalog.pg_tables`)\n        .where(sql`schemaname != \\'pg_catalog\\' AND schemaname != \\'information_schema\\'`)\n        .execute();\n\n      if (tables.length === 0) {\n        console.log(\"Creating database tables...\");\n        // The tables are already created by the schema definitions,\n        // drizzle-kit will handle migrations.\n      }\n\n      // Ensure all required columns exist\n      // This is typically handled by migrations. If not using migrations, manual checks would be needed.\n\n      // Update existing employees to work all days including Sunday\n      // This comment suggests a past manual update or a future task.\n      // No specific code change needed here based on the comment alone.\n\n\n      this.initialized = true;\n      console.log(\"Database initialized successfully.\");\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    if (!this.initialized) await this.initialize();\n    const user = (await this.db.select().from(users).where(eq(users.id, id)).execute())[0];\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    if (!this.initialized) await this.initialize();\n    const user = (await this.db.select().from(users).where(eq(users.email, email)).execute())[0];\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    if (!this.initialized) await this.initialize();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      password: hashedPassword,\n      role: insertUser.role || \"merchant\",\n      createdAt: new Date(),\n      updatedAt: new Date()// Ensure updatedAt is set\n    };\n\n    await this.db.insert(users).values(user).execute();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    if (!this.initialized) await this.initialize();\n    await this.db.update(users).set({ ...updates, updatedAt: new Date() }).where(eq(users.id, id)).execute();\n    return this.getUser(id);\n  }\n\n  async updateUserPassword(id: string, newPassword: string): Promise<boolean> {\n    try {\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      await this.db.update(users).set({ password: hashedPassword, updatedAt: new Date() }).where(eq(users.id, id)).execute();\n      return true;\n    } catch (error) {\n      console.error(\"Error updating user password:\", error);\n      return false;\n    }\n  }\n\n  // Merchant methods\n  async getMerchant(id: string): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n    const merchant = (await this.db.select().from(merchants).where(eq(merchants.id, id)).execute())[0];\n    return merchant || undefined;\n  }\n\n  async getMerchantByEmail(email: string): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n    const merchant = (await this.db.select().from(merchants).where(eq(merchants.email, email)).execute())[0];\n    return merchant || undefined;\n  }\n\n  async getAllMerchants(): Promise<Merchant[]> {\n    if (!this.initialized) await this.initialize();\n    const allMerchants = await this.db.select().from(merchants).execute();\n    return allMerchants.sort((a, b) =>\n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async createMerchant(insertMerchant: InsertMerchant): Promise<Merchant> {\n    if (!this.initialized) await this.initialize();\n    const hashedPassword = await bcrypt.hash(insertMerchant.password, 10);\n    const id = randomUUID();\n    const now = new Date();\n    const merchant: Merchant = {\n      ...insertMerchant,\n      id,\n      password: hashedPassword,\n      status: insertMerchant.status || \"pending\",\n      planStatus: insertMerchant.planStatus || \"free\", // Default plan status\n      planValidity: insertMerchant.planValidity || null, // Default plan validity\n      createdAt: now,\n      updatedAt: now,\n      workDays: insertMerchant.workDays || \"[0,1,2,3,4,5,6]\", // Default to all days\n      startTime: insertMerchant.startTime || \"09:00\", // Default start time\n      endTime: insertMerchant.endTime || \"18:00\" // Default end time\n    };\n\n    await this.db.insert(merchants).values(merchant).execute();\n    return merchant;\n  }\n\n  async updateMerchant(id: string, updates: Partial<InsertMerchant>): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingMerchant = await this.getMerchant(id);\n    if (!existingMerchant) return undefined;\n\n    // Hash password if it's being updated\n    const processedUpdates = { ...updates };\n    if (processedUpdates.password) {\n      processedUpdates.password = await bcrypt.hash(processedUpdates.password, 10);\n    }\n\n    const updatedMerchant: Merchant = {\n      ...existingMerchant,\n      ...processedUpdates,\n      planStatus: processedUpdates.planStatus || existingMerchant.planStatus,\n      planValidity: processedUpdates.planValidity || existingMerchant.planValidity,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(merchants).set(updatedMerchant).where(eq(merchants.id, id)).execute();\n\n    // If working hours are being updated, sync employee hours\n    if (updates.startTime || updates.endTime || updates.workDays) {\n      await this.syncEmployeeHoursWithMerchant(id, updatedMerchant);\n    }\n\n    return updatedMerchant;\n  }\n\n  async updateMerchantPassword(id: string, newPassword: string): Promise<boolean> {\n    try {\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      await this.db.update(merchants).set({ password: hashedPassword, updatedAt: new Date() }).where(eq(merchants.id, id)).execute();\n      return true;\n    } catch (error) {\n      console.error(\"Error updating merchant password:\", error);\n      return false;\n    }\n  }\n\n  private async syncEmployeeHoursWithMerchant(merchantId: string, merchant: Merchant): Promise<void> {\n    try {\n      const employees = await this.getEmployeesByMerchant(merchantId);\n\n      for (const employee of employees) {\n        const updates: Partial<InsertEmployee> = {};\n\n        if (merchant.startTime && merchant.startTime !== employee.startTime) {\n          updates.startTime = merchant.startTime;\n        }\n\n        if (merchant.endTime && merchant.endTime !== employee.endTime) {\n          updates.endTime = merchant.endTime;\n        }\n\n        if (merchant.workDays && merchant.workDays !== employee.workDays) {\n          updates.workDays = merchant.workDays;\n        }\n\n        if (Object.keys(updates).length > 0) {\n          await this.updateEmployee(employee.id, updates);\n          console.log(`Synced employee ${employee.name} hours with merchant hours:`, updates);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error syncing employee hours with merchant:\", error);\n    }\n  }\n\n  async deleteMerchant(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(merchants).where(eq(merchants.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  async getMerchantsByStatus(status: string): Promise<Merchant[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select().from(merchants).where(eq(merchants.status, status)).execute();\n  }\n\n  async getMerchantsStats(): Promise<{\n    total: number;\n    active: number;\n    pending: number;\n    inactive: number;\n    thisMonth: number;\n  }> {\n    if (!this.initialized) await this.initialize();\n    const allMerchants = await this.db.select().from(merchants).execute();\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n    return {\n      total: allMerchants.length,\n      active: allMerchants.filter(m => m.status === \"active\").length,\n      pending: allMerchants.filter(m => m.status === \"pending\").length,\n      inactive: allMerchants.filter(m => m.status === \"inactive\").length,\n      thisMonth: allMerchants.filter(m => new Date(m.createdAt!).getTime() >= thisMonth.getTime()).length,\n    };\n  }\n\n  // Service methods\n  async getService(id: string): Promise<Service | undefined> {\n    if (!this.initialized) await this.initialize();\n    const service = (await this.db.select().from(services).where(eq(services.id, id)).execute())[0];\n    return service || undefined;\n  }\n\n  async getServicesByMerchant(merchantId: string): Promise<Service[]> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`\\n=== PostgreSQLStorage.getServicesByMerchant DEBUG ===`);\n    console.log(`🔍 Input merchantId: \"${merchantId}\" (type: ${typeof merchantId})`);\n\n    const merchant = await this.getMerchant(merchantId);\n    console.log(`🏪 Merchant info: ${merchant ? `\"${merchant.name}\" (${merchant.email})` : 'NOT FOUND'}`);\n\n    const allServices = await this.db.select().from(services).execute();\n    console.log(`\\n📊 DATABASE STATE - Total services: ${allServices.length}`);\n    allServices.forEach((service, index) => {\n      const belongsToRequested = service.merchantId === merchantId;\n      const merchantInfo = belongsToRequested ? \"✅ MINE\" : \"❌ OTHER\";\n      console.log(`  [${index}] \"${service.name}\" (ID: ${service.id.substring(0, 8)}...) -> merchantId: \"${service.merchantId.substring(0, 8)}...\" ${merchantInfo}`);\n    });\n\n    console.log(`\\n🔎 Executing query: SELECT * FROM services WHERE merchantId = \"${merchantId}\"`);\n    const result = await this.db.select().from(services).where(eq(services.merchantId, merchantId)).execute();\n\n    console.log(`\\n📋 QUERY RESULT - Returned ${result.length} services:`);\n    result.forEach((service, index) => {\n      console.log(`  [${index}] \"${service.name}\" (ID: ${service.id.substring(0, 8)}...) merchantId: \"${service.merchantId.substring(0, 8)}...\"`);\n    });\n\n    const invalidServices = result.filter(service => service.merchantId !== merchantId);\n    const validServices = result.filter(service => service.merchantId === merchantId);\n\n    console.log(`\\n🛡️  SECURITY CHECK:`);\n    console.log(`✅ Valid services (belong to ${merchantId.substring(0, 8)}...): ${validServices.length}`);\n    console.log(`❌ Invalid services (belong to other merchants): ${invalidServices.length}`);\n\n    if (invalidServices.length > 0) {\n      console.error(`\\n🚨🚨🚨 CRITICAL SECURITY BREACH DETECTED! 🚨🚨🚨`);\n      console.error(`❌ Found ${invalidServices.length} services that don't belong to merchant ${merchantId}:`);\n      invalidServices.forEach(service => {\n        console.error(`  - LEAKED: \"${service.name}\" (ID: ${service.id}) belongs to merchant: \"${service.merchantId}\"`);\n      });\n      console.error(`🚨 RETURNING ONLY VALID SERVICES AS EMERGENCY SECURITY MEASURE 🚨`);\n      console.log(`=== END PostgreSQLStorage DEBUG (SECURITY BREACH PREVENTED) ===\\n`);\n      return validServices;\n    }\n\n    console.log(`\\n✅ SECURITY VERIFICATION PASSED`);\n    console.log(`🎯 All ${result.length} services verified to belong to merchant ${merchantId.substring(0, 8)}...`);\n    console.log(`=== END PostgreSQLStorage DEBUG (SUCCESS) ===\\n`);\n    return result;\n  }\n\n  async getActiveServicesByMerchant(merchantId: string): Promise<Service[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select().from(services)\n      .where(and(\n        eq(services.merchantId, merchantId),\n        eq(services.isActive, true)\n      ))\n      .execute();\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    if (!this.initialized) await this.initialize();\n    const id = randomUUID();\n    const now = new Date();\n    const service: Service = {\n      ...insertService,\n      id,\n      description: insertService.description || null,\n      isActive: insertService.isActive ?? true,\n      createdAt: now,\n      updatedAt: now,\n      duration: insertService.duration || 60, // Default duration to 60 minutes\n      price: insertService.price || 0, // Default price to 0\n    };\n\n    await this.db.insert(services).values(service).execute();\n    return service;\n  }\n\n  async updateService(id: string, updates: Partial<InsertService>): Promise<Service | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingService = await this.getService(id);\n    if (!existingService) return undefined;\n\n    const updatedService: Service = {\n      ...existingService,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(services).set(updatedService).where(eq(services.id, id)).execute();\n    return updatedService;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(services).where(eq(services.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  async updateServiceMerchant(serviceId: string, newMerchantId: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`🔧 Updating service ${serviceId.substring(0, 8)}... to merchant ${newMerchantId.substring(0, 8)}...`);\n\n    const result = await this.db.update(services)\n      .set({\n        merchantId: newMerchantId,\n        updatedAt: new Date()\n      })\n      .where(eq(services.id, serviceId))\n      .execute();\n\n    console.log(`✅ Update result: ${result.rowCount} rows affected`);\n    return result.rowCount > 0;\n  }\n\n  // Employee methods\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    if (!this.initialized) await this.initialize();\n    const employee = (await this.db.select().from(employees).where(eq(employees.id, id)).execute())[0];\n    return employee || undefined;\n  }\n\n  async getEmployeeByEmail(email: string): Promise<Employee | undefined> {\n    if (!this.initialized) await this.initialize();\n    const employee = (await this.db.select().from(employees).where(eq(employees.email, email)).execute())[0];\n    return employee || undefined;\n  }\n\n  async getEmployeesByMerchant(merchantId: string): Promise<Employee[]> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`\\n=== PostgreSQLStorage.getEmployeesByMerchant DEBUG ===`);\n    console.log(`🔍 Input merchantId: \"${merchantId}\" (type: ${typeof merchantId})`);\n\n    const merchant = await this.getMerchant(merchantId);\n    console.log(`🏪 Merchant info: ${merchant ? `\"${merchant.name}\" (${merchant.email})` : 'NOT FOUND'}`);\n\n    const allEmployees = await this.db.select().from(employees).execute();\n    console.log(`\\n📊 DATABASE STATE - Total employees: ${allEmployees.length}`);\n    allEmployees.forEach((employee, index) => {\n      const belongsToRequested = employee.merchantId === merchantId;\n      const status = belongsToRequested ? \"✅ MINE\" : \"❌ OTHER\";\n      console.log(`  [${index}] \"${employee.name}\" (ID: ${employee.id.substring(0, 8)}...) -> merchantId: \"${employee.merchantId.substring(0, 8)}...\" ${status}`);\n    });\n\n    console.log(`\\n🔎 Executing query: SELECT * FROM employees WHERE merchantId = \"${merchantId}\"`);\n    const result = await this.db.select().from(employees).where(eq(employees.merchantId, merchantId)).execute();\n\n    console.log(`\\n📋 QUERY RESULT - Returned ${result.length} employees:`);\n    result.forEach((employee, index) => {\n      console.log(`  [${index}] \"${employee.name}\" (ID: ${employee.id.substring(0, 8)}...) merchantId: \"${employee.merchantId.substring(0, 8)}...\"`);\n    });\n\n    const invalidEmployees = result.filter(employee => employee.merchantId !== merchantId);\n    const validEmployees = result.filter(employee => employee.merchantId === merchantId);\n\n    console.log(`\\n🛡️  SECURITY CHECK:`);\n    console.log(`✅ Valid employees (belong to ${merchantId.substring(0, 8)}...): ${validEmployees.length}`);\n    console.log(`❌ Invalid employees (belong to other merchants): ${invalidEmployees.length}`);\n\n    if (invalidEmployees.length > 0) {\n      console.error(`\\n🚨🚨🚨 CRITICAL SECURITY BREACH DETECTED! 🚨🚨🚨`);\n      console.error(`❌ Found ${invalidEmployees.length} employees that don't belong to merchant ${merchantId}:`);\n      invalidEmployees.forEach(employee => {\n        console.error(`  - LEAKED: \"${employee.name}\" (ID: ${employee.id}) belongs to merchant: \"${employee.merchantId}\"`);\n      });\n      console.error(`🚨 RETURNING ONLY VALID EMPLOYEES AS EMERGENCY SECURITY MEASURE 🚨`);\n      console.log(`=== END PostgreSQLStorage DEBUG (SECURITY BREACH PREVENTED) ===\\n`);\n      return validEmployees;\n    }\n\n    console.log(`\\n✅ SECURITY VERIFICATION PASSED`);\n    console.log(`🎯 All ${result.length} employees verified to belong to merchant ${merchantId.substring(0, 8)}...`);\n    console.log(`=== END PostgreSQLStorage DEBUG (SUCCESS) ===\\n`);\n    return result;\n  }\n\n  async getActiveEmployeesByMerchant(merchantId: string): Promise<Employee[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select().from(employees)\n      .where(and(\n        eq(employees.merchantId, merchantId),\n        eq(employees.isActive, true)\n      ))\n      .execute();\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    if (!this.initialized) await this.initialize();\n    const hashedPassword = await bcrypt.hash(insertEmployee.password, 10);\n    const id = randomUUID();\n    const now = new Date();\n    const employee: Employee = {\n      ...insertEmployee,\n      id,\n      password: hashedPassword,\n      role: insertEmployee.role || \"employee\",\n      specialties: insertEmployee.specialties || null,\n      workDays: insertEmployee.workDays || \"[0,1,2,3,4,5,6]\",\n      startTime: insertEmployee.startTime || \"09:00\",\n      endTime: insertEmployee.endTime || \"18:00\",\n      breakStartTime: insertEmployee.breakStartTime || null,\n      breakEndTime: insertEmployee.breakEndTime || null,\n      isActive: insertEmployee.isActive ?? true,\n      paymentType: insertEmployee.paymentType || \"monthly\",\n      paymentValue: insertEmployee.paymentValue || 0,\n      createdAt: now,\n      updatedAt: now,\n      overtimeHours: 0, // Initialize overtime hours to 0\n      lastOvertimeDate: null, // Initialize lastOvertimeDate to null\n    };\n\n    await this.db.insert(employees).values(employee).execute();\n    return employee;\n  }\n\n  async updateEmployee(id: string, updates: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingEmployee = await this.getEmployee(id);\n    if (!existingEmployee) return undefined;\n\n    const processedUpdates = { ...updates };\n    if (processedUpdates.password) {\n      processedUpdates.password = await bcrypt.hash(processedUpdates.password, 10);\n    }\n\n    const updatedEmployee: Employee = {\n      ...existingEmployee,\n      ...processedUpdates,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(employees).set(updatedEmployee).where(eq(employees.id, id)).execute();\n    return updatedEmployee;\n  }\n\n  async updateEmployeePassword(id: string, newPassword: string): Promise<boolean> {\n    try {\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      await this.db.update(employees).set({ password: hashedPassword, updatedAt: new Date() }).where(eq(employees.id, id)).execute();\n      return true;\n    } catch (error) {\n      console.error(\"Error updating employee password:\", error);\n      return false;\n    }\n  }\n\n  async deleteEmployee(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(employees).where(eq(employees.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  // Client methods\n  async getClient(id: string): Promise<Client | undefined> {\n    if (!this.initialized) await this.initialize();\n    const client = (await this.db.select().from(clients).where(eq(clients.id, id)).execute())[0];\n    return client || undefined;\n  }\n\n  async getClientByEmail(email: string): Promise<Client | undefined> {\n    if (!this.initialized) await this.initialize();\n    const client = (await this.db.select().from(clients).where(eq(clients.email, email)).execute())[0];\n    return client || undefined;\n  }\n\n  async getClientsByMerchant(merchantId: string): Promise<Client[]> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`\\n=== PostgreSQLStorage.getClientsByMerchant DEBUG ===`);\n    console.log(`🔍 Input merchantId: \"${merchantId}\" (type: ${typeof merchantId})`);\n\n    const merchant = await this.getMerchant(merchantId);\n    console.log(`🏪 Merchant info: ${merchant ? `\"${merchant.name}\" (${merchant.email})` : 'NOT FOUND'}`);\n\n    const allClients = await this.db.select().from(clients).execute();\n    console.log(`\\n📊 DATABASE STATE - Total clients: ${allClients.length}`);\n    allClients.forEach((client, index) => {\n      const belongsToRequested = client.merchantId === merchantId;\n      const status = belongsToRequested ? \"✅ MINE\" : \"❌ OTHER\";\n      console.log(`  [${index}] \"${client.name}\" (ID: ${client.id.substring(0, 8)}...) -> merchantId: \"${client.merchantId.substring(0, 8)}...\" ${status}`);\n    });\n\n    console.log(`\\n🔎 Executing query: SELECT * FROM clients WHERE merchantId = \"${merchantId}\"`);\n    const result = await this.db.select().from(clients).where(eq(clients.merchantId, merchantId)).execute();\n\n    console.log(`\\n📋 QUERY RESULT - Returned ${result.length} clients:`);\n    result.forEach((client, index) => {\n      console.log(`  [${index}] \"${client.name}\" (ID: ${client.id.substring(0, 8)}...) merchantId: \"${client.merchantId.substring(0, 8)}...\"`);\n    });\n\n    const invalidClients = result.filter(client => client.merchantId !== merchantId);\n    const validClients = result.filter(client => client.merchantId === merchantId);\n\n    console.log(`\\n🛡️  SECURITY CHECK:`);\n    console.log(`✅ Valid clients (belong to ${merchantId.substring(0, 8)}...): ${validClients.length}`);\n    console.log(`❌ Invalid clients (belong to other merchants): ${invalidClients.length}`);\n\n    if (invalidClients.length > 0) {\n      console.error(`\\n🚨🚨🚨 CRITICAL SECURITY BREACH DETECTED! 🚨🚨🚨`);\n      console.error(`❌ Found ${invalidClients.length} clients that don't belong to merchant ${merchantId}:`);\n      invalidClients.forEach(client => {\n        console.error(`  - LEAKED: \"${client.name}\" (ID: ${client.id}) belongs to merchant: \"${client.merchantId}\"`);\n      });\n      console.error(`🚨 RETURNING ONLY VALID CLIENTS AS EMERGENCY SECURITY MEASURE 🚨`);\n      console.log(`=== END PostgreSQLStorage DEBUG (SECURITY BREACH PREVENTED) ===\\n`);\n      return validClients;\n    }\n\n    console.log(`\\n✅ SECURITY VERIFICATION PASSED`);\n    console.log(`🎯 All ${result.length} clients verified to belong to merchant ${merchantId.substring(0, 8)}...`);\n    console.log(`=== END PostgreSQLStorage DEBUG (SUCCESS) ===\\n`);\n    return result;\n  }\n\n  async getActiveClientsByMerchant(merchantId: string): Promise<Client[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select().from(clients)\n      .where(and(\n        eq(clients.merchantId, merchantId),\n        eq(clients.isActive, true)\n      ))\n      .execute();\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    if (!this.initialized) await this.initialize();\n    const hashedPassword = await bcrypt.hash(insertClient.password, 10);\n    const id = randomUUID();\n    const now = new Date();\n    const client: Client = {\n      ...insertClient,\n      id,\n      password: hashedPassword,\n      notes: insertClient.notes || null,\n      isActive: insertClient.isActive ?? true,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    await this.db.insert(clients).values(client).execute();\n    return client;\n  }\n\n  async updateClient(id: string, updates: Partial<InsertClient>): Promise<Client | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingClient = await this.getClient(id);\n    if (!existingClient) return undefined;\n\n    const processedUpdates = { ...updates };\n    if (processedUpdates.password) {\n      processedUpdates.password = await bcrypt.hash(processedUpdates.password, 10);\n    }\n\n    const updatedClient: Client = {\n      ...existingClient,\n      ...processedUpdates,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(clients).set(updatedClient).where(eq(clients.id, id)).execute();\n    return updatedClient;\n  }\n\n  async updateClientPassword(id: string, newPassword: string): Promise<boolean> {\n    try {\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      await this.db.update(clients).set({ password: hashedPassword, updatedAt: new Date() }).where(eq(clients.id, id)).execute();\n      return true;\n    } catch (error) {\n      console.error(\"Error updating client password:\", error);\n      return false;\n    }\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(clients).where(eq(clients.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  // Appointment methods\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n    const appointment = await this.db.select().from(appointments).where(eq(appointments.id, id)).execute()\n    return appointment[0] || undefined;\n  }\n\n  async getAppointmentsByMerchant(merchantId: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select({\n      id: appointments.id,\n      merchantId: appointments.merchantId,\n      serviceId: appointments.serviceId,\n      clientId: appointments.clientId,\n      employeeId: appointments.employeeId,\n      clientName: appointments.clientName,\n      clientPhone: appointments.clientPhone,\n      clientEmail: appointments.clientEmail,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n      endTime: appointments.endTime,\n      status: appointments.status,\n      notes: appointments.notes,\n      rescheduleReason: appointments.rescheduleReason,\n      cancelReason: appointments.cancelReason,\n      cancelPolicy: appointments.cancelPolicy,\n      reminderSent: appointments.reminderSent,\n      arrivalTime: appointments.arrivalTime,\n      completedAt: appointments.completedAt,\n      newDate: appointments.newDate,\n      newTime: appointments.newTime,\n      actualStartTime: appointments.actualStartTime,\n      actualEndTime: appointments.actualEndTime,\n      paymentStatus: sql<string>`COALESCE(${appointments}.payment_status, 'pending')`,\n      paidAt: sql`${appointments}.paid_at`,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n    }).from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(eq(appointments.merchantId, merchantId))\n      .orderBy(desc(appointments.appointmentDate), desc(appointments.appointmentTime))\n      .execute();\n  }\n\n  async getAppointmentsByClient(clientId: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select().from(appointments).where(eq(appointments.clientId, clientId)).execute();\n  }\n\n  async getAppointmentsByDate(merchantId: string, date: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n\n    const appointmentsList = this.db.select({\n      id: appointments.id,\n      merchantId: appointments.merchantId,\n      serviceId: appointments.serviceId,\n      clientId: appointments.clientId,\n      employeeId: appointments.employeeId,\n      clientName: appointments.clientName,\n      clientPhone: appointments.clientPhone,\n      clientEmail: appointments.clientEmail,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n      endTime: appointments.endTime,\n      status: appointments.status,\n      notes: appointments.notes,\n      rescheduleReason: appointments.rescheduleReason,\n      cancelReason: appointments.cancelReason,\n      cancelPolicy: appointments.cancelPolicy,\n      reminderSent: appointments.reminderSent,\n      arrivalTime: appointments.arrivalTime,\n      completedAt: appointments.completedAt,\n      newDate: appointments.newDate,\n      newTime: appointments.newTime,\n      actualStartTime: appointments.actualStartTime,\n      actualEndTime: appointments.actualEndTime,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n    }).from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(and(\n        eq(appointments.merchantId, merchantId),\n        eq(appointments.appointmentDate, date)\n      ))\n      .orderBy(appointments.appointmentTime)\n      .execute();\n\n    return appointmentsList;\n  }\n\n  async getAppointmentsByDateRange(merchantId: string, startDate: string, endDate: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select().from(appointments)\n      .where(and(\n        eq(appointments.merchantId, merchantId),\n        gte(appointments.appointmentDate, startDate),\n        sql`${appointments.appointmentDate} <= ${endDate}`\n      ))\n      .orderBy(appointments.appointmentDate, appointments.appointmentTime)\n      .execute();\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    if (!this.initialized) await this.initialize();\n    console.log('PostgreSQLStorage.createAppointment called with:', insertAppointment);\n\n    if (insertAppointment.employeeId) {\n      const isOnDayOff = await this.isEmployeeOnDayOff(insertAppointment.employeeId, insertAppointment.appointmentDate);\n      if (isOnDayOff) {\n        throw new Error(\"Este funcionário está de folga neste dia.\");\n      }\n    }\n\n    const now = new Date();\n\n    let endTime = insertAppointment.endTime;\n    if (!endTime && insertAppointment.appointmentTime) {\n      const service = await this.getService(insertAppointment.serviceId);\n      if (service) {\n        const [hours, minutes] = insertAppointment.appointmentTime.split(':').map(Number);\n        const endMinutes = minutes + service.duration;\n        const endHour = hours + Math.floor(endMinutes / 60);\n        const finalMinutes = endMinutes % 60;\n        endTime = `${endHour.toString().padStart(2, '0')}:${finalMinutes.toString().padStart(2, '0')}`;\n      } else {\n        endTime = insertAppointment.appointmentTime;\n      }\n    }\n\n    const appointment: Appointment = {\n      id: randomUUID(),\n      merchantId: insertAppointment.merchantId,\n      serviceId: insertAppointment.serviceId,\n      clientId: insertAppointment.clientId || null,\n      employeeId: insertAppointment.employeeId || null,\n      clientName: insertAppointment.clientName,\n      clientPhone: insertAppointment.clientPhone,\n      clientEmail: insertAppointment.clientEmail || null,\n      appointmentDate: insertAppointment.appointmentDate,\n      appointmentTime: insertAppointment.appointmentTime,\n      endTime: endTime || insertAppointment.appointmentTime,\n      status: insertAppointment.status || \"pending\",\n      notes: insertAppointment.notes || null,\n      rescheduleReason: insertAppointment.rescheduleReason || null,\n      cancelReason: insertAppointment.cancelReason || null,\n      cancelPolicy: insertAppointment.cancelPolicy || \"24h\",\n      reminderSent: insertAppointment.reminderSent || false,\n      arrivalTime: insertAppointment.arrivalTime || null,\n      completedAt: insertAppointment.completedAt || null,\n      newDate: insertAppointment.newDate || null,\n      newTime: insertAppointment.newTime || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    console.log('Appointment object to insert:', appointment);\n\n    try {\n      const result = await this.db.insert(appointments).values(appointment).execute();\n      console.log('Database insert result:', result);\n      return appointment;\n    } catch (error) {\n      console.error('Error creating appointment in database:', error);\n      console.error('Error details:', (error as Error).message);\n      throw new Error(`Failed to create appointment: ${(error as Error).message}`);\n    }\n  }\n\n  async updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingAppointment = await this.getAppointment(id);\n    if (!existingAppointment) return undefined;\n\n    if (updates.employeeId && updates.appointmentDate && updates.appointmentDate !== existingAppointment.appointmentDate) {\n      const isOnDayOff = await this.isEmployeeOnDayOff(updates.employeeId, updates.appointmentDate);\n      if (isOnDayOff) {\n        throw new Error(\"Este funcionário está de folga neste dia.\");\n      }\n    }\n\n    const updatedAppointment: Appointment = {\n      ...existingAppointment,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    if (updates.status === \"completed\") {\n      updatedAppointment.completedAt = new Date();\n    }\n\n    if (updates.status === \"in_progress\" && !existingAppointment.actualStartTime) {\n      const now = new Date();\n      const brazilOffset = -3 * 60;\n      const brazilTime = new Date(now.getTime() + (brazilOffset * 60 * 1000));\n      updatedAppointment.actualStartTime = `${brazilTime.getUTCHours().toString().padStart(2, '0')}:${brazilTime.getUTCMinutes().toString().padStart(2, '0')}`;\n    }\n\n    if (updates.status === \"completed\" && !existingAppointment.actualEndTime) {\n      const now = new Date();\n      const brazilOffset = -3 * 60;\n      const brazilTime = new Date(now.getTime() + (brazilOffset * 60 * 1000));\n      updatedAppointment.actualEndTime = `${brazilTime.getUTCHours().toString().padStart(2, '0')}:${brazilTime.getUTCMinutes().toString().padStart(2, '0')}`;\n    }\n\n    await this.db.update(appointments).set(updatedAppointment).where(eq(appointments.id, id)).execute();\n    return updatedAppointment;\n  }\n\n  async deleteAppointment(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(appointments).where(eq(appointments.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  async deleteAppointmentsByService(serviceId: string): Promise<number> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(appointments).where(eq(appointments.serviceId, serviceId)).execute();\n    return result.rowCount;\n  }\n\n  async getMerchantDashboardStats(merchantId: string): Promise<{\n    appointments: {\n      today: number;\n      thisWeek: number;\n      thisMonth: number;\n    };\n    services: {\n      total: number;\n      active: number;\n    };\n  }> {\n    if (!this.initialized) await this.initialize();\n\n    const now = new Date();\n    const today = now.toISOString().split('T')[0];\n    const thisWeekStart = new Date(now);\n    thisWeekStart.setDate(now.getDay() === 0 ? now.getDate() - 6 : now.getDate() - now.getDay() + (now.getDay() === 0 ? 0 : 1));\n    const thisWeek = thisWeekStart.toISOString().split('T')[0];\n\n    const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    const thisMonth = thisMonthStart.toISOString().split('T')[0];\n\n    const allAppointments = await this.getAppointmentsByMerchant(merchantId);\n    const allServices = await this.getServicesByMerchant(merchantId);\n\n    return {\n      appointments: {\n        today: allAppointments.filter(a => a.appointmentDate === today).length,\n        thisWeek: allAppointments.filter(a => a.appointmentDate >= thisWeek).length,\n        thisMonth: allAppointments.filter(a => a.appointmentDate >= thisMonth).length,\n      },\n      services: {\n        total: allServices.length,\n        active: allServices.filter(s => s.isActive).length,\n      },\n    };\n  }\n\n  async getClientAppointments(clientId: string, merchantId: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    console.log(`Getting ALL appointments for client ${clientId} and merchant ${merchantId}`);\n\n    const result = await this.db.select({\n      id: appointments.id,\n      merchantId: appointments.merchantId,\n      serviceId: appointments.serviceId,\n      clientId: appointments.clientId,\n      employeeId: appointments.employeeId,\n      clientName: appointments.clientName,\n      clientPhone: appointments.clientPhone,\n      clientEmail: appointments.clientEmail,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n      endTime: appointments.endTime,\n      status: appointments.status,\n      notes: appointments.notes,\n      rescheduleReason: sql`CASE WHEN ${appointments.status} = 'completed' THEN NULL ELSE ${appointments.rescheduleReason} END`,\n      cancelReason: appointments.cancelReason,\n      cancelPolicy: appointments.cancelPolicy,\n      reminderSent: appointments.reminderSent,\n      arrivalTime: appointments.arrivalTime,\n      completedAt: appointments.completedAt,\n      newDate: appointments.newDate,\n      newTime: appointments.newTime,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n    }).from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(and(\n        eq(appointments.clientId, clientId),\n        eq(appointments.merchantId, merchantId)\n      ))\n      .orderBy(desc(appointments.appointmentDate), desc(appointments.appointmentTime));\n\n    console.log(`Found ${result.length} total appointments for client:`, result.map(r => ({ id: r.id, status: r.status, date: r.appointmentDate })));\n\n    const appointmentsWithPromotions = await Promise.all(\n      result.map(async (appointment) => {\n        if (appointment.serviceId && appointment.servicePrice) {\n          const promotionInfo = await this.calculatePromotionalPrice(appointment.serviceId, appointment.servicePrice);\n          return {\n            ...appointment,\n            hasPromotion: promotionInfo.hasPromotion,\n            originalPrice: promotionInfo.originalPrice,\n            promotionalPrice: promotionInfo.promotionalPrice,\n            promotion: promotionInfo.discount\n          };\n        }\n        return appointment;\n      })\n    );\n\n    return appointmentsWithPromotions as any[];\n  }\n\n  async getClientAppointmentsByDate(clientId: string, merchantId: string, date: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    const clientAppointments = await this.db.select({\n      id: appointments.id,\n      merchantId: appointments.merchantId,\n      serviceId: appointments.serviceId,\n      clientId: appointments.clientId,\n      employeeId: appointments.employeeId,\n      clientName: appointments.clientName,\n      clientPhone: appointments.clientPhone,\n      clientEmail: appointments.clientEmail,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n      endTime: appointments.endTime,\n      status: appointments.status,\n      notes: appointments.notes,\n      rescheduleReason: appointments.rescheduleReason,\n      cancelReason: appointments.cancelReason,\n      cancelPolicy: appointments.cancelPolicy,\n      reminderSent: appointments.reminderSent,\n      arrivalTime: appointments.arrivalTime,\n      completedAt: appointments.completedAt,\n      newDate: appointments.newDate,\n      newTime: appointments.newTime,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n    }).from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(and(\n        eq(appointments.clientId, clientId),\n        eq(appointments.merchantId, merchantId),\n        eq(appointments.appointmentDate, date)\n      ))\n      .orderBy(appointments.appointmentTime)\n      .execute();\n\n    const appointmentsWithPromotions = await Promise.all(\n      clientAppointments.map(async (appointment) => {\n        if (appointment.serviceId && appointment.servicePrice) {\n          const promotionInfo = await this.calculatePromotionalPrice(appointment.serviceId, appointment.servicePrice);\n          return {\n            ...appointment,\n            hasPromotion: promotionInfo.hasPromotion,\n            originalPrice: promotionInfo.originalPrice,\n            promotionalPrice: promotionInfo.promotionalPrice,\n            promotion: promotionInfo.discount\n          };\n        }\n        return appointment;\n      })\n    );\n\n    return appointmentsWithPromotions as any[];\n  }\n\n  async getClientAppointmentsByDateRange(clientId: string, merchantId: string, startDate: string, endDate: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    const clientAppointments = await this.db.select({\n      id: appointments.id,\n      merchantId: appointments.merchantId,\n      serviceId: appointments.serviceId,\n      clientId: appointments.clientId,\n      employeeId: appointments.employeeId,\n      clientName: appointments.clientName,\n      clientPhone: appointments.clientPhone,\n      clientEmail: appointments.clientEmail,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n      endTime: appointments.endTime,\n      status: appointments.status,\n      notes: appointments.notes,\n      rescheduleReason: appointments.rescheduleReason,\n      cancelReason: appointments.cancelReason,\n      cancelPolicy: appointments.cancelPolicy,\n      reminderSent: appointments.reminderSent,\n      arrivalTime: appointments.arrivalTime,\n      completedAt: appointments.completedAt,\n      newDate: appointments.newDate,\n      newTime: appointments.newTime,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n    }).from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(and(\n        eq(appointments.clientId, clientId),\n        eq(appointments.merchantId, merchantId),\n        gte(appointments.appointmentDate, startDate),\n        sql`${appointments.appointmentDate} <= ${endDate}`\n      ))\n      .orderBy(appointments.appointmentDate, appointments.appointmentTime)\n      .execute();\n\n    return clientAppointments;\n  }\n\n  async getAppointmentsByEmployee(employeeId: string, date?: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n\n    if (date) {\n      return this.db.select().from(appointments)\n        .where(and(\n          eq(appointments.employeeId, employeeId),\n          eq(appointments.appointmentDate, date)\n        ))\n        .orderBy(appointments.appointmentDate, appointments.appointmentTime)\n        .execute();\n    }\n\n    return this.db.select().from(appointments)\n      .where(eq(appointments.employeeId, employeeId))\n      .orderBy(appointments.appointmentDate, appointments.appointmentTime)\n      .execute();\n  }\n\n  async updateAppointmentStatus(id: string, statusUpdate: AppointmentStatusData & { paymentStatus?: string }): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n    console.log(`\\n=== PostgreSQLStorage.updateAppointmentStatus DEBUG ===`);\n    console.log(`Appointment ID: ${id}`);\n    console.log(`Status update:`, JSON.stringify(statusUpdate, null, 2));\n\n    const existingAppointment = await this.getAppointment(id);\n    if (!existingAppointment) {\n      console.log(`❌ Appointment ${id} not found in database`);\n      return undefined;\n    }\n\n    console.log(`✅ Found existing appointment:`, {\n      id: existingAppointment.id,\n      status: existingAppointment.status,\n      paymentStatus: (existingAppointment as any).paymentStatus,\n      clientName: existingAppointment.clientName,\n      updatedAt: existingAppointment.updatedAt\n    });\n\n    const updatedAppointment: Appointment = {\n      ...existingAppointment,\n      status: statusUpdate.status || existingAppointment.status,\n      cancelReason: statusUpdate.cancelReason || existingAppointment.cancelReason,\n      rescheduleReason: statusUpdate.rescheduleReason || existingAppointment.rescheduleReason,\n      arrivalTime: statusUpdate.arrivalTime || existingAppointment.arrivalTime,\n      updatedAt: new Date(),\n    };\n\n    if (statusUpdate.paymentStatus !== undefined) {\n      console.log(`💰 Updating payment status from \"${(existingAppointment as any).paymentStatus}\" to \"${statusUpdate.paymentStatus}\"`);\n      (updatedAppointment as any).paymentStatus = statusUpdate.paymentStatus;\n      if (statusUpdate.paymentStatus === \"paid\") {\n        (updatedAppointment as any).paidAt = new Date();\n        console.log(`✅ Setting paidAt timestamp: ${(updatedAppointment as any).paidAt}`);\n      }\n    } else {\n      console.log(`ℹ️  No payment status update requested`);\n    }\n\n    if (statusUpdate.status === \"completed\") {\n      updatedAppointment.completedAt = new Date();\n      console.log(`✅ Setting completedAt timestamp: ${updatedAppointment.completedAt}`);\n    }\n\n    if (statusUpdate.status === \"in_progress\" && !existingAppointment.actualStartTime) {\n      const now = new Date();\n      const brazilOffset = -3 * 60;\n      const brazilTime = new Date(now.getTime() + (brazilOffset * 60 * 1000));\n      updatedAppointment.actualStartTime = `${brazilTime.getUTCHours().toString().padStart(2, '0')}:${brazilTime.getUTCMinutes().toString().padStart(2, '0')}`;\n      console.log(`✅ Setting actualStartTime: ${updatedAppointment.actualStartTime}`);\n    }\n\n    if (statusUpdate.status === \"completed\" && !existingAppointment.actualEndTime) {\n      const now = new Date();\n      const brazilOffset = -3 * 60;\n      const brazilTime = new Date(now.getTime() + (brazilOffset * 60 * 1000));\n      updatedAppointment.actualEndTime = `${brazilTime.getUTCHours().toString().padStart(2, '0')}:${brazilTime.getUTCMinutes().toString().padStart(2, '0')}`;\n      console.log(`✅ Setting actualEndTime: ${updatedAppointment.actualEndTime}`);\n    }\n\n    console.log(`📝 Final appointment object to update:`, {\n      id: updatedAppointment.id,\n      status: updatedAppointment.status,\n      paymentStatus: (updatedAppointment as any).paymentStatus,\n      paidAt: (updatedAppointment as any).paidAt,\n      clientName: updatedAppointment.clientName,\n      updatedAt: updatedAppointment.updatedAt\n    });\n\n    try {\n      console.log(`💾 Executing database update for appointment ${id}...`);\n\n      const currentStateQuery = await this.db.select().from(appointments).where(eq(appointments.id, id)).execute();\n      console.log(`📊 Current database state before update:`, {\n        id: currentStateQuery[0]?.id,\n        status: currentStateQuery[0]?.status,\n        payment_status: (currentStateQuery[0] as any)?.payment_status,\n        updated_at: (currentStateQuery[0] as any)?.updated_at\n      });\n\n      const result = await this.db.update(appointments).set(updatedAppointment).where(eq(appointments.id, id)).execute();\n      console.log(`📊 Database update result:`, {\n        rowCount: result.rowCount,\n      });\n\n      if (result.rowCount === 0) {\n        console.log(`❌ No rows were updated for appointment ${id} - this is unexpected!`);\n        return undefined;\n      }\n\n      const verifyQuery = await this.db.select().from(appointments).where(eq(appointments.id, id)).execute();\n      console.log(`🔍 Verification query after update:`, {\n        id: verifyQuery[0]?.id,\n        status: verifyQuery[0]?.status,\n        payment_status: (verifyQuery[0] as any)?.payment_status,\n        paid_at: (verifyQuery[0] as any)?.paid_at,\n        updated_at: (verifyQuery[0] as any)?.updated_at\n      });\n\n      console.log(`✅ Successfully updated appointment ${id}`);\n      console.log(`=== END PostgreSQLStorage DEBUG ===\\n`);\n      return updatedAppointment;\n    } catch (error) {\n      console.error(`❌ Error updating appointment ${id} in database:`, error);\n      console.error(`Error name: ${error.name}`);\n      console.error(`Error message: ${error.message}`);\n      console.error(`Error stack: ${error.stack}`);\n      console.log(`=== END PostgreSQLStorage ERROR ===\\n`);\n      throw error;\n    }\n  }\n\n  async rescheduleAppointment(id: string, newDate: string, newTime: string, reason: string): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`Rescheduling appointment ${id} to ${newDate} ${newTime}, reason: ${reason}`);\n\n    const existingAppointment = await this.getAppointment(id);\n    if (!existingAppointment) {\n      console.log(\"Appointment not found\");\n      return undefined;\n    }\n\n    console.log(\"Found existing appointment:\", existingAppointment);\n\n    if (existingAppointment.employeeId) {\n      const isOnDayOff = await this.isEmployeeOnDayOff(existingAppointment.employeeId, newDate);\n      if (isOnDayOff) {\n        throw new Error(\"Este funcionário está de folga neste dia.\");\n      }\n    }\n\n    const now = new Date();\n    const newDateTime = new Date(`${newDate}T${newTime}`);\n\n    const todayMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const newDateMidnight = new Date(newDateTime.getFullYear(), newDateTime.getMonth(), newDateTime.getDate());\n\n    if (newDateMidnight < todayMidnight) {\n      console.log(\"Cannot reschedule to a past date\");\n      throw new Error(\"Não é possível reagendar para uma data no passado\");\n    }\n\n    console.log(`Rescheduling validation passed: ${newDate} ${newTime}`);\n    console.log(`Current time: ${now.toISOString()}, New time: ${newDateTime.toISOString()}`)\n\n    const service = await this.getService(existingAppointment.serviceId);\n    let newEndTime = newTime;\n    if (service) {\n      const [hours, minutes] = newTime.split(':').map(Number);\n      const endMinutes = minutes + service.duration;\n      const endHour = hours + Math.floor(endMinutes / 60);\n      const finalMinutes = endMinutes % 60;\n      newEndTime = `${endHour.toString().padStart(2, '0')}:${finalMinutes.toString().padStart(2, '0')}`;\n    }\n\n    console.log(`Service duration: ${service?.duration || 60} minutes, calculated end time: ${newEndTime}`);\n\n    if (existingAppointment.employeeId) {\n      console.log(\"Checking availability for employee...\");\n      try {\n        await this.checkEmployeeAvailabilityForReschedule(\n          existingAppointment.employeeId,\n          newDate,\n          newTime,\n          service?.duration || 60,\n          id\n        );\n      } catch (error) {\n        console.log(\"Employee is not available for the new time slot:\", error.message);\n        throw error;\n      }\n      console.log(\"Employee is available for the new time slot\");\n    } else {\n      console.log(\"No employee assigned to appointment, skipping availability check\");\n    }\n\n    const updatedAppointment: Appointment = {\n      ...existingAppointment,\n      appointmentDate: newDate,\n      appointmentTime: newTime,\n      endTime: newEndTime,\n      rescheduleReason: reason,\n      status: \"pending\",\n      updatedAt: new Date(),\n    };\n\n    console.log(\"Updating appointment in database...\");\n    await this.db.update(appointments).set(updatedAppointment).where(eq(appointments.id, id)).execute();\n    console.log(\"Appointment rescheduled successfully\");\n\n    return updatedAppointment;\n  }\n\n\n  async cancelAppointment(id: string, reason: string): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingAppointment = await this.getAppointment(id);\n    if (!existingAppointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...existingAppointment,\n      status: \"cancelled\",\n      cancelReason: reason,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(appointments).set(updatedAppointment).where(eq(appointments.id, id)).execute();\n    return updatedAppointment;\n  }\n\n  async checkEmployeeAvailability(availability: AvailabilityData): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n\n    const isOnDayOff = await this.isEmployeeOnDayOff(availability.employeeId, availability.date);\n    if (isOnDayOff) return false;\n\n    const employee = await this.getEmployee(availability.employeeId);\n    if (!employee || !employee.isActive) return false;\n\n    const workDays = JSON.parse(employee.workDays);\n    const [year, month, day] = availability.date.split('-').map(Number);\n    const requestDate = new Date(year, month - 1, day);\n    const dayOfWeek = requestDate.getDay();\n\n    if (!workDays.includes(dayOfWeek)) return false;\n\n    const requestStartTime = availability.startTime;\n    const [startHour, startMinute] = requestStartTime.split(':').map(Number);\n    const requestEndMinute = startMinute + availability.duration;\n    const requestEndHour = startHour + Math.floor(requestEndMinute / 60);\n    const finalEndMinute = requestEndMinute % 60;\n    const requestEndTime = `${requestEndHour.toString().padStart(2, '0')}:${finalEndMinute.toString().padStart(2, '0')}`;\n\n    if (requestStartTime < employee.startTime || requestEndTime > employee.endTime) {\n      return false;\n    }\n\n    if (employee.breakStartTime && employee.breakEndTime) {\n      if (!(requestEndTime <= employee.breakStartTime || requestStartTime >= employee.breakEndTime)) {\n        return false;\n      }\n    }\n\n    const existingAppointments = await this.getAppointmentsByEmployee(availability.employeeId, availability.date);\n    for (const apt of existingAppointments) {\n      if (apt.status === \"cancelled\" || apt.status === \"completed\" || apt.status === \"no_show\") continue;\n\n      if (!(requestEndTime <= apt.appointmentTime || requestStartTime >= apt.endTime)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  async checkEmployeeAvailabilityForReschedule(\n    employeeId: string,\n    date: string,\n    startTime: string,\n    duration: number,\n    excludeAppointmentId: string\n  ): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`Checking availability for reschedule - Employee: ${employeeId}, Date: ${date}, Time: ${startTime}, Duration: ${duration}, Exclude: ${excludeAppointmentId}`);\n\n    const isOnDayOff = await this.isEmployeeOnDayOff(employeeId, date);\n    if (isOnDayOff) {\n      const dayNames = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];\n      const [year, month, day] = date.split('-').map(Number);\n      const requestDate = new Date(year, month - 1, day);\n      throw new Error(`O funcionário está de folga neste dia (${dayNames[requestDate.getDay()]}s). Por favor, escolha outro dia.`);\n    }\n\n    const employee = await this.getEmployee(employeeId);\n    if (!employee || !employee.isActive) {\n      console.log(\"Employee not found or inactive\");\n      return false;\n    }\n\n    const workDays = JSON.parse(employee.workDays);\n    const [year, month, day] = date.split('-').map(Number);\n    const requestDate = new Date(year, month - 1, day);\n    const dayOfWeek = requestDate.getDay();\n\n    const dayNames = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];\n\n    if (!workDays.includes(dayOfWeek)) {\n      console.log(`Employee doesn't work on day ${dayOfWeek} (${dayNames[dayOfWeek]})`);\n      throw new Error(`O funcionário não trabalha às ${dayNames[dayOfWeek]}s. Por favor, escolha outro dia.`);\n    }\n\n    const requestStartTime = startTime;\n    const [startHour, startMinute] = requestStartTime.split(':').map(Number);\n    const requestEndMinute = startMinute + duration;\n    const requestEndHour = startHour + Math.floor(requestEndMinute / 60);\n    const finalEndMinute = requestEndMinute % 60;\n    const requestEndTime = `${requestEndHour.toString().padStart(2, '0')}:${finalEndMinute.toString().padStart(2, '0')}`;\n\n    console.log(`Requested time slot: ${requestStartTime} - ${requestEndTime}`);\n    console.log(`Employee working hours: ${employee.startTime} - ${employee.endTime}`);\n\n    if (requestStartTime < employee.startTime || requestEndTime > employee.endTime) {\n      console.log(\"Time outside working hours\");\n      throw new Error(`O horário solicitado (${requestStartTime} - ${requestEndTime}) está fora do horário de trabalho do funcionário (${employee.startTime} - ${employee.endTime}).`);\n    }\n\n    if (employee.breakStartTime && employee.breakEndTime) {\n      if (!(requestEndTime <= employee.breakStartTime || requestStartTime >= employee.breakEndTime)) {\n        console.log(\"Time conflicts with break time\");\n        throw new Error(`O horário solicitado conflita com o intervalo do funcionário (${employee.breakStartTime} - ${employee.breakEndTime}).`);\n      }\n    }\n\n    const existingAppointments = await this.getAppointmentsByEmployee(employeeId, date);\n    console.log(`Found ${existingAppointments.length} existing appointments for employee on ${date}`);\n\n    for (const apt of existingAppointments) {\n      console.log(`Checking appointment ${apt.id} (status: ${apt.status}, time: ${apt.appointmentTime} - ${apt.endTime})`);\n\n      if (apt.status === \"cancelled\" || apt.status === \"completed\" || apt.status === \"no_show\") {\n        console.log(\"Skipping finished/cancelled appointment\");\n        continue;\n      }\n\n      if (apt.id === excludeAppointmentId) {\n        console.log(\"Skipping excluded appointment (current one being rescheduled)\");\n        continue;\n      }\n\n      const hasOverlap = !(requestEndTime <= apt.appointmentTime || requestStartTime >= apt.endTime);\n      console.log(`Overlap check: requested ${requestStartTime}-${requestEndTime} vs existing ${apt.appointmentTime}-${apt.endTime} = ${hasOverlap ? 'CONFLICT' : 'OK'}`);\n\n      if (hasOverlap) {\n        console.log(\"Time conflict found with existing appointment\");\n        throw new Error(`O horário solicitado (${requestStartTime} - ${requestEndTime}) conflita com outro agendamento já existente (${apt.appointmentTime} - ${apt.endTime}).`);\n      }\n    }\n\n    console.log(\"No conflicts found - time slot is available\");\n    return true;\n  }\n\n  async getEmployeeAvailableSlots(employeeId: string, date: string, serviceDuration: number): Promise<string[]> {\n    if (!this.initialized) await this.initialize();\n\n    const isOnDayOff = await this.isEmployeeOnDayOff(employeeId, date);\n    if (isOnDayOff) return [];\n\n    const employee = await this.getEmployee(employeeId);\n    if (!employee || !employee.isActive) return [];\n\n    const workDays = JSON.parse(employee.workDays);\n    const [year, month, day] = date.split('-').map(Number);\n    const requestDate = new Date(year, month - 1, day);\n    const dayOfWeek = requestDate.getDay();\n\n    if (!workDays.includes(dayOfWeek)) return [];\n\n    const slots: string[] = [];\n    const startTime = employee.startTime;\n    const endTime = employee.endTime;\n    const [startHour, startMinute] = startTime.split(':').map(Number);\n    const [endHour, endMinute] = endTime.split(':').map(Number);\n\n    let currentHour = startHour;\n    let currentMinute = startMinute;\n\n    while (currentHour < endHour || (currentHour === endHour && currentMinute <= endMinute - serviceDuration)) {\n      const currentTime = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;\n\n      const availability = {\n        employeeId,\n        date,\n        startTime: currentTime,\n        duration: serviceDuration\n      };\n\n      const isAvailable = await this.checkEmployeeAvailability(availability);\n      if (isAvailable) {\n        slots.push(currentTime);\n      }\n\n      currentMinute += 30;\n      if (currentMinute >= 60) {\n        currentMinute = 0;\n        currentHour++;\n      }\n    }\n\n    return slots;\n  }\n\n  async getEmployeeSchedule(employeeId: string): Promise<{ workDays: number[], startTime: string, endTime: string, breakStartTime?: string, breakEndTime?: string }> {\n    if (!this.initialized) await this.initialize();\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) {\n      throw new Error(\"Employee not found\");\n    }\n\n    return {\n      workDays: JSON.parse(employee.workDays),\n      startTime: employee.startTime,\n      endTime: employee.endTime,\n      breakStartTime: employee.breakStartTime || undefined,\n      breakEndTime: employee.breakEndTime || undefined,\n    };\n  }\n\n  async updateEmployeeSchedule(employeeId: string, schedule: Partial<{ workDays: string, startTime: string, endTime: string, breakStartTime?: string, breakEndTime?: string }>): Promise<Employee | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingEmployee = await this.getEmployee(employeeId);\n    if (!existingEmployee) return undefined;\n\n    const updatedEmployee: Employee = {\n      ...existingEmployee,\n      ...schedule,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(employees).set(updatedEmployee).where(eq(employees.id, employeeId)).execute();\n    return updatedEmployee;\n  }\n\n  async canCancelAppointment(appointmentId: string): Promise<{ canCancel: boolean, reason?: string }> {\n    if (!this.initialized) await this.initialize();\n    const appointment = await this.getAppointment(appointmentId);\n    if (!appointment) {\n      return { canCancel: false, reason: \"Appointment not found\" };\n    }\n\n    if (appointment.status === \"cancelled\") {\n      return { canCancel: false, reason: \"Appointment is already cancelled\" };\n    }\n\n    if (appointment.status === \"completed\") {\n      return { canCancel: false, reason: \"Cannot cancel a completed appointment\" };\n    }\n\n    return { canCancel: true };\n  }\n\n  async canRescheduleAppointment(id: string, userRole?: string): Promise<{ canReschedule: boolean; reason?: string }> {\n    if (!this.initialized) await this.initialize();\n    const appointment = await this.getAppointment(id);\n    if (!appointment) {\n      return { canReschedule: false, reason: \"Agendamento não encontrado\" };\n    }\n\n    if (appointment.status === \"completed\" || appointment.status === \"cancelled\" || appointment.status === \"no_show\") {\n      return { canReschedule: false, reason: \"Agendamento já foi finalizado ou cancelado\" };\n    }\n\n    if (userRole === \"employee\" || userRole === \"merchant\") {\n      return { canReschedule: true };\n    }\n\n    if (userRole === \"client\") {\n      const now = new Date();\n      const appointmentDateTime = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n      const timeDiff = appointmentDateTime.getTime() - now.getTime();\n      const hoursDiff = timeDiff / (1000 * 60 * 60);\n\n      if (hoursDiff < 24) {\n        return { canReschedule: false, reason: \"Só é possível reagendar até 24 horas antes do horário agendado\" };\n      }\n    }\n\n    if ([\"pending\", \"confirmed\", \"scheduled\"].includes(appointment.status)) {\n      return { canReschedule: true };\n    }\n\n    return { canReschedule: false, reason: \"Status do agendamento não permite reagendamento\" };\n  }\n\n  async getRemainingCancelPolicyMethods(): Promise<void> {\n    // This method completes the cancel policy implementation\n    // that was accidentally left incomplete in the previous edit\n  }\n\n  private completeCancelPolicyCheck(appointment: any, hoursDiff: number): { canReschedule: boolean, reason?: string } {\n    switch (appointment.cancelPolicy) {\n        case \"24h\":\n          if (hoursDiff < 24) {\n            return { canReschedule: false, reason: \"Só é possível reagendar até 24 horas antes do horário agendado\" };\n          }\n          break;\n        case \"12h\":\n          if (hoursDiff < 12) {\n            return { canReschedule: false, reason: \"Só é possível reagendar até 12 horas antes do horário agendado\" };\n          }\n          break;\n        case \"2h\":\n          if (hoursDiff < 2) {\n            return { canReschedule: false, reason: \"Só é possível reagendar até 2 horas antes do horário agendado\" };\n          }\n          break;\n        case \"none\":\n          break;\n      }\n\n    return { canReschedule: true };\n  }\n\n  async markAppointmentAsLate(appointmentId: string): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingAppointment = await this.getAppointment(appointmentId);\n    if (!existingAppointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...existingAppointment,\n      status: \"late\",\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(appointments).set(updatedAppointment).where(eq(appointments.id, appointmentId)).execute();\n    return updatedAppointment;\n  }\n\n  async markAppointmentAsNoShow(appointmentId: string): Promise<Appointment | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingAppointment = await this.getAppointment(appointmentId);\n    if (!existingAppointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...existingAppointment,\n      status: \"no_show\",\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(appointments).set(updatedAppointment).where(eq(appointments.id, appointmentId)).execute();\n    return updatedAppointment;\n  }\n\n  async getPendingPaymentAppointments(merchantId: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n    return this.db.select({\n      id: appointments.id,\n      merchantId: appointments.merchantId,\n      serviceId: appointments.serviceId,\n      clientId: appointments.clientId,\n      employeeId: appointments.employeeId,\n      clientName: appointments.clientName,\n      clientPhone: appointments.clientPhone,\n      clientEmail: appointments.clientEmail,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n      endTime: appointments.endTime,\n      status: appointments.status,\n      notes: appointments.notes,\n      rescheduleReason: appointments.rescheduleReason,\n      cancelReason: appointments.cancelReason,\n      cancelPolicy: appointments.cancelPolicy,\n      reminderSent: appointments.reminderSent,\n      arrivalTime: appointments.arrivalTime,\n      completedAt: appointments.completedAt,\n      newDate: appointments.newDate,\n      newTime: appointments.newTime,\n      actualStartTime: appointments.actualStartTime,\n      actualEndTime: appointments.actualEndTime,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n      paymentStatus: sql<string>`COALESCE(${appointments}.payment_status, 'pending')`,\n    }).from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(and(\n        eq(appointments.merchantId, merchantId),\n        eq(appointments.status, \"completed\"),\n        or(\n          sql`${appointments}.payment_status = 'pending'`,\n          sql`${appointments}.payment_status IS NULL`\n        )\n      ))\n      .orderBy(desc(appointments.appointmentDate), desc(appointments.appointmentTime))\n      .execute() as Appointment[];\n  }\n\n  async getAppointmentsByEmployeeAndDate(employeeId: string, date: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n\n    const appointmentsList = this.db.select().from(appointments)\n      .where(and(\n        eq(appointments.employeeId, employeeId),\n        eq(appointments.appointmentDate, date)\n      ))\n      .orderBy(appointments.appointmentTime)\n      .execute();\n\n    return appointmentsList;\n  }\n\n  async getEmployeeUpcomingAppointments(employeeId: string): Promise<Appointment[]> {\n    if (!this.initialized) await this.initialize();\n\n    const today = new Date().toISOString().split('T')[0];\n\n    const upcomingAppointments = this.db.select().from(appointments)\n      .where(and(\n        eq(appointments.employeeId, employeeId),\n        sql`${appointments.appointmentDate} >= ${today}`,\n        sql`${appointments.status} IN ('pending', 'scheduled', 'confirmed')`\n      ))\n      .orderBy(appointments.appointmentDate, appointments.appointmentTime)\n      .execute();\n\n    return upcomingAppointments;\n  }\n\n  async getEmployeeHistoricalAppointments(employeeId: string, filter: string = \"month\"): Promise<any[]> {\n    if (!this.initialized) await this.initialize();\n\n    const now = new Date();\n    const brazilOffset = -3 * 60;\n    const brazilTime = new Date(now.getTime() + (brazilOffset * 60 * 1000));\n\n    let startDate: string;\n    let endDate: string = brazilTime.toISOString().split('T')[0];\n\n    switch (filter) {\n      case \"day\":\n        startDate = brazilTime.toISOString().split('T')[0];\n        break;\n      case \"week\":\n        const weekAgo = new Date(brazilTime.getTime() - (7 * 24 * 60 * 60 * 1000));\n        startDate = weekAgo.toISOString().split('T')[0];\n        break;\n      case \"month\":\n        const monthAgo = new Date(brazilTime.getTime() - (30 * 24 * 60 * 60 * 1000));\n        startDate = monthAgo.toISOString().split('T')[0];\n        break;\n      default:\n        const defaultAgo = new Date(brazilTime.getTime() - (30 * 24 * 60 * 60 * 1000));\n        startDate = defaultAgo.toISOString().split('T')[0];\n    }\n\n    const appointmentRecords = await this.db\n      .select()\n      .from(appointments)\n      .where(\n        and(\n          eq(appointments.employeeId, employeeId),\n          inArray(appointments.status, [\"completed\", \"cancelled\", \"no_show\"]),\n          gte(appointments.appointmentDate, startDate),\n          lte(appointments.appointmentDate, endDate)\n        )\n      )\n      .orderBy(desc(appointments.appointmentDate), desc(appointments.appointmentTime));\n\n    const employee = await this.getEmployee(employeeId);\n\n    const enrichedAppointments = await Promise.all(\n      appointmentRecords.map(async (appointment) => {\n        const service = await this.getService(appointment.serviceId);\n\n        let employeeEarning = 0;\n        if (appointment.status === \"completed\" && employee && employee.paymentType === \"percentage\") {\n          const percentage = employee.paymentValue / 100;\n          employeeEarning = service?.price ? Math.round((service.price * percentage) / 100) : 0;\n        } else if (appointment.status === \"completed\" && employee && employee.paymentType === \"fixed\") {\n          employeeEarning = employee.paymentValue;\n        }\n\n        return {\n          ...appointment,\n          serviceName: service?.name || \"Serviço não encontrado\",\n          servicePrice: service?.price || 0,\n          serviceDuration: service?.duration || 0,\n          employeeEarning,\n          employeePaymentType: employee?.paymentType || \"monthly\",\n        };\n      })\n    );\n\n    return enrichedAppointments;\n  }\n\n  async calculateEmployeeEarnings(employeeId: string, startDate: string, endDate: string): Promise<number> {\n    if (!this.initialized) await this.initialize();\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) return 0;\n\n    const completedAppointmentRecords = await this.db\n      .select()\n      .from(appointments)\n      .where(\n        and(\n          eq(appointments.employeeId, employeeId),\n          eq(appointments.status, \"completed\"),\n          gte(appointments.appointmentDate, startDate),\n          lte(appointments.appointmentDate, endDate)\n        )\n      );\n\n    if (employee.paymentType === \"percentage\") {\n      let totalEarnings = 0;\n      const percentage = employee.paymentValue / 100;\n\n      for (const appointment of completedAppointmentRecords) {\n        const service = await this.getService(appointment.serviceId);\n        if (service) {\n          totalEarnings += Math.round((service.price * percentage) / 100);\n        }\n      }\n      return totalEarnings;\n    } else if (employee.paymentType === \"fixed\") {\n      if (completedAppointmentRecords.length > 0) {\n        return employee.paymentValue;\n      }\n      return 0;\n    }\n\n    return 0;\n  }\n\n  async extendWorkingHours(employeeId: string, newEndTime: string): Promise<Employee | undefined> {\n    if (!this.initialized) await this.initialize();\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) return undefined;\n\n    const updatedEmployee: Employee = {\n      ...employee,\n      extendedEndTime: newEndTime,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(employees).set(updatedEmployee).where(eq(employees.id, employeeId)).execute();\n    return updatedEmployee;\n  }\n\n  async finishWorkdayWithOvertime(employeeId: string, actualEndTime: string): Promise<{\n    employee: Employee;\n    overtimeMinutes: number;\n  }> {\n    if (!this.initialized) await this.initialize();\n\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) {\n      throw new Error(\"Funcionário não encontrado\");\n    }\n\n    const [actualHour, actualMinute] = actualEndTime.split(':').map(Number);\n    const [originalHour, originalMinute] = employee.endTime.split(':').map(Number);\n\n    const actualTimeMinutes = actualHour * 60 + actualMinute;\n    const originalTimeMinutes = originalHour * 60 + originalMinute;\n\n    const overtimeMinutes = Math.max(0, actualTimeMinutes - originalTimeMinutes);\n\n    const currentOvertimeHours = employee.overtimeHours || 0;\n    const totalOvertimeMinutes = currentOvertimeHours + overtimeMinutes;\n    const today = new Date().toISOString().split('T')[0];\n\n    const updatedEmployee = await this.db.update(employees)\n      .set({\n        overtimeHours: totalOvertimeMinutes,\n        lastOvertimeDate: today,\n        extendedEndTime: null\n      })\n      .where(eq(employees.id, employeeId))\n      .returning()\n      .execute();\n\n    if (!updatedEmployee || updatedEmployee.length === 0) {\n      throw new Error(\"Erro ao atualizar funcionário\");\n    }\n\n    return {\n      employee: updatedEmployee[0],\n      overtimeMinutes\n    };\n  }\n\n  async getEmployeeOvertimeStats(employeeId: string, period: 'week' | 'month' | 'year' = 'month'): Promise<{\n    totalOvertimeMinutes: number;\n    totalOvertimeHours: number;\n    lastOvertimeDate: string | null;\n  }> {\n    if (!this.initialized) await this.initialize();\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) {\n      return {\n        totalOvertimeMinutes: 0,\n        totalOvertimeHours: 0,\n        lastOvertimeDate: null\n      };\n    }\n\n    const totalMinutes = employee.overtimeHours || 0;\n    const totalHours = Math.floor(totalMinutes / 60);\n    const remainingMinutes = totalMinutes % 60;\n\n    return {\n      totalOvertimeMinutes: totalMinutes,\n      totalOvertimeHours: totalHours + (remainingMinutes / 60),\n      lastOvertimeDate: employee.lastOvertimeDate || null\n    };\n  }\n\n\n  async getClientHistoricalAppointments(clientId: string, filter: string): Promise<any[]> {\n    if (!this.initialized) await this.initialize();\n\n    const now = new Date();\n    const brazilOffset = -3 * 60;\n    const brazilTime = new Date(now.getTime() + (brazilOffset * 60 * 1000));\n\n    let startDate: string;\n    let endDate: string = brazilTime.toISOString().split('T')[0];\n\n    switch (filter) {\n      case \"day\":\n        startDate = brazilTime.toISOString().split('T')[0];\n        break;\n      case \"week\":\n        const weekAgo = new Date(brazilTime.getTime() - (7 * 24 * 60 * 60 * 1000));\n        startDate = weekAgo.toISOString().split('T')[0];\n        break;\n      case \"month\":\n        const monthAgo = new Date(brazilTime.getTime() - (30 * 24 * 60 * 60 * 1000));\n        startDate = monthAgo.toISOString().split('T')[0];\n        break;\n      default:\n        const defaultAgo = new Date(brazilTime.getTime() - (30 * 24 * 60 * 60 * 1000));\n        startDate = defaultAgo.toISOString().split('T')[0];\n    }\n\n    const appointmentRecords = await this.db\n      .select({\n        id: appointments.id,\n        merchantId: appointments.merchantId,\n        serviceId: appointments.serviceId,\n        clientId: appointments.clientId,\n        employeeId: appointments.employeeId,\n        clientName: appointments.clientName,\n        clientPhone: appointments.clientPhone,\n        clientEmail: appointments.clientEmail,\n        appointmentDate: appointments.appointmentDate,\n        appointmentTime: appointments.appointmentTime,\n        endTime: appointments.endTime,\n        status: appointments.status,\n        notes: appointments.notes,\n        rescheduleReason: appointments.rescheduleReason,\n        cancelReason: appointments.cancelReason,\n        cancelPolicy: appointments.cancelPolicy,\n        reminderSent: appointments.reminderSent,\n        arrivalTime: appointments.arrivalTime,\n        completedAt: appointments.completedAt,\n        newDate: appointments.newDate,\n        newTime: appointments.newTime,\n        actualStartTime: appointments.actualStartTime,\n        actualEndTime: appointments.actualEndTime,\n        createdAt: appointments.createdAt,\n        updatedAt: appointments.updatedAt,\n        serviceName: services.name,\n        servicePrice: services.price,\n        employeeName: employees.name,\n      })\n      .from(appointments)\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(\n        and(\n          eq(appointments.clientId, clientId),\n          inArray(appointments.status, [\"completed\", \"cancelled\", \"no_show\"]),\n          gte(appointments.appointmentDate, startDate),\n          lte(appointments.appointmentDate, endDate)\n        )\n      )\n      .orderBy(desc(appointments.appointmentDate), desc(appointments.appointmentTime));\n\n    return appointmentRecords as any[];\n  }\n\n  // Employee days off methods\n  async createEmployeeDayOff(data: InsertEmployeeDayOff): Promise<EmployeeDayOff> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(\"Storage: Creating employee day off with data:\", data);\n\n    const employee = await this.getEmployee(data.employeeId);\n    if (!employee) {\n      throw new Error(\"Funcionário não encontrado\");\n    }\n\n    if (employee.merchantId !== data.merchantId) {\n      throw new Error(\"Funcionário não pertence a este salão\");\n    }\n\n    const existing = await this.getEmployeeDaysOff(data.merchantId, data.employeeId, data.date);\n    if (existing.length > 0) {\n      throw new Error(\"Este funcionário já possui folga registrada para esta data\");\n    }\n\n    const dayOff = {\n      id: randomUUID(),\n      ...data,\n      createdAt: new Date(),\n    };\n\n    console.log(\"Storage: Inserting day off:\", dayOff);\n\n    try {\n      const result = await this.db.insert(employeeDaysOff).values(dayOff).returning().execute();\n      console.log(\"Storage: Day off created successfully:\", result);\n      return result[0];\n    } catch (error) {\n      console.error(\"Storage: Error inserting day off:\", error);\n      throw new Error(\"Erro ao salvar folga no banco de dados\");\n    }\n  }\n\n  async getEmployeeDaysOff(merchantId: string, employeeId?: string, date?: string): Promise<EmployeeDayOff[]> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(\"Storage: Getting employee days off for merchant:\", merchantId, \"employee:\", employeeId, \"date:\", date);\n\n    let conditions = [eq(employeeDaysOff.merchantId, merchantId)];\n\n    if (employeeId) {\n      conditions.push(eq(employeeDaysOff.employeeId, employeeId));\n    }\n\n    if (date) {\n      conditions.push(eq(employeeDaysOff.date, date));\n    }\n\n    const result = await this.db.select().from(employeeDaysOff).where(and(...conditions)).execute();\n    console.log(\"Storage: Found\", result.length, \"employee days off records\");\n\n    return result;\n  }\n\n  async updateEmployeeDayOff(id: string, updates: Partial<InsertEmployeeDayOff>): Promise<EmployeeDayOff | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(\"Storage: Updating employee day off:\", id, updates);\n\n    const existing = await this.db.select().from(employeeDaysOff).where(eq(employeeDaysOff.id, id)).execute();\n    if (!existing || existing.length === 0) {\n      console.log(\"Storage: Day off not found:\", id);\n      return undefined;\n    }\n\n    console.log(\"Storage: Found existing day off:\", existing[0]);\n\n    const updatedDayOff = {\n      ...existing[0],\n      ...updates,\n    };\n\n    console.log(\"Storage: Updating with data:\", updatedDayOff);\n\n    try {\n      const result = await this.db.update(employeeDaysOff)\n        .set(updatedDayOff)\n        .where(eq(employeeDaysOff.id, id))\n        .returning()\n        .execute();\n\n      console.log(\"Storage: Day off updated successfully:\", result);\n      return result[0];\n    } catch (error) {\n      console.error(\"Storage: Error updating day off:\", error);\n      throw new Error(\"Erro ao atualizar folga no banco de dados\");\n    }\n  }\n\n  async deleteEmployeeDayOff(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n\n    const result = await this.db.delete(employeeDaysOff).where(eq(employeeDaysOff.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  async isEmployeeOnDayOff(employeeId: string, date: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n\n    const dayOff = await this.db.select()\n      .from(employeeDaysOff)\n      .where(and(\n        eq(employeeDaysOff.employeeId, employeeId),\n        eq(employeeDaysOff.date, date)\n      ))\n      .execute();\n\n    return dayOff.length > 0;\n  }\n\n  // Penalty methods\n  async createPenalty(penalty: {\n    merchantId: string;\n    clientId: string | null;\n    appointmentId: string;\n    clientName: string;\n    clientPhone: string;\n    clientEmail: string | null;\n    type: string;\n    amount: number;\n    reason: string;\n    status: string;\n  }): Promise<any> {\n    if (!this.initialized) await this.initialize();\n\n    const newPenalty = {\n      id: randomUUID(),\n      merchantId: penalty.merchantId,\n      clientId: penalty.clientId,\n      appointmentId: penalty.appointmentId,\n      clientName: penalty.clientName,\n      clientPhone: penalty.clientPhone,\n      clientEmail: penalty.clientEmail,\n      type: penalty.type,\n      amount: penalty.amount,\n      reason: penalty.reason,\n      status: penalty.status,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const result = await this.db.insert(penalties).values(newPenalty).returning().execute();\n    return result[0];\n  }\n\n  async getPenaltiesByMerchant(merchantId: string): Promise<any[]> {\n    if (!this.initialized) await this.initialize();\n\n    const penaltiesList = await this.db.select({\n      id: penalties.id,\n      merchantId: penalties.merchantId,\n      clientId: penalties.clientId,\n      appointmentId: penalties.appointmentId,\n      clientName: penalties.clientName,\n      clientPhone: penalties.clientPhone,\n      clientEmail: penalties.clientEmail,\n      type: penalties.type,\n      amount: penalties.amount,\n      reason: penalties.reason,\n      status: penalties.status,\n      paidAt: penalties.paidAt,\n      paidBy: penalties.paidBy,\n      createdAt: penalties.createdAt,\n      updatedAt: penalties.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n      employeeName: employees.name,\n      appointmentDate: appointments.appointmentDate,\n      appointmentTime: appointments.appointmentTime,\n    }).from(penalties)\n      .leftJoin(appointments, eq(penalties.appointmentId, appointments.id))\n      .leftJoin(services, eq(appointments.serviceId, services.id))\n      .leftJoin(employees, eq(appointments.employeeId, employees.id))\n      .where(eq(penalties.merchantId, merchantId))\n      .orderBy(desc(penalties.createdAt))\n      .execute();\n\n    return penaltiesList;\n  }\n\n  async getPenaltiesByClient(clientId: string): Promise<any[]> {\n    if (!this.initialized) await this.initialize();\n\n    const penaltiesList = await this.db.select().from(penalties)\n      .where(eq(penalties.clientId, clientId))\n      .orderBy(desc(penalties.createdAt))\n      .execute();\n\n    return penaltiesList;\n  }\n\n  async updatePenaltyStatus(id: string, status: string, paidBy: string): Promise<any | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    console.log(`🔄 Updating penalty ${id} to status: ${status}`);\n\n    const updates: any = {\n      status,\n      updatedAt: new Date(),\n    };\n\n    if (status === \"paid\") {\n      updates.paidAt = new Date();\n      updates.paidBy = paidBy;\n    } else if (status === \"waived\") {\n      updates.paidAt = new Date();\n      updates.paidBy = paidBy;\n    }\n\n    try {\n      const result = await this.db.update(penalties)\n        .set(updates)\n        .where(eq(penalties.id, id))\n        .returning()\n        .execute();\n\n      console.log(`✅ Penalty ${id} updated successfully:`, result);\n      console.log(`📢 Penalty status changed from pending to ${status} - will no longer appear in client dashboard`);\n      return result[0];\n    } catch (error) {\n      console.error(`❌ Error updating penalty ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Promotion methods\n  async createPromotion(insertPromotion: InsertPromotion): Promise<Promotion> {\n    if (!this.initialized) await this.initialize();\n\n    const id = randomUUID();\n    const now = new Date();\n    const promotion: Promotion = {\n      ...insertPromotion,\n      id,\n      isActive: insertPromotion.isActive ?? true,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    await this.db.insert(promotions).values(promotion).execute();\n    return promotion;\n  }\n\n  async getPromotionsByMerchant(merchantId: string): Promise<any[]> {\n    if (!this.initialized) await this.initialize();\n\n    const promotionsList = await this.db.select({\n      id: promotions.id,\n      merchantId: promotions.merchantId,\n      serviceId: promotions.serviceId,\n      name: promotions.name,\n      description: promotions.description,\n      discountType: promotions.discountType,\n      discountValue: promotions.discountValue,\n      startDate: promotions.startDate,\n      endDate: promotions.endDate,\n      isActive: promotions.isActive,\n      createdAt: promotions.createdAt,\n      updatedAt: promotions.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n    }).from(promotions)\n      .leftJoin(services, eq(promotions.serviceId, services.id))\n      .where(eq(promotions.merchantId, merchantId))\n      .orderBy(desc(promotions.createdAt))\n      .execute();\n\n    return promotionsList;\n  }\n\n  async getActivePromotionsByMerchant(merchantId: string): Promise<any[]> {\n    if (!this.initialized) await this.initialize();\n\n    const today = new Date().toISOString().split('T')[0];\n\n    const activePromotions = await this.db.select({\n      id: promotions.id,\n      merchantId: promotions.merchantId,\n      serviceId: promotions.serviceId,\n      name: promotions.name,\n      description: promotions.description,\n      discountType: promotions.discountType,\n      discountValue: promotions.discountValue,\n      startDate: promotions.startDate,\n      endDate: promotions.endDate,\n      isActive: promotions.isActive,\n      createdAt: promotions.createdAt,\n      updatedAt: promotions.updatedAt,\n      serviceName: services.name,\n      servicePrice: services.price,\n    }).from(promotions)\n      .leftJoin(services, eq(promotions.serviceId, services.id))\n      .where(and(\n        eq(promotions.merchantId, merchantId),\n        eq(promotions.isActive, true),\n        lte(promotions.startDate, today),\n        gte(promotions.endDate, today)\n      ))\n      .orderBy(desc(promotions.createdAt))\n      .execute();\n\n    return activePromotions;\n  }\n\n  async getPromotion(id: string): Promise<Promotion | undefined> {\n    if (!this.initialized) await this.initialize();\n    const promotion = await this.db.select().from(promotions).where(eq(promotions.id, id)).execute();\n    return promotion[0] || undefined;\n  }\n\n  async updatePromotion(id: string, updates: Partial<InsertPromotion>): Promise<Promotion | undefined> {\n    if (!this.initialized) await this.initialize();\n    const existingPromotion = await this.getPromotion(id);\n    if (!existingPromotion) return undefined;\n\n    const updatedPromotion: Promotion = {\n      ...existingPromotion,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await this.db.update(promotions).set(updatedPromotion).where(eq(promotions.id, id)).execute();\n    return updatedPromotion;\n  }\n\n  async deletePromotion(id: string): Promise<boolean> {\n    if (!this.initialized) await this.initialize();\n    const result = await this.db.delete(promotions).where(eq(promotions.id, id)).execute();\n    return result.rowCount > 0;\n  }\n\n  async getPromotionByService(serviceId: string): Promise<any | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    const today = new Date().toISOString().split('T')[0];\n\n    const promotion = await this.db.select({\n      id: promotions.id,\n      merchantId: promotions.merchantId,\n      serviceId: promotions.serviceId,\n      name: promotions.name,\n      description: promotions.description,\n      discountType: promotions.discountType,\n      discountValue: promotions.discountValue,\n      startDate: promotions.startDate,\n      endDate: promotions.endDate,\n      isActive: promotions.isActive,\n      createdAt: promotions.createdAt,\n      updatedAt: promotions.updatedAt,\n    }).from(promotions)\n      .where(and(\n        eq(promotions.serviceId, serviceId),\n        eq(promotions.isActive, true),\n        lte(promotions.startDate, today),\n        gte(promotions.endDate, today)\n      ))\n      .execute();\n\n    return promotion[0] || undefined;\n  }\n\n  async calculatePromotionalPrice(serviceId: string, originalPrice: number): Promise<{ hasPromotion: boolean; originalPrice: number; promotionalPrice: number; discount: any }> {\n    const promotion = await this.getPromotionByService(serviceId);\n\n    if (!promotion) {\n      return {\n        hasPromotion: false,\n        originalPrice,\n        promotionalPrice: originalPrice,\n        discount: null\n      };\n    }\n\n    let promotionalPrice = originalPrice;\n\n    if (promotion.discountType === \"percentage\") {\n      const discountAmount = Math.round((originalPrice * promotion.discountValue) / 100);\n      promotionalPrice = originalPrice - discountAmount;\n    } else if (promotion.discountType === \"fixed\") {\n      promotionalPrice = Math.max(0, originalPrice - promotion.discountValue);\n    }\n\n    return {\n      hasPromotion: true,\n      originalPrice,\n      promotionalPrice,\n      discount: promotion\n    };\n  }\n\n  // Merchant access management methods\n  async grantMerchantAccess(merchantId: string, durationDays: number, monthlyFee?: number): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    const now = new Date();\n    const accessEndDate = new Date(now);\n    accessEndDate.setDate(now.getDate() + durationDays);\n\n    const nextPaymentDue = new Date(now);\n    nextPaymentDue.setDate(now.getDate() + durationDays);\n\n    const updates = {\n      status: \"active\",\n      accessStartDate: now,\n      accessEndDate: accessEndDate,\n      accessDurationDays: durationDays,\n      lastPaymentDate: now,\n      nextPaymentDue: nextPaymentDue,\n      paymentStatus: \"paid\",\n      ...(monthlyFee !== undefined && { monthlyFee })\n    };\n\n    const merchant = await this.updateMerchant(merchantId, updates);\n    return merchant;\n  }\n\n  async suspendMerchantAccess(merchantId: string): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    const updates = {\n      status: \"payment_pending\",\n      paymentStatus: \"overdue\"\n    };\n\n    const merchant = await this.updateMerchant(merchantId, updates);\n    return merchant;\n  }\n\n  async renewMerchantAccess(merchantId: string): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    const existingMerchant = await this.getMerchant(merchantId);\n    if (!existingMerchant) return undefined;\n\n    const now = new Date();\n    const durationDays = existingMerchant.accessDurationDays || 30;\n    const accessEndDate = new Date(now);\n    accessEndDate.setDate(now.getDate() + durationDays);\n\n    const nextPaymentDue = new Date(now);\n    nextPaymentDue.setDate(now.getDate() + durationDays);\n\n    const updates = {\n      status: \"active\",\n      accessStartDate: now,\n      accessEndDate: accessEndDate,\n      lastPaymentDate: now,\n      nextPaymentDue: nextPaymentDue,\n      paymentStatus: \"paid\",\n      planStatus: \"vip\", // Assuming renewal means VIP plan\n      planValidity: accessEndDate,\n    };\n\n    const merchant = await this.updateMerchant(merchantId, updates);\n    return merchant;\n  }\n\n  async updateMerchantAccessSettings(merchantId: string, settings: {\n    accessDurationDays?: number;\n    monthlyFee?: number;\n    paymentStatus?: string;\n    planStatus?: string;\n    planValidity?: Date;\n  }): Promise<Merchant | undefined> {\n    if (!this.initialized) await this.initialize();\n\n    const updates: Partial<InsertMerchant> = { ...settings };\n\n    if (settings.planStatus) {\n      updates.planStatus = settings.planStatus;\n    }\n    if (settings.planValidity) {\n      updates.planValidity = settings.planValidity;\n    }\n\n    if (settings.accessDurationDays) {\n      const existingMerchant = await this.getMerchant(merchantId);\n      if (existingMerchant && existingMerchant.accessStartDate) {\n        const accessEndDate = new Date(existingMerchant.accessStartDate);\n        accessEndDate.setDate(accessEndDate.getDate() + settings.accessDurationDays);\n        updates.accessEndDate = accessEndDate;\n\n        const nextPaymentDue = new Date(existingMerchant.accessStartDate);\n        nextPaymentDue.setDate(nextPaymentDue.getDate() + settings.accessDurationDays);\n        updates.nextPaymentDue = nextPaymentDue;\n      }\n    }\n\n    const merchant = await this.updateMerchant(merchantId, updates);\n    return merchant;\n  }\n\n  async getMerchantsWithExpiredAccess(): Promise<Merchant[]> {\n    if (!this.initialized) await this.initialize();\n\n    const allMerchants = await this.getAllMerchants();\n    const now = new Date();\n\n    return allMerchants.filter(merchant => {\n      if (!merchant.accessEndDate) return false;\n      return new Date(merchant.accessEndDate) <= now && merchant.status === \"active\" && merchant.planStatus !== \"free\";\n    });\n  }\n\n  async processExpiredAccess(): Promise<number> {\n    if (!this.initialized) await this.initialize();\n\n    const expiredMerchants = await this.getMerchantsWithExpiredAccess();\n    let processedCount = 0;\n\n    for (const merchant of expiredMerchants) {\n      try {\n        await this.updateMerchant(merchant.id, {\n          status: \"payment_pending\",\n          paymentStatus: \"overdue\"\n        });\n        processedCount++;\n        console.log(`Merchant ${merchant.name} (${merchant.email}) marked as expired`);\n      } catch (error) {\n        console.error(`Failed to process expired merchant ${merchant.id}:`, error);\n      }\n    }\n\n    return processedCount;\n  }\n\n  async getMerchantsAccessStatus(): Promise<{\n    active: number;\n    expired: number;\n    expiringSoon: number;\n    totalRevenue: number;\n  }> {\n    if (!this.initialized) await this.initialize();\n\n    const allMerchants = await this.getAllMerchants();\n    const now = new Date();\n    const soonThreshold = new Date(now.getTime() + (7 * 24 * 60 * 60 * 1000));\n\n    let active = 0;\n    let expired = 0;\n    let expiringSoon = 0;\n    let totalRevenue = 0;\n\n    allMerchants.forEach(merchant => {\n      if (merchant.status === \"active\") {\n        if (merchant.accessEndDate && new Date(merchant.accessEndDate) > now) {\n          active++;\n          if (new Date(merchant.accessEndDate) <= soonThreshold) {\n            expiringSoon++;\n          }\n        } else if (merchant.accessEndDate && new Date(merchant.accessEndDate) <= now) {\n          expired++;\n        } else {\n          active++;\n        }\n      } else if (merchant.status === \"payment_pending\") {\n        expired++;\n      }\n\n      if (merchant.lastPaymentDate && merchant.monthlyFee) {\n        totalRevenue += merchant.monthlyFee;\n      }\n    });\n\n    return {\n      active,\n      expired,\n      expiringSoon,\n      totalRevenue\n    };\n  }\n\n  // System Settings methods\n  async getSystemSetting(key: string): Promise<SystemSetting | null> {\n    if (!this.initialized) await this.initialize();\n    try {\n      const setting = await this.db.select().from(systemSettings).where(eq(systemSettings.key, key)).execute();\n      return setting[0] || null;\n    } catch (error) {\n      console.error(\"Error getting system setting:\", error);\n      throw error;\n    }\n  }\n\n  async updateSystemSetting(key: string, value: string): Promise<SystemSetting | null> {\n    if (!this.initialized) await this.initialize();\n    try {\n      await this.db.update(systemSettings).set({ value: value, updatedAt: new Date() }).where(eq(systemSettings.key, key)).execute();\n      return this.getSystemSetting(key);\n    } catch (error) {\n      console.error(\"Error updating system setting:\", error);\n      throw error;\n    }\n  }\n\n  async getAllSystemSettings(): Promise<SystemSetting[]> {\n    if (!this.initialized) await this.initialize();\n    try {\n      const settings = await this.db.select().from(systemSettings).orderBy(systemSettings.key).execute();\n      return settings;\n    } catch (error) {\n      console.error(\"Error getting all system settings:\", error);\n      throw error;\n    }\n  }\n\n  async createSystemSetting(data: {\n    key: string;\n    value: string;\n    description?: string;\n    type?: string;\n  }): Promise<SystemSetting> {\n    if (!this.initialized) await this.initialize();\n    try {\n      const now = new Date();\n      const newSetting: SystemSetting = {\n        id: randomUUID(),\n        key: data.key,\n        value: data.value,\n        description: data.description || null,\n        type: data.type || 'string',\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      await this.db.insert(systemSettings).values(newSetting).execute();\n      return newSetting;\n    } catch (error) {\n      console.error(\"Error creating system setting:\", error);\n      throw error;\n    }\n  }\n}\n","size_bytes":99754},"server/storage.ts":{"content":"import { type User, type InsertUser, type Merchant, type InsertMerchant, type Service, type InsertService, type Employee, type InsertEmployee, type Client, type InsertClient, type Appointment, type InsertAppointment, type AvailabilityData, type AppointmentStatusData } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserPassword(id: string, newPassword: string): Promise<boolean>;\n\n  // Merchant methods\n  getMerchant(id: string): Promise<Merchant | undefined>;\n  getMerchantByEmail(email: string): Promise<Merchant | undefined>;\n  getAllMerchants(): Promise<Merchant[]>;\n  createMerchant(merchant: InsertMerchant): Promise<Merchant>;\n  updateMerchant(id: string, updates: Partial<InsertMerchant>): Promise<Merchant | undefined>;\n  updateMerchantPassword(id: string, newPassword: string): Promise<boolean>;\n  deleteMerchant(id: string): Promise<boolean>;\n  getMerchantsByStatus(status: string): Promise<Merchant[]>;\n  getMerchantsStats(): Promise<{\n    total: number;\n    active: number;\n    pending: number;\n    inactive: number;\n    thisMonth: number;\n  }>;\n\n  // Service methods\n  getService(id: string): Promise<Service | undefined>;\n  getServicesByMerchant(merchantId: string): Promise<Service[]>;\n  getActiveServicesByMerchant(merchantId: string): Promise<Service[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, updates: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n\n  // Employee methods\n  getEmployee(id: string): Promise<Employee | undefined>;\n  getEmployeeByEmail(email: string): Promise<Employee | undefined>;\n  getEmployeesByMerchant(merchantId: string): Promise<Employee[]>;\n  getActiveEmployeesByMerchant(merchantId: string): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, updates: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  updateEmployeePassword(id: string, newPassword: string): Promise<boolean>;\n  deleteEmployee(id: string): Promise<boolean>;\n\n  // Client methods\n  getClient(id: string): Promise<Client | undefined>;\n  getClientByEmail(email: string): Promise<Client | undefined>;\n  getClientsByMerchant(merchantId: string): Promise<Client[]>;\n  getActiveClientsByMerchant(merchantId: string): Promise<Client[]>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, updates: Partial<InsertClient>): Promise<Client | undefined>;\n  updateClientPassword(id: string, newPassword: string): Promise<boolean>;\n  deleteClient(id: string): Promise<boolean>;\n\n  // Appointment methods\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  getAppointmentsByMerchant(merchantId: string): Promise<Appointment[]>;\n  getAppointmentsByDate(merchantId: string, date: string): Promise<Appointment[]>;\n  getAppointmentsByDateRange(merchantId: string, startDate: string, endDate: string): Promise<Appointment[]>;\n  getAppointmentsByEmployee(employeeId: string, date?: string): Promise<Appointment[]>;\n  getClientAppointments(clientId: string, merchantId: string): Promise<Appointment[]>;\n  getClientAppointmentsByDate(clientId: string, merchantId: string, date: string): Promise<Appointment[]>;\n  getClientAppointmentsByDateRange(clientId: string, merchantId: string, startDate: string, endDate: string): Promise<Appointment[]>;\n  getPendingPaymentAppointments(merchantId: string): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n  updateAppointmentStatus(id: string, statusUpdate: AppointmentStatusData): Promise<Appointment | undefined>;\n  rescheduleAppointment(id: string, newDate: string, newTime: string, reason: string): Promise<Appointment | undefined>;\n  cancelAppointment(id: string, reason: string): Promise<Appointment | undefined>;\n  deleteAppointment(id: string): Promise<boolean>;\n  deleteAppointmentsByService(serviceId: string): Promise<number>;\n\n  // Availability and scheduling methods\n  checkEmployeeAvailability(availability: AvailabilityData): Promise<boolean>;\n  getEmployeeAvailableSlots(employeeId: string, date: string, serviceDuration: number): Promise<string[]>;\n  getEmployeeSchedule(employeeId: string): Promise<{ workDays: number[], startTime: string, endTime: string, breakStartTime?: string, breakEndTime?: string }>;\n  updateEmployeeSchedule(employeeId: string, schedule: Partial<{ workDays: string, startTime: string, endTime: string, breakStartTime?: string, breakEndTime?: string }>): Promise<Employee | undefined>;\n  updateEmployeeDayOff(id: string, updates: Partial<{ date: string, reason: string, employeeId: string }>): Promise<{ id: string, date: string, reason: string, employeeId: string } | undefined>;\n\n  // Business rules validation\n  canCancelAppointment(appointmentId: string): Promise<{ canCancel: boolean, reason?: string }>;\n  canRescheduleAppointment(appointmentId: string): Promise<{ canReschedule: boolean, reason?: string }>;\n  markAppointmentAsLate(appointmentId: string): Promise<Appointment | undefined>;\n  markAppointmentAsNoShow(appointmentId: string): Promise<Appointment | undefined>;\n  getMerchantDashboardStats(merchantId: string): Promise<{\n    appointments: {\n      today: number;\n      thisWeek: number;\n      thisMonth: number;\n    };\n    services: {\n      total: number;\n      active: number;\n    };\n  }>;\n  getClientHistoricalAppointments(clientId: string, filter: string): Promise<any[]>;\n\n  // Penalty methods\n  createPenalty(penalty: {\n    merchantId: string;\n    clientId: string | null;\n    appointmentId: string;\n    clientName: string;\n    clientPhone: string;\n    clientEmail: string | null;\n    type: string;\n    amount: number;\n    reason: string;\n    status: string;\n  }): Promise<any>;\n  getPenaltiesByMerchant(merchantId: string): Promise<any[]>;\n  updatePenaltyStatus(id: string, status: string, paidBy: string): Promise<any | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private merchants: Map<string, Merchant>;\n  private services: Map<string, Service>;\n  private employees: Map<string, Employee>;\n  private clients: Map<string, Client>;\n  private appointments: Map<string, Appointment>;\n\n  constructor() {\n    this.users = new Map();\n    this.merchants = new Map();\n    this.services = new Map();\n    this.employees = new Map();\n    this.clients = new Map();\n    this.appointments = new Map();\n    this.initializeAdminUser();\n  }\n\n  private async initializeAdminUser() {\n    const adminEmail = \"leolulu842@gmail.com\";\n    const existingAdmin = Array.from(this.users.values()).find(u => u.email === adminEmail);\n\n    if (!existingAdmin) {\n      const hashedPassword = await bcrypt.hash(\"123456\", 10);\n      const adminUser: User = {\n        id: randomUUID(),\n        email: adminEmail,\n        password: hashedPassword,\n        role: \"admin\",\n        createdAt: new Date(),\n      };\n      this.users.set(adminUser.id, adminUser);\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      password: hashedPassword,\n      role: insertUser.role || \"merchant\",\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUserPassword(id: string, newPassword: string): Promise<boolean> {\n    const user = this.users.get(id);\n    if (!user) return false;\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const updatedUser: User = {\n      ...user,\n      password: hashedPassword,\n    };\n    this.users.set(id, updatedUser);\n    return true;\n  }\n\n  // Merchant methods\n  async getMerchant(id: string): Promise<Merchant | undefined> {\n    return this.merchants.get(id);\n  }\n\n  async getMerchantByEmail(email: string): Promise<Merchant | undefined> {\n    return Array.from(this.merchants.values()).find(merchant => merchant.email === email);\n  }\n\n  async getAllMerchants(): Promise<Merchant[]> {\n    return Array.from(this.merchants.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async createMerchant(insertMerchant: InsertMerchant): Promise<Merchant> {\n    const id = randomUUID();\n    const now = new Date();\n    const merchant: Merchant = {\n      ...insertMerchant,\n      id,\n      status: insertMerchant.status || \"pending\",\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.merchants.set(id, merchant);\n    return merchant;\n  }\n\n  async updateMerchant(id: string, updates: Partial<InsertMerchant>): Promise<Merchant | undefined> {\n    const merchant = this.merchants.get(id);\n    if (!merchant) return undefined;\n\n    const updatedMerchant: Merchant = {\n      ...merchant,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.merchants.set(id, updatedMerchant);\n    return updatedMerchant;\n  }\n\n  async updateMerchantPassword(id: string, newPassword: string): Promise<boolean> {\n    const merchant = this.merchants.get(id);\n    if (!merchant) return false;\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const updatedMerchant: Merchant = {\n      ...merchant,\n      password: hashedPassword,\n      updatedAt: new Date(),\n    };\n    this.merchants.set(id, updatedMerchant);\n    return true;\n  }\n\n  async deleteMerchant(id: string): Promise<boolean> {\n    return this.merchants.delete(id);\n  }\n\n  async getMerchantsByStatus(status: string): Promise<Merchant[]> {\n    return Array.from(this.merchants.values()).filter(merchant => merchant.status === status);\n  }\n\n  async getMerchantsStats(): Promise<{\n    total: number;\n    active: number;\n    pending: number;\n    inactive: number;\n    thisMonth: number;\n  }> {\n    const merchants = Array.from(this.merchants.values());\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n    return {\n      total: merchants.length,\n      active: merchants.filter(m => m.status === \"active\").length,\n      pending: merchants.filter(m => m.status === \"pending\").length,\n      inactive: merchants.filter(m => m.status === \"inactive\").length,\n      thisMonth: merchants.filter(m => new Date(m.createdAt!) >= thisMonth).length,\n    };\n  }\n\n  // Service methods\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async getServicesByMerchant(merchantId: string): Promise<Service[]> {\n    return Array.from(this.services.values()).filter(service => service.merchantId === merchantId);\n  }\n\n  async getActiveServicesByMerchant(merchantId: string): Promise<Service[]> {\n    return Array.from(this.services.values()).filter(service => \n      service.merchantId === merchantId && service.isActive\n    );\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const now = new Date();\n    const service: Service = {\n      ...insertService,\n      id,\n      description: insertService.description || null,\n      isActive: insertService.isActive ?? true,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: string, updates: Partial<InsertService>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n\n    const updatedService: Service = {\n      ...service,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.services.set(id, updatedService);\n    return updatedService;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    return this.services.delete(id);\n  }\n\n  // Employee methods\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async getEmployeeByEmail(email: string): Promise<Employee | undefined> {\n    return Array.from(this.employees.values()).find(employee => employee.email === email);\n  }\n\n  async getEmployeesByMerchant(merchantId: string): Promise<Employee[]> {\n    return Array.from(this.employees.values()).filter(employee => employee.merchantId === merchantId);\n  }\n\n  async getActiveEmployeesByMerchant(merchantId: string): Promise<Employee[]> {\n    return Array.from(this.employees.values()).filter(employee => \n      employee.merchantId === merchantId && employee.isActive\n    );\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const hashedPassword = await bcrypt.hash(insertEmployee.password, 10);\n    const id = randomUUID();\n    const now = new Date();\n    const employee: Employee = {\n      ...insertEmployee,\n      id,\n      password: hashedPassword,\n      role: insertEmployee.role || \"employee\",\n      specialties: insertEmployee.specialties || null,\n      workDays: insertEmployee.workDays || \"[1,2,3,4,5,6]\",\n      startTime: insertEmployee.startTime || \"09:00\",\n      endTime: insertEmployee.endTime || \"18:00\",\n      breakStartTime: insertEmployee.breakStartTime || null,\n      breakEndTime: insertEmployee.breakEndTime || null,\n      isActive: insertEmployee.isActive ?? true,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.employees.set(id, employee);\n    return employee;\n  }\n\n  async updateEmployee(id: string, updates: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const employee = this.employees.get(id);\n    if (!employee) return undefined;\n\n    const processedUpdates = { ...updates };\n    if (processedUpdates.password) {\n      processedUpdates.password = await bcrypt.hash(processedUpdates.password, 10);\n    }\n\n    const updatedEmployee: Employee = {\n      ...employee,\n      ...processedUpdates,\n      updatedAt: new Date(),\n    };\n    this.employees.set(id, updatedEmployee);\n    return updatedEmployee;\n  }\n\n  async updateEmployeePassword(id: string, newPassword: string): Promise<boolean> {\n    const employee = this.employees.get(id);\n    if (!employee) return false;\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const updatedEmployee: Employee = {\n      ...employee,\n      password: hashedPassword,\n      updatedAt: new Date(),\n    };\n    this.employees.set(id, updatedEmployee);\n    return true;\n  }\n\n  async deleteEmployee(id: string): Promise<boolean> {\n    return this.employees.delete(id);\n  }\n\n  // Client methods\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async getClientByEmail(email: string): Promise<Client | undefined> {\n    return Array.from(this.clients.values()).find(client => client.email === email);\n  }\n\n  async getClientsByMerchant(merchantId: string): Promise<Client[]> {\n    return Array.from(this.clients.values()).filter(client => client.merchantId === merchantId);\n  }\n\n  async getActiveClientsByMerchant(merchantId: string): Promise<Client[]> {\n    return Array.from(this.clients.values()).filter(client => \n      client.merchantId === merchantId && client.isActive\n    );\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const hashedPassword = await bcrypt.hash(insertClient.password, 10);\n    const id = randomUUID();\n    const now = new Date();\n    const client: Client = {\n      ...insertClient,\n      id,\n      password: hashedPassword,\n      notes: insertClient.notes || null,\n      isActive: insertClient.isActive ?? true,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.clients.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: string, updates: Partial<InsertClient>): Promise<Client | undefined> {\n    const client = this.clients.get(id);\n    if (!client) return undefined;\n\n    const processedUpdates = { ...updates };\n    if (processedUpdates.password) {\n      processedUpdates.password = await bcrypt.hash(processedUpdates.password, 10);\n    }\n\n    const updatedClient: Client = {\n      ...client,\n      ...processedUpdates,\n      updatedAt: new Date(),\n    };\n    this.clients.set(id, updatedClient);\n    return updatedClient;\n  }\n\n  async updateClientPassword(id: string, newPassword: string): Promise<boolean> {\n    const client = this.clients.get(id);\n    if (!client) return false;\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const updatedClient: Client = {\n      ...client,\n      password: hashedPassword,\n      updatedAt: new Date(),\n    };\n    this.clients.set(id, updatedClient);\n    return true;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    return this.clients.delete(id);\n  }\n\n  // Appointment methods\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async getAppointmentsByMerchant(merchantId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(appointment => appointment.merchantId === merchantId);\n  }\n\n  async getAppointmentsByDate(merchantId: string, date: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values())\n      .filter(appointment => \n        appointment.merchantId === merchantId && appointment.appointmentDate === date\n      )\n      .sort((a, b) => a.appointmentTime.localeCompare(b.appointmentTime));\n  }\n\n  async getAppointmentsByDateRange(merchantId: string, startDate: string, endDate: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values())\n      .filter(appointment => \n        appointment.merchantId === merchantId && \n        appointment.appointmentDate >= startDate && \n        appointment.appointmentDate <= endDate\n      )\n      .sort((a, b) => {\n        const dateCompare = a.appointmentDate.localeCompare(b.appointmentDate);\n        return dateCompare !== 0 ? dateCompare : a.appointmentTime.localeCompare(b.appointmentTime);\n      });\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const now = new Date();\n\n    // Calculate end time based on service duration\n    let endTime = insertAppointment.endTime;\n    if (!endTime && insertAppointment.appointmentTime) {\n      // Get service duration and calculate end time\n      const service = await this.getService(insertAppointment.serviceId);\n      if (service) {\n        const [hours, minutes] = insertAppointment.appointmentTime.split(':').map(Number);\n        const endMinutes = minutes + service.duration;\n        const endHour = hours + Math.floor(endMinutes / 60);\n        const finalMinutes = endMinutes % 60;\n        endTime = `${endHour.toString().padStart(2, '0')}:${finalMinutes.toString().padStart(2, '0')}`;\n      } else {\n        endTime = insertAppointment.appointmentTime; // Fallback\n      }\n    }\n\n    const appointment: Appointment = {\n      ...insertAppointment,\n      id,\n      clientId: insertAppointment.clientId || null,\n      employeeId: insertAppointment.employeeId || null,\n      clientEmail: insertAppointment.clientEmail || null,\n      endTime: endTime || insertAppointment.appointmentTime,\n      status: insertAppointment.status || \"pending\",\n      notes: insertAppointment.notes || null,\n      rescheduleReason: insertAppointment.rescheduleReason || null,\n      cancelReason: insertAppointment.cancelReason || null,\n      cancelPolicy: insertAppointment.cancelPolicy || \"24h\",\n      reminderSent: insertAppointment.reminderSent || false,\n      arrivalTime: insertAppointment.arrivalTime || null,\n      completedAt: insertAppointment.completedAt || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.appointments.set(id, appointment);\n    return appointment;\n  }\n\n  async updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...appointment,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async deleteAppointment(id: string): Promise<boolean> {\n    return this.appointments.delete(id);\n  }\n\n  async deleteAppointmentsByService(serviceId: string): Promise<number> {\n    const appointmentsToDelete = Array.from(this.appointments.values())\n      .filter(appointment => appointment.serviceId === serviceId);\n\n    let deletedCount = 0;\n    for (const appointment of appointmentsToDelete) {\n      if (this.appointments.delete(appointment.id)) {\n        deletedCount++;\n      }\n    }\n    return deletedCount;\n  }\n\n  async getMerchantDashboardStats(merchantId: string): Promise<{\n    appointments: {\n      today: number;\n      thisWeek: number;\n      thisMonth: number;\n    };\n    services: {\n      total: number;\n      active: number;\n    };\n  }> {\n    const now = new Date();\n    const today = now.toISOString().split('T')[0];\n    const thisWeekStart = new Date(now);\n    thisWeekStart.setDate(now.getDate() - now.getDay());\n    const thisWeek = thisWeekStart.toISOString().split('T')[0];\n    const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    const thisMonth = thisMonthStart.toISOString().split('T')[0];\n\n    const merchantAppointments = await this.getAppointmentsByMerchant(merchantId);\n    const merchantServices = await this.getServicesByMerchant(merchantId);\n\n    return {\n      appointments: {\n        today: merchantAppointments.filter(a => a.appointmentDate === today).length,\n        thisWeek: merchantAppointments.filter(a => a.appointmentDate >= thisWeek).length,\n        thisMonth: merchantAppointments.filter(a => a.appointmentDate >= thisMonth).length,\n      },\n      services: {\n        total: merchantServices.length,\n        active: merchantServices.filter(s => s.isActive).length,\n      },\n    };\n  }\n\n  // Missing appointment methods implementation\n  async getAppointmentsByEmployee(employeeId: string, date?: string): Promise<Appointment[]> {\n    let appointments = Array.from(this.appointments.values())\n      .filter(appointment => appointment.employeeId === employeeId);\n\n    if (date) {\n      appointments = appointments.filter(appointment => appointment.appointmentDate === date);\n    }\n\n    return appointments.sort((a, b) => {\n      const dateCompare = a.appointmentDate.localeCompare(b.appointmentDate);\n      return dateCompare !== 0 ? dateCompare : a.appointmentTime.localeCompare(b.appointmentTime);\n    });\n  }\n\n  async getClientAppointments(clientId: string, merchantId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values())\n      .filter(appointment => \n        appointment.clientId === clientId && appointment.merchantId === merchantId\n      )\n      .sort((a, b) => {\n        const dateCompare = a.appointmentDate.localeCompare(b.appointmentDate);\n        return dateCompare !== 0 ? dateCompare : a.appointmentTime.localeCompare(b.appointmentTime);\n      });\n  }\n\n  async getClientAppointmentsByDate(clientId: string, merchantId: string, date: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values())\n      .filter(appointment => \n        appointment.clientId === clientId && \n        appointment.merchantId === merchantId && \n        appointment.appointmentDate === date\n      )\n      .sort((a, b) => a.appointmentTime.localeCompare(b.appointmentTime));\n  }\n\n  async getClientAppointmentsByDateRange(clientId: string, merchantId: string, startDate: string, endDate: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values())\n      .filter(appointment => \n        appointment.clientId === clientId && \n        appointment.merchantId === merchantId && \n        appointment.appointmentDate >= startDate && \n        appointment.appointmentDate <= endDate\n      )\n      .sort((a, b) => {\n        const dateCompare = a.appointmentDate.localeCompare(b.appointmentDate);\n        return dateCompare !== 0 ? dateCompare : a.appointmentTime.localeCompare(b.appointmentTime);\n      });\n  }\n\n  async getPendingPaymentAppointments(merchantId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values())\n      .filter(appointment => \n        appointment.merchantId === merchantId && \n        appointment.status === \"completed\" && \n        appointment.paymentStatus === \"pending\"\n      )\n      .sort((a, b) => {\n        const dateCompare = b.appointmentDate.localeCompare(a.appointmentDate); // Most recent first\n        return dateCompare !== 0 ? dateCompare : b.appointmentTime.localeCompare(a.appointmentTime);\n      });\n  }\n\n  async updateAppointmentStatus(id: string, statusUpdate: AppointmentStatusData): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...appointment,\n      status: statusUpdate.status,\n      cancelReason: statusUpdate.cancelReason || appointment.cancelReason,\n      rescheduleReason: statusUpdate.rescheduleReason || appointment.rescheduleReason,\n      arrivalTime: statusUpdate.arrivalTime || appointment.arrivalTime,\n      updatedAt: new Date(),\n    };\n\n    // If status is completed, set completedAt and initialize payment status\n    if (statusUpdate.status === \"completed\") {\n      updatedAppointment.completedAt = new Date();\n      updatedAppointment.paymentStatus = statusUpdate.paymentStatus || \"pending\";\n    }\n\n    // Update payment status if provided\n    if (statusUpdate.paymentStatus) {\n      updatedAppointment.paymentStatus = statusUpdate.paymentStatus;\n      if (statusUpdate.paymentStatus === \"paid\") {\n        updatedAppointment.paidAt = new Date();\n      }\n    }\n\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async rescheduleAppointment(id: string, newDate: string, newTime: string, reason: string): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n\n    // Check if appointment can be rescheduled\n    const canReschedule = await this.canRescheduleAppointment(id);\n    if (!canReschedule.canReschedule) {\n      throw new Error(canReschedule.reason || \"Appointment cannot be rescheduled\");\n    }\n\n    // Calculate new end time based on service duration\n    const service = await this.getService(appointment.serviceId);\n    let newEndTime = newTime;\n    if (service) {\n      const [hours, minutes] = newTime.split(':').map(Number);\n      const endMinutes = minutes + service.duration;\n      const endHour = hours + Math.floor(endMinutes / 60);\n      const finalMinutes = endMinutes % 60;\n      newEndTime = `${endHour.toString().padStart(2, '0')}:${finalMinutes.toString().padStart(2, '0')}`;\n    }\n\n    // Check availability for new time slot\n    if (appointment.employeeId) {\n      const availability = {\n        employeeId: appointment.employeeId,\n        date: newDate,\n        startTime: newTime,\n        duration: service?.duration || 60\n      };\n\n      const isAvailable = await this.checkEmployeeAvailability(availability);\n      if (!isAvailable) {\n        throw new Error(\"Employee is not available for the new time slot\");\n      }\n    }\n\n    const updatedAppointment: Appointment = {\n      ...appointment,\n      appointmentDate: newDate,\n      appointmentTime: newTime,\n      endTime: newEndTime,\n      rescheduleReason: reason,\n      status: \"pending\", // Reset to pending after reschedule\n      updatedAt: new Date(),\n    };\n\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async cancelAppointment(id: string, reason: string): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n\n    // Check if appointment can be cancelled\n    const canCancel = await this.canCancelAppointment(id);\n    if (!canCancel.canCancel) {\n      throw new Error(canCancel.reason || \"Appointment cannot be cancelled\");\n    }\n\n    const updatedAppointment: Appointment = {\n      ...appointment,\n      status: \"cancelled\",\n      cancelReason: reason,\n      updatedAt: new Date(),\n    };\n\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async checkEmployeeAvailability(availability: AvailabilityData): Promise<boolean> {\n    const employee = await this.getEmployee(availability.employeeId);\n    if (!employee || !employee.isActive) return false;\n\n    // Check if employee works on this day\n    const workDays = JSON.parse(employee.workDays);\n    const requestDate = new Date(availability.date);\n    const dayOfWeek = requestDate.getDay();\n\n    if (!workDays.includes(dayOfWeek)) return false;\n\n    // Check if time is within working hours\n    const requestStartTime = availability.startTime;\n    const [startHour, startMinute] = requestStartTime.split(':').map(Number);\n    const requestEndMinute = startMinute + availability.duration;\n    const requestEndHour = startHour + Math.floor(requestEndMinute / 60);\n    const finalEndMinute = requestEndMinute % 60;\n    const requestEndTime = `${requestEndHour.toString().padStart(2, '0')}:${finalEndMinute.toString().padStart(2, '0')}`;\n\n    if (requestStartTime < employee.startTime || requestEndTime > employee.endTime) {\n      return false;\n    }\n\n    // Check if time conflicts with break time\n    if (employee.breakStartTime && employee.breakEndTime) {\n      if (!(requestEndTime <= employee.breakStartTime || requestStartTime >= employee.breakEndTime)) {\n        return false;\n      }\n    }\n\n    // Check for existing appointments conflicts\n    const existingAppointments = await this.getAppointmentsByEmployee(availability.employeeId, availability.date);\n    for (const apt of existingAppointments) {\n      if (apt.status === \"cancelled\" || apt.status === \"completed\" || apt.status === \"no_show\") continue;\n\n      // Check for time overlap\n      if (!(requestEndTime <= apt.appointmentTime || requestStartTime >= apt.endTime)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  async getEmployeeAvailableSlots(employeeId: string, date: string, serviceDuration: number): Promise<string[]> {\n    const employee = await this.getEmployee(employeeId);\n    if (!employee || !employee.isActive) return [];\n\n    // Check if employee works on this day\n    const workDays = JSON.parse(employee.workDays);\n    const requestDate = new Date(date);\n    const dayOfWeek = requestDate.getDay();\n\n    if (!workDays.includes(dayOfWeek)) return [];\n\n    const slots: string[] = [];\n    const startTime = employee.startTime;\n    const endTime = employee.endTime;\n    const [startHour, startMinute] = startTime.split(':').map(Number);\n    const [endHour, endMinute] = endTime.split(':').map(Number);\n\n    let currentHour = startHour;\n    let currentMinute = startMinute;\n\n    while (currentHour < endHour || (currentHour === endHour && currentMinute <= endMinute - serviceDuration)) {\n      const currentTime = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;\n\n      // Check availability for this slot\n      const availability = {\n        employeeId,\n        date,\n        startTime: currentTime,\n        duration: serviceDuration\n      };\n\n      const isAvailable = await this.checkEmployeeAvailability(availability);\n      if (isAvailable) {\n        slots.push(currentTime);\n      }\n\n      // Move to next 30-minute slot\n      currentMinute += 30;\n      if (currentMinute >= 60) {\n        currentMinute = 0;\n        currentHour++;\n      }\n    }\n\n    return slots;\n  }\n\n  async getEmployeeSchedule(employeeId: string): Promise<{ workDays: number[], startTime: string, endTime: string, breakStartTime?: string, breakEndTime?: string }> {\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) {\n      throw new Error(\"Employee not found\");\n    }\n\n    return {\n      workDays: JSON.parse(employee.workDays),\n      startTime: employee.startTime,\n      endTime: employee.endTime,\n      breakStartTime: employee.breakStartTime || undefined,\n      breakEndTime: employee.breakEndTime || undefined,\n    };\n  }\n\n  async updateEmployeeSchedule(employeeId: string, schedule: Partial<{ workDays: string, startTime: string, endTime: string, breakStartTime?: string, breakEndTime?: string }>): Promise<Employee | undefined> {\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) return undefined;\n\n    const updatedEmployee: Employee = {\n      ...employee,\n      ...schedule,\n      updatedAt: new Date(),\n    };\n\n    this.employees.set(employeeId, updatedEmployee);\n    return updatedEmployee;\n  }\n\n  async canCancelAppointment(appointmentId: string): Promise<{ canCancel: boolean, reason?: string }> {\n    const appointment = await this.getAppointment(appointmentId);\n    if (!appointment) {\n      return { canCancel: false, reason: \"Appointment not found\" };\n    }\n\n    if (appointment.status === \"cancelled\") {\n      return { canCancel: false, reason: \"Appointment is already cancelled\" };\n    }\n\n    if (appointment.status === \"completed\") {\n      return { canCancel: false, reason: \"Cannot cancel a completed appointment\" };\n    }\n\n    // Check cancellation policy\n    const now = new Date();\n    const appointmentDateTime = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const timeDiff = appointmentDateTime.getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 60 * 60);\n\n    switch (appointment.cancelPolicy) {\n      case \"24h\":\n        if (hoursDiff < 24) {\n          return { canCancel: false, reason: \"Cannot cancel within 24 hours of appointment\" };\n        }\n        break;\n      case \"12h\":\n        if (hoursDiff < 12) {\n          return { canCancel: false, reason: \"Cannot cancel within 12 hours of appointment\" };\n        }\n        break;\n      case \"2h\":\n        if (hoursDiff < 2) {\n          return { canCancel: false, reason: \"Cannot cancel within 2 hours of appointment\" };\n        }\n        break;\n      case \"none\":\n        // No restriction\n        break;\n    }\n\n    return { canCancel: true };\n  }\n\n  async canRescheduleAppointment(appointmentId: string, userRole?: string): Promise<{ canReschedule: boolean, reason?: string }> {\n    const appointment = await this.getAppointment(appointmentId);\n    if (!appointment) {\n      return { canReschedule: false, reason: \"Appointment not found\" };\n    }\n\n    if (appointment.status === \"cancelled\") {\n      return { canReschedule: false, reason: \"Cannot reschedule a cancelled appointment\" };\n    }\n\n    if (appointment.status === \"completed\") {\n      return { canReschedule: false, reason: \"Cannot reschedule a completed appointment\" };\n    }\n\n    // Funcionários e merchants podem reagendar a qualquer momento\n    if (userRole === \"employee\" || userRole === \"merchant\") {\n      return { canReschedule: true };\n    }\n\n    // Para clientes, aplicar a política de cancelamento (24h mínimo)\n    const now = new Date();\n    const appointmentDateTime = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const timeDiff = appointmentDateTime.getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 60 * 60);\n\n    switch (appointment.cancelPolicy) {\n      case \"24h\":\n        if (hoursDiff < 24) {\n          return { canReschedule: false, reason: \"Cannot reschedule within 24 hours of appointment\" };\n        }\n        break;\n      case \"12h\":\n        if (hoursDiff < 12) {\n          return { canReschedule: false, reason: \"Cannot reschedule within 12 hours of appointment\" };\n        }\n        break;\n      case \"2h\":\n        if (hoursDiff < 2) {\n          return { canReschedule: false, reason: \"Cannot reschedule within 2 hours of appointment\" };\n        }\n        break;\n      case \"none\":\n        // No restriction\n        break;\n    }\n\n    return { canReschedule: true };\n  }\n\n  async markAppointmentAsLate(appointmentId: string): Promise<Appointment | undefined> {\n    const appointment = await this.getAppointment(appointmentId);\n    if (!appointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...appointment,\n      status: \"late\",\n      updatedAt: new Date(),\n    };\n\n    this.appointments.set(appointmentId, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async markAppointmentAsNoShow(appointmentId: string): Promise<Appointment | undefined> {\n    const appointment = await this.getAppointment(appointmentId);\n    if (!appointment) return undefined;\n\n    const updatedAppointment: Appointment = {\n      ...appointment,\n      status: \"no_show\",\n      updatedAt: new Date(),\n    };\n\n    this.appointments.set(appointmentId, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async getClientHistoricalAppointments(clientId: string, filter: string): Promise<any[]> {\n    // This method seems to be part of a different implementation (e.g., SQLiteStorage)\n    // and is not fully implemented in MemStorage. \n    // For the purpose of this task, we'll leave it as a placeholder or throw an error.\n    throw new Error(\"getClientHistoricalAppointments not implemented in MemStorage\");\n  }\n\n  async updateEmployeeDayOff(id: string, updates: Partial<{ date: string, reason: string, employeeId: string }>): Promise<{ id: string, date: string, reason: string, employeeId: string } | undefined> {\n    // This method is not implemented in MemStorage as it relies on a database schema not present here.\n    // In a real scenario, this would involve querying and updating a 'employeeDaysOff' table.\n    console.warn(\"updateEmployeeDayOff called on MemStorage, which does not support this functionality.\");\n    return undefined;\n  }\n}\n\nimport { SQLiteStorage } from \"./sqlite-storage\";\n\nexport const storage = new SQLiteStorage();","size_bytes":38178},"server/vite.ts":{"content":"import express, { type Express, type Request, type Response, type NextFunction } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config.js\";\nimport { nanoid } from \"nanoid\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    host: '0.0.0.0',\n    allowedHosts: true,\n  } as const;\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg: string, options?: any) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n\n  app.use(\"*\", async (req: Request, res: Response, next: NextFunction) => {\n    // Only handle GET requests for frontend routes\n    if (req.method !== 'GET') {\n      return next();\n    }\n\n    // Skip API and uploads routes \n    if (req.path.startsWith('/api') || req.path.startsWith('/uploads')) {\n      return next();\n    }\n\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \n        \"Content-Type\": \"text/html\",\n        \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n        \"Pragma\": \"no-cache\",\n        \"Expires\": \"0\"\n      }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req: Request, res: Response) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2867},"shared/schema-postgres.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const merchants = pgTable(\"merchants\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  ownerName: text(\"owner_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, active, inactive, payment_pending\n  logoUrl: text(\"logo_url\"), // URL for the salon logo\n  isOpen: boolean(\"is_open\").notNull().default(true), // Open/closed status\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"), // JSON array of days (0=Sunday, 1=Monday, etc.)\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"18:00\"), // HH:MM format\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"), // Optional lunch break\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"), // Optional lunch break\n  // Access control fields\n  accessStartDate: timestamp(\"access_start_date\"), // When access was granted\n  accessEndDate: timestamp(\"access_end_date\"), // When access expires\n  accessDurationDays: integer(\"access_duration_days\").default(30), // Duration in days (default 30 days)\n  lastPaymentDate: timestamp(\"last_payment_date\"), // Last payment date\n  nextPaymentDue: timestamp(\"next_payment_due\"), // Next payment due date\n  monthlyFee: integer(\"monthly_fee\").default(5000), // Monthly fee in cents (default R$ 50.00)\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, overdue, trial\n  // Plan management\n  planStatus: text(\"plan_status\").notNull().default(\"free\"), // free, vip\n  planValidity: timestamp(\"plan_validity\"), // When the current plan expires\n  // Booking policies\n  noShowFeeEnabled: boolean(\"no_show_fee_enabled\").notNull().default(false), // Enable/disable no-show fee\n  noShowFeeAmount: integer(\"no_show_fee_amount\").default(0), // Fee amount in cents for no-show\n  lateFeeEnabled: boolean(\"late_fee_enabled\").notNull().default(false), // Enable/disable late fee\n  lateFeeAmount: integer(\"late_fee_amount\").default(0), // Fee amount in cents for being late\n  lateToleranceMinutes: integer(\"late_tolerance_minutes\").default(15), // Minutes of tolerance before considering late\n  cancellationPolicyHours: integer(\"cancellation_policy_hours\").default(24), // Hours required for free cancellation\n  cancellationFeeEnabled: boolean(\"cancellation_fee_enabled\").notNull().default(false), // Enable/disable cancellation fee\n  cancellationFeeAmount: integer(\"cancellation_fee_amount\").default(0), // Fee amount in cents for late cancellation\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // price in cents\n  duration: integer(\"duration\").notNull(), // duration in minutes\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const employees = pgTable(\"employees\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  role: text(\"role\").notNull().default(\"employee\"), // employee, manager\n  specialties: text(\"specialties\"), // JSON array of service IDs they can perform\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"), // JSON array of days (0=Sunday, 1=Monday, etc.)\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"18:00\"), // HH:MM format\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"), // Optional lunch break\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"), // Optional lunch break\n  paymentType: text(\"payment_type\").notNull().default(\"monthly\"), // monthly, weekly, daily, percentage\n  paymentValue: integer(\"payment_value\").notNull().default(0), // value in cents for fixed payments or percentage * 100 for percentage\n  extendedEndTime: text(\"extended_end_time\"), // Temporary extended end time for current day\n  overtimeHours: integer(\"overtime_hours\").default(0), // Total accumulated overtime in minutes\n  lastOvertimeDate: text(\"last_overtime_date\"), // Last date when overtime was recorded\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  notes: text(\"notes\"), // client notes/preferences\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  serviceId: text(\"service_id\").notNull().references(() => services.id, { onDelete: \"cascade\" }),\n  clientId: text(\"client_id\").references(() => clients.id), // Optional - for registered clients\n  employeeId: text(\"employee_id\").references(() => employees.id), // Who performs the service\n  clientName: text(\"client_name\").notNull(), // For walk-ins or non-registered clients\n  clientPhone: text(\"client_phone\").notNull(),\n  clientEmail: text(\"client_email\"),\n  appointmentDate: text(\"appointment_date\").notNull(), // YYYY-MM-DD format\n  appointmentTime: text(\"appointment_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format - calculated from start + service duration\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, in_progress, completed, cancelled, no_show, late, rescheduled\n  notes: text(\"notes\"),\n  rescheduleReason: text(\"reschedule_reason\"), // Reason for rescheduling\n  cancelReason: text(\"cancel_reason\"), // Reason for cancellation\n  cancelPolicy: text(\"cancel_policy\").notNull().default(\"24h\"), // 24h, 12h, 2h, none\n  reminderSent: boolean(\"reminder_sent\").notNull().default(false),\n  arrivalTime: text(\"arrival_time\"), // When client actually arrived (HH:MM)\n  completedAt: timestamp(\"completed_at\"), // When service was completed\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid - for completed appointments\n  paidAt: timestamp(\"paid_at\"), // When payment was marked as paid\n  actualStartTime: text(\"actual_start_time\"), // When service actually started (HH:MM)\n  actualEndTime: text(\"actual_end_time\"), // When service actually ended (HH:MM)\n  newDate: text(\"new_date\"), // New date when rescheduled (YYYY-MM-DD format)\n  newTime: text(\"new_time\"), // New time when rescheduled (HH:MM format)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Penalties table for tracking cancellation fees and other penalties\nexport const penalties = pgTable(\"penalties\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  clientId: text(\"client_id\").references(() => clients.id),\n  appointmentId: text(\"appointment_id\").references(() => appointments.id),\n  clientName: text(\"client_name\").notNull(),\n  clientPhone: text(\"client_phone\").notNull(),\n  clientEmail: text(\"client_email\"),\n  type: text(\"type\").notNull(), // \"cancellation\", \"no_show\", \"late\"\n  amount: integer(\"amount\").notNull(), // Amount in cents\n  reason: text(\"reason\").notNull(), // Description of penalty\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"paid\", \"waived\"\n  paidAt: timestamp(\"paid_at\"), // When penalty was marked as paid\n  paidBy: text(\"paid_by\"), // Who marked as paid (user ID)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const promotions = pgTable(\"promotions\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  serviceId: text(\"service_id\").notNull().references(() => services.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  discountType: text(\"discount_type\").notNull().default(\"percentage\"), // \"percentage\", \"fixed\"\n  discountValue: integer(\"discount_value\").notNull(), // Percentage (1-99) or fixed amount in cents\n  startDate: text(\"start_date\").notNull(), // YYYY-MM-DD format\n  endDate: text(\"end_date\").notNull(), // YYYY-MM-DD format\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const employeeDaysOff = pgTable(\"employee_days_off\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  employeeId: text(\"employee_id\").notNull().references(() => employees.id, { onDelete: \"cascade\" }),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  reason: text(\"reason\"), // Optional reason for the day off\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMerchantSchema = createInsertSchema(merchants).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  planStatus: z.enum([\"free\", \"vip\"]).default(\"free\").optional(),\n  planValidity: z.date().optional().nullable(),\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const employeePaymentSchema = insertEmployeeSchema.extend({\n  paymentType: z.enum([\"monthly\", \"weekly\", \"daily\", \"percentage\"]).default(\"monthly\"),\n  paymentValue: z.number().min(0, \"Valor de pagamento deve ser maior ou igual a zero\"),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPenaltySchema = createInsertSchema(penalties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeDayOffSchema = createInsertSchema(employeeDaysOff).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPromotionSchema = createInsertSchema(promotions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Schema for merchant access management\nexport const merchantAccessSchema = z.object({\n  accessDurationDays: z.number().min(1, \"Duração deve ser pelo menos 1 dia\").max(365, \"Duração máxima é 365 dias\"),\n  monthlyFee: z.number().min(0, \"Taxa mensal deve ser maior ou igual a zero\"),\n  paymentStatus: z.enum([\"pending\", \"paid\", \"overdue\", \"trial\"], {\n    invalid_type_error: \"Status de pagamento inválido\"\n  }),\n  planStatus: z.enum([\"free\", \"vip\"]).default(\"free\").optional(),\n  planValidity: z.date().optional().nullable(),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(1, \"Senha é obrigatória\"),\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Senha atual é obrigatória\"),\n  newPassword: z.string().min(6, \"Nova senha deve ter pelo menos 6 caracteres\"),\n  confirmPassword: z.string().min(1, \"Confirmação de senha é obrigatória\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Nova senha e confirmação devem ser iguais\",\n  path: [\"confirmPassword\"],\n});\n\nexport const serviceSchema = insertServiceSchema.extend({\n  name: z.string().min(1, \"Nome do serviço é obrigatório\"),\n  price: z.number().min(0, \"Preço deve ser maior ou igual a zero\"),\n  duration: z.number().min(15, \"Duração mínima é 15 minutos\"),\n});\n\nexport const appointmentSchema = insertAppointmentSchema.extend({\n  clientName: z.string().min(1, \"Nome do cliente é obrigatório\"),\n  clientPhone: z.string().min(10, \"Telefone deve ter pelo menos 10 dígitos\"),\n  clientEmail: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n  appointmentDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data deve estar no formato YYYY-MM-DD\"),\n  appointmentTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim deve estar no formato HH:MM\"),\n  status: z.enum([\"pending\", \"scheduled\", \"confirmed\", \"in_progress\", \"completed\", \"cancelled\", \"late\", \"no_show\", \"rescheduled\"]).default(\"pending\"),\n  notes: z.string().optional(),\n  rescheduleReason: z.string().optional(),\n  newDate: z.string().optional(),\n  newTime: z.string().optional(),\n  cancelReason: z.string().optional(),\n  cancelPolicy: z.string().default(\"24h\"),\n  reminderSent: z.boolean().default(false),\n  arrivalTime: z.string().optional(),\n  completedAt: z.string().optional(),\n  actualStartTime: z.string().optional(),\n  actualEndTime: z.string().optional(),\n});\n\n// Schema for employee working hours\nexport const employeeScheduleSchema = insertEmployeeSchema.extend({\n  workDays: z.string().refine((val) => {\n    try {\n      const days = JSON.parse(val);\n      return Array.isArray(days) && days.every(d => d >= 0 && d <= 6);\n    } catch {\n      return false;\n    }\n  }, \"Dias de trabalho devem ser um array de números de 0-6\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim deve estar no formato HH:MM\"),\n  breakStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início do intervalo deve estar no formato HH:MM\").optional(),\n  breakEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim do intervalo deve estar no formato HH:MM\").optional(),\n});\n\n// Schema for merchant working hours\nexport const merchantScheduleSchema = insertMerchantSchema.extend({\n  workDays: z.string().refine((val) => {\n    try {\n      const days = JSON.parse(val);\n      return Array.isArray(days) && days.every(d => d >= 0 && d <= 6);\n    } catch {\n      return false;\n    }\n  }, \"Dias de funcionamento devem ser um array de números de 0-6\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de abertura deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fechamento deve estar no formato HH:MM\"),\n  breakStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início do intervalo deve estar no formato HH:MM\").optional(),\n  breakEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim do intervalo deve estar no formato HH:MM\").optional(),\n});\n\n// Schema for merchant booking policies\nexport const merchantPoliciesSchema = insertMerchantSchema.extend({\n  noShowFeeEnabled: z.boolean().default(false),\n  noShowFeeAmount: z.number().min(0, \"Taxa de não comparecimento deve ser maior ou igual a zero\"),\n  lateFeeEnabled: z.boolean().default(false),\n  lateFeeAmount: z.number().min(0, \"Taxa de atraso deve ser maior ou igual a zero\"),\n  lateToleranceMinutes: z.number().min(0, \"Tolerância de atraso deve ser maior ou igual a zero\"),\n  cancellationPolicyHours: z.number().min(0, \"Política de cancelamento deve ser maior ou igual a zero\"),\n  cancellationFeeEnabled: z.boolean().default(false),\n  cancellationFeeAmount: z.number().min(0, \"Taxa de cancelamento deve ser maior ou igual a zero\"),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Merchant = typeof merchants.$inferSelect;\nexport type NewMerchant = typeof merchants.$inferInsert;\nexport type Service = typeof services.$inferSelect;\nexport type NewService = typeof services.$inferInsert;\nexport type Employee = typeof employees.$inferSelect;\nexport type NewEmployee = typeof employees.$inferInsert;\nexport type Client = typeof clients.$inferSelect;\nexport type NewClient = typeof clients.$inferInsert;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type NewAppointment = typeof appointments.$inferInsert;\nexport type Penalty = typeof penalties.$inferSelect;\nexport type NewPenalty = typeof penalties.$inferInsert;\nexport type Promotion = typeof promotions.$inferSelect;\nexport type NewPromotion = typeof promotions.$inferInsert;\nexport type EmployeeDayOff = typeof employeeDaysOff.$inferSelect;\nexport type NewEmployeeDayOff = typeof employeeDaysOff.$inferInsert;\n\n","size_bytes":17900},"shared/schema-sqlite-backup.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const merchants = sqliteTable(\"merchants\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  ownerName: text(\"owner_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, active, inactive, payment_pending\n  logoUrl: text(\"logo_url\"), // URL for the salon logo\n  isOpen: integer(\"is_open\", { mode: \"boolean\" }).notNull().default(true), // Open/closed status\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"), // JSON array of days (0=Sunday, 1=Monday, etc.)\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"18:00\"), // HH:MM format\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"), // Optional lunch break\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"), // Optional lunch break\n  // Access control fields\n  accessStartDate: integer(\"access_start_date\", { mode: \"timestamp\" }), // When access was granted\n  accessEndDate: integer(\"access_end_date\", { mode: \"timestamp\" }), // When access expires\n  accessDurationDays: integer(\"access_duration_days\").default(30), // Duration in days (default 30 days)\n  lastPaymentDate: integer(\"last_payment_date\", { mode: \"timestamp\" }), // Last payment date\n  nextPaymentDue: integer(\"next_payment_due\", { mode: \"timestamp\" }), // Next payment due date\n  monthlyFee: integer(\"monthly_fee\").default(5000), // Monthly fee in cents (default R$ 50.00)\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, overdue\n  // Booking policies\n  noShowFeeEnabled: integer(\"no_show_fee_enabled\", { mode: \"boolean\" }).notNull().default(false), // Enable/disable no-show fee\n  noShowFeeAmount: integer(\"no_show_fee_amount\").default(0), // Fee amount in cents for no-show\n  lateFeeEnabled: integer(\"late_fee_enabled\", { mode: \"boolean\" }).notNull().default(false), // Enable/disable late fee\n  lateFeeAmount: integer(\"late_fee_amount\").default(0), // Fee amount in cents for being late\n  lateToleranceMinutes: integer(\"late_tolerance_minutes\").default(15), // Minutes of tolerance before considering late\n  cancellationPolicyHours: integer(\"cancellation_policy_hours\").default(24), // Hours required for free cancellation\n  cancellationFeeEnabled: integer(\"cancellation_fee_enabled\", { mode: \"boolean\" }).notNull().default(false), // Enable/disable cancellation fee\n  cancellationFeeAmount: integer(\"cancellation_fee_amount\").default(0), // Fee amount in cents for late cancellation\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const services = sqliteTable(\"services\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // price in cents\n  duration: integer(\"duration\").notNull(), // duration in minutes\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const employees = sqliteTable(\"employees\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  role: text(\"role\").notNull().default(\"employee\"), // employee, manager\n  specialties: text(\"specialties\"), // JSON array of service IDs they can perform\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"), // JSON array of days (0=Sunday, 1=Monday, etc.)\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"18:00\"), // HH:MM format\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"), // Optional lunch break\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"), // Optional lunch break\n  paymentType: text(\"payment_type\").notNull().default(\"monthly\"), // monthly, weekly, daily, percentage\n  paymentValue: integer(\"payment_value\").notNull().default(0), // value in cents for fixed payments or percentage * 100 for percentage\n  extendedEndTime: text(\"extended_end_time\"), // Temporary extended end time for current day\n  overtimeHours: integer(\"overtime_hours\").default(0), // Total accumulated overtime in minutes\n  lastOvertimeDate: text(\"last_overtime_date\"), // Last date when overtime was recorded\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const clients = sqliteTable(\"clients\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  notes: text(\"notes\"), // client notes/preferences\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const appointments = sqliteTable(\"appointments\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  serviceId: text(\"service_id\").notNull().references(() => services.id, { onDelete: \"cascade\" }),\n  clientId: text(\"client_id\").references(() => clients.id), // Optional - for registered clients\n  employeeId: text(\"employee_id\").references(() => employees.id), // Who performs the service\n  clientName: text(\"client_name\").notNull(), // For walk-ins or non-registered clients\n  clientPhone: text(\"client_phone\").notNull(),\n  clientEmail: text(\"client_email\"),\n  appointmentDate: text(\"appointment_date\").notNull(), // YYYY-MM-DD format\n  appointmentTime: text(\"appointment_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format - calculated from start + service duration\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, in_progress, completed, cancelled, no_show, late, rescheduled\n  notes: text(\"notes\"),\n  rescheduleReason: text(\"reschedule_reason\"), // Reason for rescheduling\n  cancelReason: text(\"cancel_reason\"), // Reason for cancellation\n  cancelPolicy: text(\"cancel_policy\").notNull().default(\"24h\"), // 24h, 12h, 2h, none\n  reminderSent: integer(\"reminder_sent\", { mode: \"boolean\" }).notNull().default(false),\n  arrivalTime: text(\"arrival_time\"), // When client actually arrived (HH:MM)\n  completedAt: integer(\"completed_at\", { mode: \"timestamp\" }), // When service was completed\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid - for completed appointments\n  paidAt: integer(\"paid_at\", { mode: \"timestamp\" }), // When payment was marked as paid\n  actualStartTime: text(\"actual_start_time\"), // When service actually started (HH:MM)\n  actualEndTime: text(\"actual_end_time\"), // When service actually ended (HH:MM)\n  newDate: text(\"new_date\"), // New date when rescheduled (YYYY-MM-DD format)\n  newTime: text(\"new_time\"), // New time when rescheduled (HH:MM format)\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\n// Penalties table for tracking cancellation fees and other penalties\nexport const penalties = sqliteTable(\"penalties\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  clientId: text(\"client_id\").references(() => clients.id),\n  appointmentId: text(\"appointment_id\").references(() => appointments.id),\n  clientName: text(\"client_name\").notNull(),\n  clientPhone: text(\"client_phone\").notNull(),\n  clientEmail: text(\"client_email\"),\n  type: text(\"type\").notNull(), // \"cancellation\", \"no_show\", \"late\"\n  amount: integer(\"amount\").notNull(), // Amount in cents\n  reason: text(\"reason\").notNull(), // Description of penalty\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"paid\", \"waived\"\n  paidAt: integer(\"paid_at\", { mode: \"timestamp\" }), // When penalty was marked as paid\n  paidBy: text(\"paid_by\"), // Who marked as paid (user ID)\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const promotions = sqliteTable(\"promotions\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  serviceId: text(\"service_id\").notNull().references(() => services.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  discountType: text(\"discount_type\").notNull().default(\"percentage\"), // \"percentage\", \"fixed\"\n  discountValue: integer(\"discount_value\").notNull(), // Percentage (1-99) or fixed amount in cents\n  startDate: text(\"start_date\").notNull(), // YYYY-MM-DD format\n  endDate: text(\"end_date\").notNull(), // YYYY-MM-DD format\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const employeeDaysOff = sqliteTable(\"employee_days_off\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  employeeId: text(\"employee_id\").notNull().references(() => employees.id, { onDelete: \"cascade\" }),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  reason: text(\"reason\"), // Optional reason for the day off\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMerchantSchema = createInsertSchema(merchants).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const employeePaymentSchema = insertEmployeeSchema.extend({\n  paymentType: z.enum([\"monthly\", \"weekly\", \"daily\", \"percentage\"]).default(\"monthly\"),\n  paymentValue: z.number().min(0, \"Valor de pagamento deve ser maior ou igual a zero\"),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPenaltySchema = createInsertSchema(penalties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeDayOffSchema = createInsertSchema(employeeDaysOff).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPromotionSchema = createInsertSchema(promotions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Schema for merchant access management\nexport const merchantAccessSchema = z.object({\n  accessDurationDays: z.number().min(1, \"Duração deve ser pelo menos 1 dia\").max(365, \"Duração máxima é 365 dias\"),\n  monthlyFee: z.number().min(0, \"Taxa mensal deve ser maior ou igual a zero\"),\n  paymentStatus: z.enum([\"pending\", \"paid\", \"overdue\"], {\n    invalid_type_error: \"Status de pagamento inválido\"\n  }),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(1, \"Senha é obrigatória\"),\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Senha atual é obrigatória\"),\n  newPassword: z.string().min(6, \"Nova senha deve ter pelo menos 6 caracteres\"),\n  confirmPassword: z.string().min(1, \"Confirmação de senha é obrigatória\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Nova senha e confirmação devem ser iguais\",\n  path: [\"confirmPassword\"],\n});\n\nexport const serviceSchema = insertServiceSchema.extend({\n  name: z.string().min(1, \"Nome do serviço é obrigatório\"),\n  price: z.number().min(0, \"Preço deve ser maior ou igual a zero\"),\n  duration: z.number().min(15, \"Duração mínima é 15 minutos\"),\n});\n\nexport const appointmentSchema = insertAppointmentSchema.extend({\n  clientName: z.string().min(1, \"Nome do cliente é obrigatório\"),\n  clientPhone: z.string().min(10, \"Telefone deve ter pelo menos 10 dígitos\"),\n  clientEmail: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n  appointmentDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data deve estar no formato YYYY-MM-DD\"),\n  appointmentTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim deve estar no formato HH:MM\"),\n  status: z.enum([\"pending\", \"scheduled\", \"confirmed\", \"in_progress\", \"completed\", \"cancelled\", \"late\", \"no_show\", \"rescheduled\"]).default(\"pending\"),\n  notes: z.string().optional(),\n  rescheduleReason: z.string().optional(),\n  newDate: z.string().optional(),\n  newTime: z.string().optional(),\n  cancelReason: z.string().optional(),\n  cancelPolicy: z.string().default(\"24h\"),\n  reminderSent: z.boolean().default(false),\n  arrivalTime: z.string().optional(),\n  completedAt: z.string().optional(),\n  actualStartTime: z.string().optional(),\n  actualEndTime: z.string().optional(),\n});\n\n// Schema for employee working hours\nexport const employeeScheduleSchema = insertEmployeeSchema.extend({\n  workDays: z.string().refine((val) => {\n    try {\n      const days = JSON.parse(val);\n      return Array.isArray(days) && days.every(d => d >= 0 && d <= 6);\n    } catch {\n      return false;\n    }\n  }, \"Dias de trabalho devem ser um array de números de 0-6\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim deve estar no formato HH:MM\"),\n  breakStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início do intervalo deve estar no formato HH:MM\").optional(),\n  breakEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim do intervalo deve estar no formato HH:MM\").optional(),\n});\n\n// Schema for merchant working hours\nexport const merchantScheduleSchema = insertMerchantSchema.extend({\n  workDays: z.string().refine((val) => {\n    try {\n      const days = JSON.parse(val);\n      return Array.isArray(days) && days.every(d => d >= 0 && d <= 6);\n    } catch {\n      return false;\n    }\n  }, \"Dias de funcionamento devem ser um array de números de 0-6\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de abertura deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fechamento deve estar no formato HH:MM\"),\n  breakStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início do intervalo deve estar no formato HH:MM\").optional(),\n  breakEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim do intervalo deve estar no formato HH:MM\").optional(),\n});\n\n// Schema for booking policies\nexport const bookingPoliciesSchema = z.object({\n  noShowFeeEnabled: z.boolean().default(false),\n  noShowFeeAmount: z.number().min(0, \"Valor da multa deve ser maior ou igual a zero\").default(0),\n  lateFeeEnabled: z.boolean().default(false),\n  lateFeeAmount: z.number().min(0, \"Valor da multa de atraso deve ser maior ou igual a zero\").default(0),\n  lateToleranceMinutes: z.number().min(0, \"Tolerância deve ser maior ou igual a zero\").max(60, \"Tolerância máxima é 60 minutos\").default(15),\n  cancellationPolicyHours: z.number().min(0, \"Horas para cancelamento deve ser maior ou igual a zero\").max(168, \"Máximo de 7 dias (168 horas)\").default(24),\n  cancellationFeeEnabled: z.boolean().default(false),\n  cancellationFeeAmount: z.number().min(0, \"Valor da multa de cancelamento deve ser maior ou igual a zero\").default(0),\n});\n\n// Schema for updating appointment status\nexport const appointmentStatusSchema = z.object({\n  status: z.enum([\"pending\", \"confirmed\", \"in_progress\", \"completed\", \"cancelled\", \"no_show\", \"late\", \"rescheduled\"]),\n  cancelReason: z.string().min(1, \"Motivo do cancelamento é obrigatório\").optional(),\n  rescheduleReason: z.string().min(1, \"Motivo do reagendamento é obrigatório\").optional(),\n  arrivalTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de chegada deve estar no formato HH:MM\").optional(),\n  newDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nova data deve estar no formato YYYY-MM-DD\").optional(),\n  newTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Novo horário deve estar no formato HH:MM\").optional(),\n  paymentStatus: z.enum([\"pending\", \"paid\"]).optional(),\n});\n\n// Schema for checking availability\nexport const availabilitySchema = z.object({\n  employeeId: z.string().uuid(\"Employee ID deve ser um UUID válido\"),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data deve estar no formato YYYY-MM-DD\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início deve estar no formato HH:MM\"),\n  duration: z.number().min(15, \"Duração mínima é 15 minutos\"),\n});\n\n// Schema for updating payment status\nexport const paymentStatusSchema = z.object({\n  paymentStatus: z.enum([\"pending\", \"paid\"], {\n    required_error: \"Status de pagamento é obrigatório\",\n    invalid_type_error: \"Status de pagamento deve ser 'pending' ou 'paid'\"\n  }),\n});\n\n// Schema for promotions\nexport const promotionSchema = insertPromotionSchema.extend({\n  name: z.string().min(1, \"Nome da promoção é obrigatório\"),\n  discountType: z.enum([\"percentage\", \"fixed\"], {\n    invalid_type_error: \"Tipo de desconto deve ser porcentagem ou valor fixo\"\n  }),\n  discountValue: z.number().min(1, \"Valor do desconto deve ser maior que zero\"),\n  startDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data de início deve estar no formato YYYY-MM-DD\"),\n  endDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data de fim deve estar no formato YYYY-MM-DD\"),\n}).refine((data) => {\n  if (data.discountType === \"percentage\" && data.discountValue > 99) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Desconto percentual não pode ser maior que 99%\",\n  path: [\"discountValue\"]\n}).refine((data) => {\n  return new Date(data.startDate) <= new Date(data.endDate);\n}, {\n  message: \"Data de início deve ser anterior ou igual à data de fim\",\n  path: [\"endDate\"]\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertMerchant = z.infer<typeof insertMerchantSchema>;\nexport type Merchant = typeof merchants.$inferSelect;\nexport type PublicMerchant = Omit<Merchant, 'password'>;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type PublicEmployee = Omit<Employee, 'password'>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type PublicClient = Omit<Client, 'password'>;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertEmployeeDayOff = z.infer<typeof insertEmployeeDayOffSchema>;\nexport type EmployeeDayOff = typeof employeeDaysOff.$inferSelect;\nexport type InsertPromotion = z.infer<typeof insertPromotionSchema>;\nexport type Promotion = typeof promotions.$inferSelect;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type ServiceData = z.infer<typeof serviceSchema>;\nexport type AppointmentData = z.infer<typeof appointmentSchema>;\nexport type EmployeeScheduleData = z.infer<typeof employeeScheduleSchema>;\nexport type MerchantScheduleData = z.infer<typeof merchantScheduleSchema>;\nexport type BookingPoliciesData = z.infer<typeof bookingPoliciesSchema>;\nexport type AppointmentStatusData = z.infer<typeof appointmentStatusSchema>;\nexport type AvailabilityData = z.infer<typeof availabilitySchema>;\nexport type PaymentStatusData = z.infer<typeof paymentStatusSchema>;\nexport type PromotionData = z.infer<typeof promotionSchema>;\nexport type MerchantAccessData = z.infer<typeof merchantAccessSchema>;\n\n// Available appointment statuses\nexport const APPOINTMENT_STATUS = {\n  PENDING: \"pending\" as const,\n  CONFIRMED: \"confirmed\" as const,\n  IN_PROGRESS: \"in_progress\" as const,\n  COMPLETED: \"completed\" as const,\n  CANCELLED: \"cancelled\" as const,\n  NO_SHOW: \"no_show\" as const,\n  LATE: \"late\" as const,\n};\n\n// Cancel policy options\nexport const CANCEL_POLICY = {\n  NONE: \"none\" as const,\n  TWO_HOURS: \"2h\" as const,\n  TWELVE_HOURS: \"12h\" as const,\n  TWENTY_FOUR_HOURS: \"24h\" as const,\n};\n\n// Days of the week (0 = Sunday, 1 = Monday, etc.)\nexport const WEEKDAYS = {\n  SUNDAY: 0,\n  MONDAY: 1,\n  TUESDAY: 2,\n  WEDNESDAY: 3,\n  THURSDAY: 4,\n  FRIDAY: 5,\n  SATURDAY: 6,\n} as const;","size_bytes":22520},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const merchants = pgTable(\"merchants\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  ownerName: text(\"owner_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, active, inactive, payment_pending\n  logoUrl: text(\"logo_url\"), // URL for the salon logo\n  isOpen: boolean(\"is_open\").notNull().default(true), // Open/closed status\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"), // JSON array of days (0=Sunday, 1=Monday, etc.)\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"18:00\"), // HH:MM format\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"), // Optional lunch break\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"), // Optional lunch break\n  // Access control fields\n  accessStartDate: timestamp(\"access_start_date\"), // When access was granted\n  accessEndDate: timestamp(\"access_end_date\"), // When access expires\n  accessDurationDays: integer(\"access_duration_days\").default(30), // Duration in days (default 30 days)\n  lastPaymentDate: timestamp(\"last_payment_date\"), // Last payment date\n  nextPaymentDue: timestamp(\"next_payment_due\"), // Next payment due date\n  monthlyFee: integer(\"monthly_fee\").default(5000), // Monthly fee in cents (default R$ 50.00)\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, overdue, trial\n  // Plan management\n  planStatus: text(\"plan_status\").notNull().default(\"free\"), // free, vip\n  planValidity: timestamp(\"plan_validity\"), // When the current plan expires\n  // Booking policies\n  noShowFeeEnabled: boolean(\"no_show_fee_enabled\").notNull().default(false), // Enable/disable no-show fee\n  noShowFeeAmount: integer(\"no_show_fee_amount\").default(0), // Fee amount in cents for no-show\n  lateFeeEnabled: boolean(\"late_fee_enabled\").notNull().default(false), // Enable/disable late fee\n  lateFeeAmount: integer(\"late_fee_amount\").default(0), // Fee amount in cents for being late\n  lateToleranceMinutes: integer(\"late_tolerance_minutes\").default(15), // Minutes of tolerance before considering late\n  cancellationPolicyHours: integer(\"cancellation_policy_hours\").default(24), // Hours required for free cancellation\n  cancellationFeeEnabled: boolean(\"cancellation_fee_enabled\").notNull().default(false), // Enable/disable cancellation fee\n  cancellationFeeAmount: integer(\"cancellation_fee_amount\").default(0), // Fee amount in cents for late cancellation\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // price in cents\n  duration: integer(\"duration\").notNull(), // duration in minutes\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const employees = pgTable(\"employees\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  role: text(\"role\").notNull().default(\"employee\"), // employee, manager\n  specialties: text(\"specialties\"), // JSON array of service IDs they can perform\n  workDays: text(\"work_days\").notNull().default(\"[1,2,3,4,5,6]\"), // JSON array of days (0=Sunday, 1=Monday, etc.)\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"18:00\"), // HH:MM format\n  breakStartTime: text(\"break_start_time\").default(\"12:00\"), // Optional lunch break\n  breakEndTime: text(\"break_end_time\").default(\"13:00\"), // Optional lunch break\n  paymentType: text(\"payment_type\").notNull().default(\"monthly\"), // monthly, weekly, daily, percentage\n  paymentValue: integer(\"payment_value\").notNull().default(0), // value in cents for fixed payments or percentage * 100 for percentage\n  extendedEndTime: text(\"extended_end_time\"), // Temporary extended end time for current day\n  overtimeHours: integer(\"overtime_hours\").default(0), // Total accumulated overtime in minutes\n  lastOvertimeDate: text(\"last_overtime_date\"), // Last date when overtime was recorded\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phone: text(\"phone\").notNull(),\n  notes: text(\"notes\"), // client notes/preferences\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  serviceId: text(\"service_id\").notNull().references(() => services.id, { onDelete: \"cascade\" }),\n  clientId: text(\"client_id\").references(() => clients.id), // Optional - for registered clients\n  employeeId: text(\"employee_id\").references(() => employees.id), // Who performs the service\n  clientName: text(\"client_name\").notNull(), // For walk-ins or non-registered clients\n  clientPhone: text(\"client_phone\").notNull(),\n  clientEmail: text(\"client_email\"),\n  appointmentDate: text(\"appointment_date\").notNull(), // YYYY-MM-DD format\n  appointmentTime: text(\"appointment_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format - calculated from start + service duration\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, in_progress, completed, cancelled, no_show, late, rescheduled\n  notes: text(\"notes\"),\n  rescheduleReason: text(\"reschedule_reason\"), // Reason for rescheduling\n  cancelReason: text(\"cancel_reason\"), // Reason for cancellation\n  cancelPolicy: text(\"cancel_policy\").notNull().default(\"24h\"), // 24h, 12h, 2h, none\n  reminderSent: boolean(\"reminder_sent\").notNull().default(false),\n  arrivalTime: text(\"arrival_time\"), // When client actually arrived (HH:MM)\n  completedAt: timestamp(\"completed_at\"), // When service was completed\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid - for completed appointments\n  paidAt: timestamp(\"paid_at\"), // When payment was marked as paid\n  actualStartTime: text(\"actual_start_time\"), // When service actually started (HH:MM)\n  actualEndTime: text(\"actual_end_time\"), // When service actually ended (HH:MM)\n  newDate: text(\"new_date\"), // New date when rescheduled (YYYY-MM-DD format)\n  newTime: text(\"new_time\"), // New time when rescheduled (HH:MM format)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Penalties table for tracking cancellation fees and other penalties\nexport const penalties = pgTable(\"penalties\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  clientId: text(\"client_id\").references(() => clients.id),\n  appointmentId: text(\"appointment_id\").references(() => appointments.id),\n  clientName: text(\"client_name\").notNull(),\n  clientPhone: text(\"client_phone\").notNull(),\n  clientEmail: text(\"client_email\"),\n  type: text(\"type\").notNull(), // \"cancellation\", \"no_show\", \"late\"\n  amount: integer(\"amount\").notNull(), // Amount in cents\n  reason: text(\"reason\").notNull(), // Description of penalty\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"paid\", \"waived\"\n  paidAt: timestamp(\"paid_at\"), // When penalty was marked as paid\n  paidBy: text(\"paid_by\"), // Who marked as paid (user ID)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const promotions = pgTable(\"promotions\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  serviceId: text(\"service_id\").notNull().references(() => services.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  discountType: text(\"discount_type\").notNull().default(\"percentage\"), // \"percentage\", \"fixed\"\n  discountValue: integer(\"discount_value\").notNull(), // Percentage (1-99) or fixed amount in cents\n  startDate: text(\"start_date\").notNull(), // YYYY-MM-DD format\n  endDate: text(\"end_date\").notNull(), // YYYY-MM-DD format\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const employeeDaysOff = pgTable(\"employee_days_off\", {\n  id: text(\"id\").primaryKey(),\n  merchantId: text(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  employeeId: text(\"employee_id\").notNull().references(() => employees.id, { onDelete: \"cascade\" }),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  reason: text(\"reason\"), // Optional reason for the day off\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: text(\"id\").primaryKey(),\n  key: text(\"key\").notNull().unique(), // Setting key (e.g., 'vip_plan_price')\n  value: text(\"value\").notNull(), // Setting value as string\n  description: text(\"description\"), // Human-readable description\n  type: text(\"type\").notNull().default(\"string\"), // data type: string, number, boolean\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMerchantSchema = createInsertSchema(merchants).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const employeePaymentSchema = insertEmployeeSchema.extend({\n  paymentType: z.enum([\"monthly\", \"weekly\", \"daily\", \"percentage\"]).default(\"monthly\"),\n  paymentValue: z.number().min(0, \"Valor de pagamento deve ser maior ou igual a zero\"),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPenaltySchema = createInsertSchema(penalties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeDayOffSchema = createInsertSchema(employeeDaysOff).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPromotionSchema = createInsertSchema(promotions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSystemSettingSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const systemSettingSchema = insertSystemSettingSchema.extend({\n  key: z.string().min(1, \"Chave da configuração é obrigatória\"),\n  value: z.string().min(1, \"Valor da configuração é obrigatório\"),\n  type: z.enum([\"string\", \"number\", \"boolean\"]).default(\"string\"),\n});\n\n// Schema for merchant access management\nexport const merchantAccessSchema = z.object({\n  accessDurationDays: z.number().min(1, \"Duração deve ser pelo menos 1 dia\").max(365, \"Duração máxima é 365 dias\"),\n  monthlyFee: z.number().min(0, \"Taxa mensal deve ser maior ou igual a zero\"),\n  paymentStatus: z.enum([\"pending\", \"paid\", \"overdue\", \"trial\"], {\n    invalid_type_error: \"Status de pagamento inválido\"\n  }),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(1, \"Senha é obrigatória\"),\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Senha atual é obrigatória\"),\n  newPassword: z.string().min(6, \"Nova senha deve ter pelo menos 6 caracteres\"),\n  confirmPassword: z.string().min(1, \"Confirmação de senha é obrigatória\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Nova senha e confirmação devem ser iguais\",\n  path: [\"confirmPassword\"],\n});\n\nexport const serviceSchema = insertServiceSchema.extend({\n  name: z.string().min(1, \"Nome do serviço é obrigatório\"),\n  price: z.number().min(0, \"Preço deve ser maior ou igual a zero\"),\n  duration: z.number().min(15, \"Duração mínima é 15 minutos\"),\n});\n\nexport const appointmentSchema = insertAppointmentSchema.extend({\n  clientName: z.string().min(1, \"Nome do cliente é obrigatório\"),\n  clientPhone: z.string().min(10, \"Telefone deve ter pelo menos 10 dígitos\"),\n  clientEmail: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n  appointmentDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data deve estar no formato YYYY-MM-DD\"),\n  appointmentTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim deve estar no formato HH:MM\"),\n  status: z.enum([\"pending\", \"scheduled\", \"confirmed\", \"in_progress\", \"completed\", \"cancelled\", \"late\", \"no_show\", \"rescheduled\"]).default(\"pending\"),\n  notes: z.string().optional(),\n  rescheduleReason: z.string().optional(),\n  newDate: z.string().optional(),\n  newTime: z.string().optional(),\n  cancelReason: z.string().optional(),\n  cancelPolicy: z.string().default(\"24h\"),\n  reminderSent: z.boolean().default(false),\n  arrivalTime: z.string().optional(),\n  completedAt: z.string().optional(),\n  actualStartTime: z.string().optional(),\n  actualEndTime: z.string().optional(),\n});\n\n// Schema for employee working hours\nexport const employeeScheduleSchema = insertEmployeeSchema.extend({\n  workDays: z.string().refine((val) => {\n    try {\n      const days = JSON.parse(val);\n      return Array.isArray(days) && days.every(d => d >= 0 && d <= 6);\n    } catch {\n      return false;\n    }\n  }, \"Dias de trabalho devem ser um array de números de 0-6\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim deve estar no formato HH:MM\"),\n  breakStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início do intervalo deve estar no formato HH:MM\").optional(),\n  breakEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim do intervalo deve estar no formato HH:MM\").optional(),\n});\n\n// Schema for merchant working hours\nexport const merchantScheduleSchema = insertMerchantSchema.extend({\n  workDays: z.string().refine((val) => {\n    try {\n      const days = JSON.parse(val);\n      return Array.isArray(days) && days.every(d => d >= 0 && d <= 6);\n    } catch {\n      return false;\n    }\n  }, \"Dias de funcionamento devem ser um array de números de 0-6\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de abertura deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fechamento deve estar no formato HH:MM\"),\n  breakStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de início do intervalo deve estar no formato HH:MM\").optional(),\n  breakEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário de fim do intervalo deve estar no formato HH:MM\").optional(),\n});\n\n// Schema for merchant booking policies\nexport const merchantPoliciesSchema = insertMerchantSchema.extend({\n  noShowFeeEnabled: z.boolean().default(false),\n  noShowFeeAmount: z.number().min(0, \"Taxa de não comparecimento deve ser maior ou igual a zero\"),\n  lateFeeEnabled: z.boolean().default(false),\n  lateFeeAmount: z.number().min(0, \"Taxa de atraso deve ser maior ou igual a zero\"),\n  lateToleranceMinutes: z.number().min(0, \"Tolerância de atraso deve ser maior ou igual a zero\"),\n  cancellationPolicyHours: z.number().min(0, \"Política de cancelamento deve ser maior ou igual a zero\"),\n  cancellationFeeEnabled: z.boolean().default(false),\n  cancellationFeeAmount: z.number().min(0, \"Taxa de cancelamento deve ser maior ou igual a zero\"),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Merchant = typeof merchants.$inferSelect;\nexport type NewMerchant = typeof merchants.$inferInsert;\nexport type Service = typeof services.$inferSelect;\nexport type NewService = typeof services.$inferInsert;\nexport type Employee = typeof employees.$inferSelect;\nexport type NewEmployee = typeof employees.$inferInsert;\nexport type Client = typeof clients.$inferSelect;\nexport type NewClient = typeof clients.$inferInsert;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type NewAppointment = typeof appointments.$inferInsert;\nexport type Penalty = typeof penalties.$inferSelect;\nexport type NewPenalty = typeof penalties.$inferInsert;\nexport type Promotion = typeof promotions.$inferSelect;\nexport type NewPromotion = typeof promotions.$inferInsert;\nexport type EmployeeDayOff = typeof employeeDaysOff.$inferSelect;\nexport type NewEmployeeDayOff = typeof employeeDaysOff.$inferInsert;\nexport type SystemSetting = typeof systemSettings.$inferSelect;\nexport type NewSystemSetting = typeof systemSettings.$inferInsert;","size_bytes":18720},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState, useEffect } from \"react\";\nimport { authService } from \"@/lib/auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport MerchantDashboard from \"@/pages/merchant-dashboard\";\nimport MerchantSettings from \"@/pages/merchant-settings\";\nimport EmployeeDashboard from \"@/pages/employee-dashboard\";\nimport ClientDashboard from \"@/pages/client-dashboard\";\nimport NewAppointment from \"@/pages/new-appointment\";\nimport Schedule from \"@/pages/schedule\";\nimport Services from \"@/pages/services\";\nimport Employees from \"@/pages/employees\";\nimport EmployeeDaysOff from \"@/pages/employee-days-off\";\nimport Clients from \"@/pages/clients\";\nimport Merchants from \"./pages/merchants\";\nimport MerchantAccess from \"./pages/merchant-access\";\nimport Reports from \"@/pages/reports\";\nimport ClientBooking from \"@/pages/client-booking\";\nimport MerchantPenalties from \"@/pages/merchant-penalties\";\nimport Promotions from \"@/pages/promotions\";\nimport NotFound from \"@/pages/not-found\";\nimport AdminSettings from \"@/pages/admin-settings\";\n\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }): JSX.Element {\n  const [isAuthenticated, setIsAuthenticated] = useState(authService.getState().isAuthenticated);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setIsAuthenticated(state.isAuthenticated);\n    });\n    return unsubscribe;\n  }, []);\n\n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  const [isAuthenticated, setIsAuthenticated] = useState(authService.getState().isAuthenticated);\n  const [user, setUser] = useState(authService.getState().user);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setIsAuthenticated(state.isAuthenticated);\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  const getDefaultRoute = () => {\n    if (!isAuthenticated) return \"/login\";\n    if (user?.role === \"merchant\") return \"/merchant-dashboard\";\n    if (user?.role === \"employee\") return \"/employee-dashboard\";\n    if (user?.role === \"client\") return \"/client-dashboard\";\n    return \"/dashboard\"; // admin dashboard\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/merchant-dashboard\" component={() => <ProtectedRoute component={MerchantDashboard} />} />\n      <Route path=\"/merchant-settings\" component={MerchantSettings} />\n      <Route path=\"/employee-days-off\" component={EmployeeDaysOff} />\n      <Route path=\"/merchant-penalties\" component={MerchantPenalties} />\n      <Route path=\"/admin-settings\" component={AdminSettings} />\n      <Route path=\"/employee-dashboard\" component={() => <ProtectedRoute component={EmployeeDashboard} />} />\n      <Route path=\"/client-dashboard\" component={() => <ProtectedRoute component={ClientDashboard} />} />\n      <Route path=\"/new-appointment\" component={() => <ProtectedRoute component={NewAppointment} />} />\n      <Route path=\"/schedule\" component={() => <ProtectedRoute component={Schedule} />} />\n      <Route path=\"/services\" component={() => <ProtectedRoute component={Services} />} />\n      <Route path=\"/employees\" component={Employees} />\n      <Route path=\"/clients\" component={Clients} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/merchants\" component={() => <ProtectedRoute component={Merchants} />} />\n      <Route path=\"/merchant-access\" component={MerchantAccess} />\n      <Route path=\"/reports\" component={() => <ProtectedRoute component={Reports} />} />\n      <Route path=\"/client-booking\" component={ClientBooking} />\n      <Route path=\"/promotions\" component={Promotions} />\n      <Route path=\"/\">\n        <Redirect to={getDefaultRoute()} />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4444},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-primary: hsl(221.2 83.2% 53.3%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221.2 83.2% 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2 83.2% 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2 83.2% 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 94.1%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(224.3 76.3% 94.1%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4559},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"interface User {\n  id: string;\n  email: string;\n  role: string;\n  name?: string;\n  ownerName?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n}\n\nclass AuthService {\n  private state: AuthState = {\n    user: null,\n    token: localStorage.getItem('token'), // Usar 'token' ao invés de 'auth_token'\n    isAuthenticated: !!localStorage.getItem('token'), // Set true if token exists\n  };\n\n  private listeners: Array<(state: AuthState) => void> = [];\n  private isInitializing = false;\n\n  constructor() {\n    this.initializeAuth();\n  }\n\n  private async initializeAuth() {\n    const token = localStorage.getItem('token'); // Usar 'token' ao invés de 'auth_token'\n    if (token && !this.isInitializing) {\n      this.isInitializing = true;\n      try {\n        const response = await fetch('/api/auth/verify', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          const { user } = await response.json();\n          this.state = {\n            user,\n            token,\n            isAuthenticated: true,\n          };\n        } else {\n          this.logout();\n        }\n      } catch (error) {\n        this.logout();\n      } finally {\n        this.isInitializing = false;\n      }\n    }\n    this.notifyListeners();\n  }\n\n  async login(email: string, password: string): Promise<{ success: boolean; error?: string; user?: User }> {\n    try {\n      console.log(`=== AUTH SERVICE LOGIN DEBUG ===`);\n      console.log(`Attempting login for email: ${email}`);\n      \n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      console.log(`Login response status: ${response.status}`);\n      \n      const data = await response.json();\n      console.log(`Login response data:`, data);\n\n      if (response.ok) {\n        console.log(`Login successful for user:`, data.user);\n        console.log(`Token received: ${data.token ? 'YES' : 'NO'}`);\n        \n        localStorage.setItem('token', data.token); // Usar 'token' ao invés de 'auth_token'\n        this.state = {\n          user: data.user,\n          token: data.token,\n          isAuthenticated: true,\n        };\n        \n        console.log(`Updated auth state:`, this.state);\n        this.notifyListeners();\n        console.log(`=== END AUTH LOGIN DEBUG (SUCCESS) ===`);\n        return { success: true, user: data.user };\n      } else {\n        console.log(`Login failed: ${data.message}`);\n        console.log(`=== END AUTH LOGIN DEBUG (FAILED) ===`);\n        return { success: false, error: data.message };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      console.log(`=== END AUTH LOGIN DEBUG (ERROR) ===`);\n      return { success: false, error: 'Erro de conexão' };\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token'); // Usar 'token' ao invés de 'auth_token'\n    \n    // Clear ALL localStorage to prevent any data leakage\n    localStorage.clear();\n    \n    this.state = {\n      user: null,\n      token: null,\n      isAuthenticated: false,\n    };\n    this.notifyListeners();\n    \n    // Clear any cached data when user logs out to prevent data leakage\n    if (typeof window !== 'undefined' && window.location) {\n      // Force hard refresh to clear all caches\n      window.location.replace('/login');\n    }\n  }\n\n  getState(): AuthState {\n    return { ...this.state };\n  }\n\n  subscribe(listener: (state: AuthState) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  private notifyListeners() {\n    this.listeners.forEach(listener => listener(this.state));\n  }\n\n  getAuthHeaders(): Record<string, string> {\n    return this.state.token ? { 'Authorization': `Bearer ${this.state.token}` } : {};\n  }\n}\n\nexport const authService = new AuthService();","size_bytes":4165},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { authService } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = authService.getAuthHeaders();\n  const contentHeaders = data ? { \"Content-Type\": \"application/json\" } : undefined;\n  \n  const headers: Record<string, string> = { ...authHeaders };\n  if (contentHeaders) {\n    Object.assign(headers, contentHeaders);\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = authService.getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: authHeaders,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Clear cache when auth state changes to prevent stale data\nauthService.subscribe((state) => {\n  queryClient.clear();\n});\n","size_bytes":1856},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-settings.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Settings, DollarSign, Calendar, Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface SystemSetting {\n  id: string;\n  key: string;\n  value: string;\n  description: string;\n  type: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function AdminSettings() {\n  const [vipPrice, setVipPrice] = useState(\"\");\n  const [trialDuration, setTrialDuration] = useState(\"\");\n  const [vipDuration, setVipDuration] = useState(\"\");\n  const { toast } = useToast();\n\n  // Fetch all system settings\n  const { data: settings = [], isLoading } = useQuery<SystemSetting[]>({\n    queryKey: [\"/api/admin/system-settings\"],\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  // Update system settings values when data is loaded\n  useEffect(() => {\n    if (settings.length > 0) {\n      const vipPriceSetting = settings.find(s => s.key === 'vip_plan_price');\n      const trialDurationSetting = settings.find(s => s.key === 'trial_plan_duration');\n      const vipDurationSetting = settings.find(s => s.key === 'vip_plan_duration');\n\n      if (vipPriceSetting) {\n        setVipPrice((parseInt(vipPriceSetting.value) / 100).toString()); // Convert cents to reais\n      }\n      if (trialDurationSetting) {\n        setTrialDuration(trialDurationSetting.value);\n      }\n      if (vipDurationSetting) {\n        setVipDuration(vipDurationSetting.value);\n      }\n    }\n  }, [settings]);\n\n  const updateSettingMutation = useMutation({\n    mutationFn: async ({ key, value }: { key: string; value: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/system-settings/${key}`, { value });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/system-settings\"] });\n      toast({\n        title: \"Configuração atualizada\",\n        description: \"As configurações foram salvas com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: error.message || \"Não foi possível salvar as configurações.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveVipPrice = () => {\n    const priceInCents = Math.round(parseFloat(vipPrice || \"0\") * 100);\n    updateSettingMutation.mutate({ key: \"vip_plan_price\", value: priceInCents.toString() });\n  };\n\n  const handleSaveTrialDuration = () => {\n    updateSettingMutation.mutate({ key: \"trial_plan_duration\", value: trialDuration });\n  };\n\n  const handleSaveVipDuration = () => {\n    updateSettingMutation.mutate({ key: \"vip_plan_duration\", value: vipDuration });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"flex-1 p-6\">\n            <div className=\"flex items-center justify-center h-64\">\n              <p className=\"text-muted-foreground\">Carregando configurações...</p>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-admin-settings\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-foreground flex items-center gap-2\">\n                  <Settings className=\"w-6 h-6\" />\n                  Configurações do Sistema\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Gerencie os valores e configurações gerais da plataforma\n                </p>\n              </div>\n            </div>\n\n            {/* Plan Pricing Configuration */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"w-5 h-5\" />\n                  Configuração de Planos\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* VIP Plan Price */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"vipPrice\" className=\"text-base font-medium\">\n                      Valor do Plano VIP (R$)\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Este valor será aplicado a todos os novos cadastros de plano VIP\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"relative flex-1 max-w-xs\">\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                        R$\n                      </span>\n                      <Input\n                        id=\"vipPrice\"\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={vipPrice}\n                        onChange={(e) => setVipPrice(e.target.value)}\n                        className=\"pl-10\"\n                        placeholder=\"50.00\"\n                        data-testid=\"input-vip-price\"\n                      />\n                    </div>\n                    <Button\n                      onClick={handleSaveVipPrice}\n                      disabled={updateSettingMutation.isPending || !vipPrice}\n                      data-testid=\"button-save-vip-price\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Salvar\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* Trial Duration */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"trialDuration\" className=\"text-base font-medium\">\n                          Duração do Teste Grátis (dias)\n                        </Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Quantos dias o plano de teste ficará ativo\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          id=\"trialDuration\"\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"365\"\n                          value={trialDuration}\n                          onChange={(e) => setTrialDuration(e.target.value)}\n                          className=\"max-w-xs\"\n                          placeholder=\"10\"\n                          data-testid=\"input-trial-duration\"\n                        />\n                        <Button\n                          onClick={handleSaveTrialDuration}\n                          disabled={updateSettingMutation.isPending || !trialDuration}\n                          data-testid=\"button-save-trial-duration\"\n                        >\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Salvar\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* VIP Duration */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"vipDuration\" className=\"text-base font-medium\">\n                          Duração do Plano VIP (dias)\n                        </Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Quantos dias o plano VIP ficará ativo\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          id=\"vipDuration\"\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"365\"\n                          value={vipDuration}\n                          onChange={(e) => setVipDuration(e.target.value)}\n                          className=\"max-w-xs\"\n                          placeholder=\"30\"\n                          data-testid=\"input-vip-duration\"\n                        />\n                        <Button\n                          onClick={handleSaveVipDuration}\n                          disabled={updateSettingMutation.isPending || !vipDuration}\n                          data-testid=\"button-save-vip-duration\"\n                        >\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Salvar\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Current Settings Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Resumo das Configurações Atuais</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h3 className=\"font-medium text-foreground\">Plano VIP</h3>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      R$ {vipPrice || \"0,00\"}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {vipDuration || \"30\"} dias de acesso\n                    </p>\n                  </div>\n                  \n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h3 className=\"font-medium text-foreground\">Teste Grátis</h3>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      Gratuito\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {trialDuration || \"10\"} dias de acesso\n                    </p>\n                  </div>\n\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h3 className=\"font-medium text-foreground\">Última Atualização</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {settings.length > 0 \n                        ? new Date(settings[0].updatedAt).toLocaleDateString(\"pt-BR\")\n                        : \"Nunca\"\n                      }\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11340},"client/src/pages/client-booking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Calendar, Clock, User, DollarSign } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\"; // Import Badge component\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  name?: string;\n  phone?: string;\n  merchantId?: string;\n}\n\ninterface Service {\n  id: string;\n  name: string;\n  description?: string;\n  price: number;\n  duration: number;\n  isActive: boolean;\n  merchantId: string;\n  originalPrice?: number; // Added for promotional price display\n  promotionalPrice?: number; // Added for promotional price display\n  hasPromotion?: boolean; // Added to indicate if there's a promotion\n}\n\ninterface Employee {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  specialties?: string;\n  isActive: boolean;\n  merchantId: string;\n}\n\ninterface Merchant {\n  id: string;\n  name: string;\n  address: string;\n  phone: string;\n  startTime?: string; // e.g., \"09:00\"\n  endTime?: string;   // e.g., \"18:00\"\n  openingDays?: string[]; // e.g., [\"Mon\", \"Tue\", ...]\n}\n\n\nexport default function ClientBooking() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(authService.getState().user);\n\n  const [formData, setFormData] = useState({\n    serviceId: \"\",\n    employeeId: \"\",\n    appointmentDate: \"\",\n    appointmentTime: \"\",\n    notes: \"\",\n  });\n\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Fetch available services\n  const { data: services = [], isLoading: servicesLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/client/services\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/client/services`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar serviços\");\n      }\n      const servicesData: Service[] = await response.json();\n\n      // Check for promotions and augment data\n      const promotionResponse = await fetch(`/api/client/promotions`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      const promotions = await promotionResponse.json();\n\n      const servicesWithPromotions = servicesData.map(service => {\n        const activePromotion = promotions.find((promo: any) =>\n          promo.serviceId === service.id &&\n          promo.isActive &&\n          new Date(promo.validUntil) >= new Date() // Check if promotion is still valid\n        );\n\n        if (activePromotion) {\n          return {\n            ...service,\n            hasPromotion: true,\n            originalPrice: service.price,\n            promotionalPrice: activePromotion.discountedPrice,\n          };\n        }\n        return service;\n      });\n\n      return servicesWithPromotions;\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n  });\n\n  // Query to get available employees (filtered by selected date if available)\n  const { data: employees = [], isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/client/employees\", formData.appointmentDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (formData.appointmentDate) {\n        params.append(\"date\", formData.appointmentDate);\n      }\n\n      const response = await fetch(`/api/client/employees?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar funcionários\");\n      }\n\n      return response.json();\n    },\n    enabled: !!authService.getState().token,\n  });\n\n  // Fetch merchant data to get working hours\n  const { data: merchantData } = useQuery<Merchant[]>({\n    queryKey: [`/api/client/merchants`],\n    queryFn: async () => {\n      const response = await fetch(`/api/client/merchants`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar dados do salão\");\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n  });\n\n\n  // Check availability\n  const { data: availability, isLoading: availabilityLoading } = useQuery({\n    queryKey: [\"/api/client/availability\", formData.employeeId, formData.appointmentDate, formData.appointmentTime, selectedService?.duration],\n    queryFn: async () => {\n      if (!formData.employeeId || !formData.appointmentDate || !formData.appointmentTime || !selectedService) {\n        return null;\n      }\n\n      // Use the promotional price if available, otherwise use the regular price\n      const priceToUse = (selectedService as any).hasPromotion\n        ? (selectedService as any).promotionalPrice\n        : selectedService.price;\n\n      const response = await fetch(\n        `/api/client/availability?employeeId=${formData.employeeId}&date=${formData.appointmentDate}&time=${formData.appointmentTime}&duration=${selectedService.duration}&price=${priceToUse}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${authService.getState().token}`,\n          },\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Erro ao verificar disponibilidade\");\n      }\n      return response.json();\n    },\n    enabled: !!(formData.employeeId && formData.appointmentDate && formData.appointmentTime && selectedService),\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (appointmentData: any) => {\n      // Determine the price to charge based on promotion\n      const service = services.find(s => s.id === appointmentData.serviceId);\n      const priceToCharge = service && (service as any).hasPromotion\n        ? (service as any).promotionalPrice\n        : service?.price;\n\n      const finalAppointmentData = {\n        ...appointmentData,\n        price: priceToCharge,\n      };\n\n\n      const response = await fetch(\"/api/client/appointments\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(finalAppointmentData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n\n        // Verificar se é erro de funcionário de folga\n        if (errorData.message && errorData.message.includes(\"folga\")) {\n          throw new Error(\"🏖️ Este funcionário está de folga neste dia. Por favor, escolha outro dia ou outro funcionário.\");\n        }\n\n        throw new Error(errorData.message || \"Erro ao criar agendamento\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      setFormData({\n        serviceId: \"\",\n        employeeId: \"\",\n        appointmentDate: \"\",\n        appointmentTime: \"\",\n        notes: \"\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      // Force refetch of occupied times for the current date and employee to update state immediately\n      if (formData.appointmentDate) {\n        queryClient.refetchQueries({\n          queryKey: [\"/api/client/occupied-times\", formData.appointmentDate, formData.employeeId]\n        });\n      }\n\n      setLocation(\"/client-dashboard\");\n      toast({\n        title: \"Sucesso!\",\n        description: \"Agendamento criado com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.serviceId || !formData.appointmentDate || !formData.appointmentTime) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if the selected time is in the available slots\n    const availableSlots = getAvailableTimeSlots();\n    console.log(\"Available slots:\", availableSlots);\n    console.log(\"Selected time:\", formData.appointmentTime);\n    console.log(\"Occupied times:\", occupiedTimes);\n\n    if (!availableSlots.includes(formData.appointmentTime)) {\n      toast({\n        title: \"Erro\",\n        description: \"Este horário não está mais disponível. Por favor, selecione outro horário.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAppointmentMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    // Convert \"any\" back to empty string for employeeId\n    const processedValue = field === \"employeeId\" && value === \"any\" ? \"\" : value;\n    setFormData(prev => ({ ...prev, [field]: processedValue }));\n\n    if (field === \"serviceId\") {\n      const service = services.find(s => s.id === value);\n      setSelectedService(service || null);\n    }\n  };\n\n  // Query to get occupied times for the selected date\n  const { data: occupiedTimes = [], isLoading: occupiedTimesLoading } = useQuery({\n    queryKey: [\"/api/client/occupied-times\", formData.appointmentDate, formData.employeeId],\n    queryFn: async () => {\n      if (!formData.appointmentDate) return [];\n\n      const params = new URLSearchParams({ date: formData.appointmentDate });\n      // Only filter by employee if one is specifically selected (not empty string)\n      if (formData.employeeId && formData.employeeId !== \"\") {\n        params.append(\"employeeId\", formData.employeeId);\n      }\n\n      const response = await fetch(`/api/client/occupied-times?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar horários ocupados\");\n      }\n\n      const data = await response.json();\n      return data.occupiedTimes || [];\n    },\n    enabled: !!formData.appointmentDate,\n    // Refetch whenever date or employee changes\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Generate time slots helper function based on merchant working hours\n  const generateAllTimeSlots = () => {\n    if (!merchantData || !merchantData[0]) return [];\n\n    const merchant = merchantData[0];\n    const startTime = merchant.startTime || \"09:00\";\n    const endTime = merchant.endTime || \"18:00\";\n\n    const [startHour, startMinute] = startTime.split(':').map(Number);\n    const [endHour, endMinute] = endTime.split(':').map(Number);\n\n    // Check if selected date is today\n    const today = new Date().toISOString().split('T')[0];\n    const isToday = formData.appointmentDate === today;\n    const now = new Date();\n    const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();\n\n    const slots = [];\n    let currentHour = startHour;\n    let currentMinute = startMinute;\n\n    while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {\n      const timeSlot = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;\n      const slotTimeInMinutes = currentHour * 60 + currentMinute;\n\n      // Skip time slots that have already passed today\n      if (isToday && slotTimeInMinutes <= currentTimeInMinutes) {\n        // Increment by 30 minutes and continue\n        currentMinute += 30;\n        if (currentMinute >= 60) {\n          currentMinute = 0;\n          currentHour++;\n        }\n        continue;\n      }\n\n      // Check if this time slot is occupied\n      const isOccupied = occupiedTimes.includes(timeSlot);\n\n      if (!isOccupied) {\n        slots.push(timeSlot);\n      }\n\n      // Increment by 30 minutes\n      currentMinute += 30;\n      if (currentMinute >= 60) {\n        currentMinute = 0;\n        currentHour++;\n      }\n    }\n\n    return slots;\n  };\n\n  // Get available time slots (generated slots minus occupied ones, considering service duration)\n  const getAvailableTimeSlots = () => {\n    const allSlots = generateAllTimeSlots();\n\n    if (!selectedService?.duration) {\n      // If no service selected, just filter out directly occupied times\n      return allSlots.filter(slot => !occupiedTimes.includes(slot));\n    }\n\n    const serviceDuration = selectedService.duration;\n\n    return allSlots.filter(slot => {\n      // Convert slot time to minutes\n      const [slotHour, slotMinute] = slot.split(':').map(Number);\n      const slotStartMinutes = slotHour * 60 + slotMinute;\n      const slotEndMinutes = slotStartMinutes + serviceDuration;\n\n      // Check if this slot conflicts with any occupied time\n      for (const occupiedTime of occupiedTimes) {\n        const [occupiedHour, occupiedMinute] = occupiedTime.split(':').map(Number);\n        const occupiedMinutes = occupiedHour * 60 + occupiedMinute;\n\n        // Each occupied slot is considered as a 30-minute block minimum\n        // But we need to check actual overlap with our service duration\n        const occupiedEndMinutes = occupiedMinutes + 30; // Minimum 30min block\n\n        // Check for any overlap\n        if (slotStartMinutes < occupiedEndMinutes && slotEndMinutes > occupiedMinutes) {\n          return false; // This slot conflicts\n        }\n      }\n\n      return true; // No conflicts found\n    });\n  };\n\n  const timeSlots = getAvailableTimeSlots();\n\n  // Format currency helper\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n    }).format(value / 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-accent/10 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={() => setLocation(\"/client-dashboard\")}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Voltar</span>\n            </Button>\n            <h1 className=\"text-3xl font-bold text-foreground\">Novo Agendamento</h1>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {/* Booking Form */}\n          <div className=\"md:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Agendar Serviço</CardTitle>\n                <CardDescription>\n                  Selecione o serviço, funcionário e horário desejado\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  {/* Service Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"service\">Serviço *</Label>\n                    <Select\n                      value={formData.serviceId}\n                      onValueChange={(value) => handleInputChange(\"serviceId\", value)}\n                      disabled={servicesLoading}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder={\n                          servicesLoading\n                            ? \"Carregando serviços...\"\n                            : \"Selecione um serviço\"\n                        } />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {services.map((service) => (\n                          <SelectItem key={service.id} value={service.id}>\n                            <div className=\"flex flex-col\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span>{service.name}</span>\n                                {(service as any).hasPromotion && (\n                                  <Badge variant=\"destructive\" className=\"text-xs\">\n                                    PROMOÇÃO\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {(service as any).hasPromotion ? (\n                                  <span>\n                                    <span className=\"line-through\">{formatCurrency((service as any).originalPrice)}</span>\n                                    {\" \"}\n                                    <span className=\"text-green-600 font-medium\">\n                                      {formatCurrency((service as any).promotionalPrice)}\n                                    </span>\n                                  </span>\n                                ) : (\n                                  formatCurrency(service.price)\n                                )} • {service.duration}min\n                              </div>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {selectedService?.description && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {selectedService.description}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Employee Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"employee\">Funcionário (opcional)</Label>\n                    <Select\n                      value={formData.employeeId || \"any\"}\n                      onValueChange={(value) => handleInputChange(\"employeeId\", value)}\n                      disabled={employeesLoading}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder={\n                          employeesLoading\n                            ? \"Carregando funcionários...\"\n                            : \"Selecione um funcionário ou deixe em branco\"\n                        } />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"any\">Qualquer funcionário disponível</SelectItem>\n                        {employees.map((employee) => (\n                          <SelectItem key={employee.id} value={employee.id}>\n                            <div className=\"flex flex-col\">\n                              <span>{employee.name}</span>\n                              {employee.specialties && (\n                                <span className=\"text-sm text-muted-foreground\">\n                                  {employee.specialties}\n                                </span>\n                              )}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Date and Time */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"appointmentDate\">Data *</Label>\n                      <div className=\"relative\">\n                        <Calendar className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          id=\"appointmentDate\"\n                          type=\"date\"\n                          className=\"pl-10\"\n                          value={formData.appointmentDate}\n                          onChange={(e) => handleInputChange(\"appointmentDate\", e.target.value)}\n                          min={(() => {\n                            const today = new Date();\n                            const merchant = merchantData?.[0];\n                            \n                            // Se o salão estiver fechado, só pode agendar a partir de amanhã\n                            if (merchant && !merchant.isOpen) {\n                              const tomorrow = new Date(today);\n                              tomorrow.setDate(today.getDate() + 1);\n                              return tomorrow.toISOString().split('T')[0];\n                            }\n                            \n                            // Se o salão estiver aberto, pode agendar a partir de hoje\n                            return today.toISOString().split('T')[0];\n                          })()}\n                          required\n                        />\n                      </div>\n                      {merchantData?.[0] && !merchantData[0].isOpen && (\n                        <p className=\"text-sm text-yellow-600 bg-yellow-50 p-2 rounded border\">\n                          ⚠️ O salão está fechado hoje. Você só pode agendar a partir de amanhã.\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"appointmentTime\">Horário *</Label>\n                      <div className=\"relative\">\n                        <Clock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground z-10\" />\n                        <Select\n                          value={formData.appointmentTime}\n                          onValueChange={(value) => handleInputChange(\"appointmentTime\", value)}\n                          disabled={occupiedTimesLoading || !formData.appointmentDate}\n                        >\n                          <SelectTrigger className=\"pl-10\">\n                            <SelectValue placeholder={\n                              occupiedTimesLoading\n                                ? \"Carregando horários...\"\n                                : !formData.appointmentDate\n                                ? \"Selecione uma data primeiro\"\n                                : timeSlots.length === 0\n                                ? \"Nenhum horário disponível\"\n                                : \"Selecione o horário\"\n                            } />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {timeSlots.map((time) => (\n                              <SelectItem key={time} value={time}>\n                                {time}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Availability Status */}\n                  {formData.employeeId && formData.appointmentDate && formData.appointmentTime && (\n                    <div className=\"p-3 rounded-lg border\">\n                      {availabilityLoading ? (\n                        <p className=\"text-sm text-muted-foreground\">Verificando disponibilidade...</p>\n                      ) : availability ? (\n                        <div className={`flex items-center space-x-2 ${availability.available ? 'text-green-600' : 'text-red-600'}`}>\n                          <div className={`w-2 h-2 rounded-full ${availability.available ? 'bg-green-600' : 'bg-red-600'}`} />\n                          <span className=\"text-sm font-medium\">\n                            {availability.available ? 'Horário disponível' : 'Horário indisponível'}\n                          </span>\n                        </div>\n                      ) : null}\n                    </div>\n                  )}\n\n                  {/* Notes */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"notes\">Observações (opcional)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      placeholder=\"Alguma observação especial...\"\n                      value={formData.notes}\n                      onChange={(e) => handleInputChange(\"notes\", e.target.value)}\n                      rows={3}\n                    />\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setLocation(\"/client-dashboard\")}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createAppointmentMutation.isPending || (formData.employeeId && availability && !availability.available)}\n                    >\n                      {createAppointmentMutation.isPending ? \"Agendando...\" : \"Confirmar Agendamento\"}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Service Info Sidebar */}\n          <div className=\"space-y-6\">\n            {selectedService && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Detalhes do Serviço</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold\">{selectedService.name}</h4>\n                    {selectedService.description && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {selectedService.description}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"font-medium\">\n                        {(selectedService as any).hasPromotion ? formatCurrency((selectedService as any).promotionalPrice) : formatCurrency(selectedService.price)}\n                      </span>\n                      {(selectedService as any).hasPromotion && (\n                        <span className=\"text-sm text-muted-foreground line-through\">\n                          {formatCurrency((selectedService as any).originalPrice)}\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm text-muted-foreground\">\n                        {selectedService.duration} minutos\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Instruções</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm text-muted-foreground space-y-2\">\n                <p>• Selecione o serviço desejado</p>\n                <p>• Escolha um funcionário ou deixe em branco para qualquer um disponível</p>\n                <p>• Escolha a data e horário</p>\n                <p>• Verifique se o horário está disponível</p>\n                <p>• Adicione observações se necessário</p>\n                {merchantData?.[0] && !merchantData[0].isOpen && (\n                  <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n                    <p className=\"text-yellow-800 font-medium\">\n                      🔒 Salão Fechado Hoje\n                    </p>\n                    <p className=\"text-yellow-700 text-xs mt-1\">\n                      O salão está temporariamente fechado. Agendamentos só podem ser feitos para os próximos dias.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":29165},"client/src/pages/client-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { authService } from \"@/lib/auth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar as CalendarIcon, Clock, User, Phone, Mail, MapPin, Store, ImageIcon, Star, Sparkles, X, CalendarDays, DollarSign } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format, addDays } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport ChangePasswordForm from \"@/components/auth/change-password-form\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  name?: string;\n  phone?: string;\n  merchantId?: string;\n}\n\ninterface Appointment {\n  id: string;\n  merchantId: string;\n  serviceId: string;\n  clientId?: string;\n  employeeId?: string;\n  clientName: string;\n  clientPhone: string;\n  clientEmail?: string;\n  appointmentDate: string;\n  appointmentTime: string;\n  notes?: string;\n  status: string;\n  createdAt: string;\n  serviceName?: string;\n  servicePrice?: number;\n  employeeName?: string;\n  rescheduleReason?: string; // Adicionado campo para motivo de reagendamento\n  actualStartTime?: string; // Novo campo para horário de início real\n  actualEndTime?: string; // Novo campo para horário de fim real\n  cancelReason?: string; // Campo para motivo de cancelamento\n}\n\ninterface Service {\n  id: string;\n  name: string;\n  description?: string;\n  price: number;\n  duration: number;\n  isActive: boolean;\n  merchantId: string;\n}\n\ninterface Merchant {\n  id: string;\n  name: string;\n  address: string;\n  phone: string;\n  logoUrl?: string;\n  isOpen: boolean;\n  workDays: string;\n  startTime: string;\n  endTime: string;\n  breakStartTime?: string;\n  breakEndTime?: string;\n}\n\ninterface MerchantPolicies {\n  cancellationFeeEnabled: boolean;\n  cancellationFeeAmount: number;\n  cancellationPolicyHours: number;\n}\n\ninterface AppointmentsResponse {\n  appointments: Appointment[];\n  merchantPolicies: MerchantPolicies;\n}\n\nexport default function ClientDashboard() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(authService.getState().user);\n  const [historyFilter, setHistoryFilter] = useState(\"month\"); // day, week, month\n  const [merchantPolicies, setMerchantPolicies] = useState<MerchantPolicies | null>(null);\n  const { toast } = useToast();\n\n  // Reschedule modal state\n  const [rescheduleModalOpen, setRescheduleModalOpen] = useState(false);\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState<string>(\"\");\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n  const [rescheduleReason, setRescheduleReason] = useState<string>(\"\");\n  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Function to check if appointment can be cancelled/rescheduled\n  const canModifyAppointment = (appointment: Appointment) => {\n    // Clientes podem cancelar/reagendar apenas agendamentos pendentes ou confirmados\n    if (![\"pending\", \"confirmed\"].includes(appointment.status)) {\n      return false;\n    }\n\n    // Verificar se está dentro do prazo definido pelo merchant\n    const now = new Date();\n\n    // Parse the appointment date and time correctly\n    // appointmentDate format: \"YYYY-MM-DD\", appointmentTime format: \"HH:MM\"\n    const appointmentDateTime = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}:00`);\n\n    const timeDiff = appointmentDateTime.getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 60 * 60);\n    const policyHours = merchantPolicies?.cancellationPolicyHours || 24;\n\n    console.log(\"DEBUG canModifyAppointment:\", {\n      appointmentDate: appointment.appointmentDate,\n      appointmentTime: appointment.appointmentTime,\n      appointmentDateTime: appointmentDateTime.toISOString(),\n      now: now.toISOString(),\n      hoursDiff: hoursDiff.toFixed(2),\n      policyHours,\n      canModify: hoursDiff >= policyHours\n    });\n\n    // Só pode reagendar se faltarem mais horas que a política exige\n    return hoursDiff > policyHours;\n  };\n\n  // Function to check if appointment can be cancelled\n  const canCancelAppointment = (appointment: Appointment) => {\n    // Clientes podem cancelar apenas agendamentos confirmados\n    if (appointment.status !== \"confirmed\") {\n      return false;\n    }\n\n    return true; // Cliente pode sempre cancelar, mas pode haver multa\n  };\n\n  // Function to check if appointment can be cancelled\n  const willHaveCancellationFee = (appointment: Appointment) => {\n    console.log(\"=== CHECKING CANCELLATION FEE ===\");\n    console.log(\"Merchant policies:\", merchantPolicies);\n    console.log(\"Appointment:\", {\n      id: appointment.id,\n      date: appointment.appointmentDate,\n      time: appointment.appointmentTime,\n      status: appointment.status\n    });\n\n    if (!merchantPolicies?.cancellationFeeEnabled) {\n      console.log(\"❌ Cancellation fee is DISABLED for this merchant\");\n      return false;\n    }\n\n    console.log(\"✅ Cancellation fee is ENABLED for this merchant\");\n\n    const now = new Date();\n\n    // Parse the appointment date and time correctly using ISO format\n    // appointmentDate format: \"YYYY-MM-DD\", appointmentTime format: \"HH:MM\"\n    const appointmentDateTime = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}:00`);\n\n    const timeDiff = appointmentDateTime.getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 60 * 60);\n    const policyHours = merchantPolicies.cancellationPolicyHours || 24;\n\n    console.log(\"Time calculation:\", {\n      now: now.toISOString(),\n      appointmentDateTimeISO: `${appointment.appointmentDate}T${appointment.appointmentTime}:00`,\n      appointmentDateTime: appointmentDateTime.toISOString(),\n      timeDiff: timeDiff,\n      hoursDiff: hoursDiff.toFixed(2),\n      policyHours: policyHours,\n      feeAmount: merchantPolicies.cancellationFeeAmount\n    });\n\n    // Haverá multa se cancelar com menos tempo que a política exige\n    const willHaveFee = hoursDiff < policyHours;\n\n    console.log(`⚖️ DECISION: ${willHaveFee ? 'WILL HAVE FEE' : 'NO FEE'} - ${hoursDiff.toFixed(2)}h remaining vs ${policyHours}h policy`);\n    console.log(\"=== END CHECKING CANCELLATION FEE ===\");\n\n    return willHaveFee;\n  };\n\n  // Function to get cancellation fee amount in reais\n  const getCancellationFeeAmount = () => {\n    if (!merchantPolicies?.cancellationFeeAmount) return 0;\n    return merchantPolicies.cancellationFeeAmount / 100; // Convert from cents to reais\n  };\n\n  // Mutation to cancel appointment\n  const cancelAppointmentMutation = useMutation({\n    mutationFn: async ({ appointmentId, reason }: { appointmentId: string; reason: string }) => {\n      const response = await apiRequest('POST', `/api/client/appointments/${appointmentId}/cancel`, { reason });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      // Invalidate all related queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments/history\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/penalties\"] });\n\n      // Force refetch to get updated data immediately\n      queryClient.refetchQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/client/penalties\"] });\n\n      const { cancellationFee } = data;\n      let message = \"Seu agendamento foi cancelado com sucesso.\";\n\n      if (cancellationFee?.hasFee) {\n        message += ` Foi aplicada uma multa de R$ ${cancellationFee.amountInReais.toFixed(2)}.`;\n      } else {\n        message += \" Não foi aplicada multa.\";\n      }\n\n      toast({\n        title: \"Agendamento cancelado\",\n        description: message,\n        variant: cancellationFee?.hasFee ? \"default\" : \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao cancelar\",\n        description: error.message || \"Não foi possível cancelar o agendamento.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Mutation to reschedule appointment\n  const rescheduleAppointmentMutation = useMutation({\n    mutationFn: async ({ appointmentId, newDate, newTime, reason }: {\n      appointmentId: string;\n      newDate: string;\n      newTime: string;\n      reason: string;\n    }) => {\n      return apiRequest('POST', `/api/client/appointments/${appointmentId}/reschedule`, { newDate, newTime, reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      toast({\n        title: \"Agendamento reagendado\",\n        description: \"Seu agendamento foi reagendado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao reagendar\",\n        description: error.message || \"Não foi possível reagendar o agendamento.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Function to handle appointment cancellation\n  const handleCancelAppointment = (appointment: Appointment) => {\n    console.log(\"=== CANCELAMENTO DEBUG ===\");\n    console.log(\"Appointment:\", appointment);\n    console.log(\"Merchant policies:\", merchantPolicies);\n\n    const hasFee = willHaveCancellationFee(appointment);\n    const feeAmount = getCancellationFeeAmount();\n\n    console.log(\"Fee calculation result:\", { hasFee, feeAmount });\n\n    const now = new Date();\n    const appointmentDateTime = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}:00`);\n    const timeDiff = appointmentDateTime.getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 60 * 60);\n    const policyHours = merchantPolicies?.cancellationPolicyHours || 24;\n\n    let message = \"Por favor, informe o motivo do cancelamento:\";\n    if (hasFee) {\n      message = `⚠️ ATENÇÃO: Este cancelamento terá uma multa de R$ ${feeAmount.toFixed(2)}.\\n\\n` +\n                `Motivo: Cancelamento com menos de ${policyHours}h de antecedência (${hoursDiff.toFixed(1)}h restantes).\\n\\n` +\n                `Por favor, informe o motivo do cancelamento:`;\n    }\n\n    const reason = prompt(message);\n    if (reason && reason.trim()) {\n      cancelAppointmentMutation.mutate({\n        appointmentId: appointment.id,\n        reason: reason.trim(),\n      });\n    }\n  };\n\n  // Function to handle appointment rescheduling\n  const handleRescheduleAppointment = (appointmentId: string) => {\n    setSelectedAppointmentId(appointmentId);\n    setSelectedDate(undefined);\n    setSelectedTime(\"\");\n    setRescheduleReason(\"\");\n    setAvailableTimeSlots([]);\n    setRescheduleModalOpen(true);\n  };\n\n  // Function to handle date selection and load available times\n  const handleDateSelection = async (date: Date | undefined) => {\n    setSelectedDate(date);\n    setSelectedTime(\"\");\n\n    if (date) {\n      const dateStr = format(date, \"yyyy-MM-dd\");\n      try {\n        // Generate time slots (9:00 to 18:00, 30-minute intervals)\n        const slots = [];\n        for (let hour = 9; hour < 18; hour++) {\n          slots.push(`${hour.toString().padStart(2, '0')}:00`);\n          slots.push(`${hour.toString().padStart(2, '0')}:30`);\n        }\n        setAvailableTimeSlots(slots);\n      } catch (error) {\n        console.error(\"Error loading time slots:\", error);\n        setAvailableTimeSlots([]);\n      }\n    }\n  };\n\n  // Function to submit reschedule\n  const handleSubmitReschedule = () => {\n    if (!selectedDate || !selectedTime || !rescheduleReason.trim()) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newDate = format(selectedDate, \"yyyy-MM-dd\");\n    rescheduleAppointmentMutation.mutate({\n      appointmentId: selectedAppointmentId,\n      newDate,\n      newTime: selectedTime,\n      reason: rescheduleReason.trim()\n    });\n\n    setRescheduleModalOpen(false);\n  };\n\n  // Fetch client's appointments\n  const { data: appointmentsData, isLoading: appointmentsLoading } = useQuery<AppointmentsResponse>({\n    queryKey: [\"/api/client/appointments\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/client/appointments`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar agendamentos\");\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n  });\n\n  // Update merchant policies when appointments data is received\n  useEffect(() => {\n    if (appointmentsData?.merchantPolicies) {\n      console.log(\"=== APPOINTMENTS DATA RECEIVED ===\");\n      console.log(\"Merchant policies from server:\", appointmentsData.merchantPolicies);\n      console.log(\"Appointments count:\", appointmentsData.appointments?.length || 0);\n      setMerchantPolicies(appointmentsData.merchantPolicies);\n      console.log(\"=== END APPOINTMENTS DATA ===\");\n    }\n  }, [appointmentsData]);\n\n  const clientAppointments = appointmentsData?.appointments || [];\n\n  // Fetch available services\n  const { data: availableServices = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/client/services\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/client/services`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar serviços\");\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n  });\n\n  // Fetch historical appointments with filter\n  const { data: historicalAppointments = [], isLoading: historyLoading } = useQuery<Appointment[]>({\n    queryKey: [\"/api/client/appointments/history\", historyFilter],\n    queryFn: async () => {\n      const response = await fetch(`/api/client/appointments/history?filter=${historyFilter}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar histórico\");\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n  });\n\n  // Fetch available merchants\n  const { data: availableMerchants = [] } = useQuery<Merchant[]>({\n    queryKey: [\"/api/client/merchants\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/client/merchants`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar salões\");\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n  });\n\n  // Fetch client penalties (multas)\n  const { data: clientPenalties = [], isLoading: penaltiesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/client/penalties\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/client/penalties\", {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return []; // No penalties found\n        }\n        throw new Error(\"Erro ao buscar multas\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"client\",\n    refetchInterval: 30000, // Refetch every 30 seconds to check if penalties were paid\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: \"Pendente\", variant: \"outline\" as const },\n      scheduled: { label: \"Agendado\", variant: \"default\" as const },\n      confirmed: { label: \"Confirmado\", variant: \"secondary\" as const },\n      in_progress: { label: \"Em Andamento\", variant: \"default\" as const },\n      completed: { label: \"Concluído\", variant: \"secondary\" as const },\n      cancelled: { label: \"Cancelado\", variant: \"destructive\" as const },\n      late: { label: \"Atrasado\", variant: \"destructive\" as const },\n      no_show: { label: \"Não Compareceu\", variant: \"destructive\" as const },\n      rescheduled: { label: \"Reagendado\", variant: \"outline\" as const },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  // Format currency helper\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n    }).format(value / 100); // Convert cents to reais\n  };\n\n  // Format working days\n  const formatWorkDays = (workDaysStr: string) => {\n    const weekDaysMap = {\n      0: \"Dom\", 1: \"Seg\", 2: \"Ter\", 3: \"Qua\", 4: \"Qui\", 5: \"Sex\", 6: \"Sáb\"\n    };\n\n    try {\n      const workDays = JSON.parse(workDaysStr || \"[]\");\n      return workDays.map((day: number) => weekDaysMap[day as keyof typeof weekDaysMap]).join(\", \");\n    } catch {\n      return \"Não informado\";\n    }\n  };\n\n  // Separate upcoming and past appointments\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // Start of today, ignoring time\n\n  const upcomingAppointments = clientAppointments.filter(apt => {\n    const appointmentDate = new Date(apt.appointmentDate + 'T00:00:00'); // Ensure local date parsing\n    return appointmentDate >= today && (apt.status === \"pending\" || apt.status === \"scheduled\" || apt.status === \"confirmed\" || apt.status === \"late\" || apt.status === \"in_progress\");\n  }).sort((a, b) => new Date(a.appointmentDate).getTime() - new Date(b.appointmentDate).getTime());\n\n  // Get completed appointments from both current and historical data\n  const completedFromCurrent = clientAppointments.filter(apt => apt.status === \"completed\");\n  const completedFromHistory = historicalAppointments.filter(apt => apt.status === \"completed\");\n\n  // Combine and deduplicate completed appointments\n  const allCompleted = [...completedFromCurrent, ...completedFromHistory];\n  const uniqueCompleted = allCompleted.filter((apt, index, self) =>\n    index === self.findIndex(t => t.id === apt.id)\n  );\n\n  const pastAppointments = [...uniqueCompleted, ...historicalAppointments.filter(apt => apt.status === \"cancelled\")]\n    .sort((a, b) => new Date(b.appointmentDate).getTime() - new Date(a.appointmentDate).getTime());\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-2\">Carregando...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-accent/10 p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Meus Agendamentos</h1>\n            <p className=\"text-muted-foreground\">Bem-vindo(a), {user.name}!</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              onClick={() => setLocation(\"/client-booking\")}\n              className=\"flex items-center space-x-2\"\n            >\n              <CalendarIcon className=\"w-4 h-4\" />\n              <span>Novo Agendamento</span>\n            </Button>\n            <Button\n              onClick={() => authService.logout()}\n              variant=\"outline\"\n            >\n              Sair\n            </Button>\n          </div>\n        </div>\n\n        {/* Client Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"w-5 h-5\" />\n              Meus Dados\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Mail className=\"w-4 h-4 text-muted-foreground\" />\n              <span>{user.email}</span>\n            </div>\n            {user.phone && (\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                <span>{user.phone}</span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <CalendarIcon className=\"w-8 h-8 text-primary\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{upcomingAppointments.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Próximos Agendamentos</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <Clock className=\"w-8 h-8 text-green-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{uniqueCompleted.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Serviços Realizados</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <MapPin className=\"w-8 h-8 text-blue-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{availableServices.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Serviços Disponíveis</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Available Salons */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Store className=\"w-5 h-5\" />\n              Salões Disponíveis\n            </CardTitle>\n            <CardDescription>\n              Conheça os salões onde você pode agendar seus serviços\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {availableMerchants.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\">\n                Nenhum salão disponível no momento.\n              </p>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {availableMerchants.map((merchant) => (\n                  <Card key={merchant.id} className=\"border border-border hover:shadow-md transition-shadow\" data-testid={`card-merchant-${merchant.id}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"space-y-3\">\n                        {/* Logo and Name */}\n                        <div className=\"flex items-center space-x-3\">\n                          {merchant.logoUrl ? (\n                            <img\n                              src={merchant.logoUrl.startsWith('/uploads/') ? `${window.location.origin}${merchant.logoUrl}` : merchant.logoUrl}\n                              alt={`Logo ${merchant.name}`}\n                              className=\"w-12 h-12 rounded-full object-cover border-2 border-border\"\n                              data-testid={`img-merchant-logo-${merchant.id}`}\n                            />\n                          ) : (\n                            <div className=\"w-12 h-12 rounded-full bg-muted flex items-center justify-center border-2 border-border\">\n                              <ImageIcon className=\"w-6 h-6 text-muted-foreground\" />\n                            </div>\n                          )}\n                          <div>\n                            <h3 className=\"font-semibold text-foreground\" data-testid={`text-merchant-name-${merchant.id}`}>\n                              {merchant.name}\n                            </h3>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant={merchant.isOpen ? \"default\" : \"secondary\"} data-testid={`badge-status-${merchant.id}`}>\n                                {merchant.isOpen ? \"Aberto\" : \"Fechado\"}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Contact Info */}\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                            <MapPin className=\"w-4 h-4\" />\n                            <span data-testid={`text-merchant-address-${merchant.id}`}>{merchant.address}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                            <Phone className=\"w-4 h-4\" />\n                            <span data-testid={`text-merchant-phone-${merchant.id}`}>{merchant.phone}</span>\n                          </div>\n                        </div>\n\n                        {/* Working Hours */}\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                            <CalendarIcon className=\"w-4 h-4\" />\n                            <span data-testid={`text-merchant-days-${merchant.id}`}>{formatWorkDays(merchant.workDays)}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span data-testid={`text-merchant-hours-${merchant.id}`}>\n                              {merchant.startTime} - {merchant.endTime}\n                              {merchant.breakStartTime && merchant.breakEndTime && (\n                                ` (Pausa: ${merchant.breakStartTime} - ${merchant.breakEndTime})`\n                              )}\n                            </span>\n                          </div>\n                        </div>\n\n                        {/* Action Button */}\n                        <Button\n                          onClick={() => setLocation(\"/client-booking\")}\n                          className=\"w-full mt-4\"\n                          disabled={!merchant.isOpen}\n                          data-testid={`button-book-${merchant.id}`}\n                        >\n                          {merchant.isOpen ? \"Agendar Serviço\" : \"Salão Fechado\"}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Multas Pendentes - Only show if cancellation fee is enabled and there are penalties */}\n        {merchantPolicies?.cancellationFeeEnabled && clientPenalties && clientPenalties.filter(p => p.status === \"pending\").length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5 text-red-600\" />\n                Multas Pendentes\n              </CardTitle>\n              <CardDescription>\n                Multas de cancelamento que devem ser pagas\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {clientPenalties\n                  .filter(penalty => penalty.status === \"pending\")\n                  .map((penalty) => {\n                    // Buscar o agendamento relacionado para mostrar detalhes\n                    const relatedAppointment = [...upcomingAppointments, ...pastAppointments].find(\n                      apt => apt.id === penalty.appointmentId\n                    );\n\n                    return (\n                      <div key={penalty.id} className=\"border border-red-200 rounded-lg p-4 bg-red-50 dark:bg-red-950/20\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div className=\"space-y-1\">\n                            <h4 className=\"font-semibold text-red-800 dark:text-red-200\">\n                              Multa de {penalty.type === \"cancellation\" ? \"Cancelamento\" : penalty.type}\n                            </h4>\n                            <p className=\"text-sm text-red-600 dark:text-red-400\">{penalty.reason}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Multa criada em: {format(new Date(penalty.createdAt), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold text-red-600 dark:text-red-400\">\n                              R$ {(penalty.amount / 100).toFixed(2)}\n                            </p>\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              Pendente\n                            </Badge>\n                          </div>\n                        </div>\n\n                        {/* Informações do agendamento cancelado */}\n                        {relatedAppointment && (\n                          <div className=\"mt-3 p-3 bg-gray-100 dark:bg-gray-800 rounded border-l-4 border-blue-400\">\n                            <h5 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center gap-2\">\n                              <CalendarIcon className=\"w-4 h-4\" />\n                              Informações do Agendamento Cancelado\n                            </h5>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                              {/* Serviço */}\n                              <div className=\"flex items-center gap-2\">\n                                <Star className=\"w-4 h-4 text-blue-600\" />\n                                <div>\n                                  <span className=\"font-medium\">Serviço:</span>\n                                  <p className=\"text-blue-600\">{relatedAppointment.serviceName || 'Serviço'}</p>\n                                </div>\n                              </div>\n\n                              {/* Funcionário */}\n                              {relatedAppointment.employeeName && (\n                                <div className=\"flex items-center gap-2\">\n                                  <Sparkles className=\"w-4 h-4 text-purple-600\" />\n                                  <div>\n                                    <span className=\"font-medium\">Funcionário:</span>\n                                    <p className=\"text-purple-600\">{relatedAppointment.employeeName}</p>\n                                  </div>\n                                </div>\n                              )}\n\n                              {/* Data e hora */}\n                              <div className=\"flex items-center gap-2\">\n                                <Clock className=\"w-4 h-4 text-green-600\" />\n                                <div>\n                                  <span className=\"font-medium\">Data/Hora:</span>\n                                  <p className=\"text-green-600\">\n                                    {format(new Date(relatedAppointment.appointmentDate + 'T12:00:00'), \"dd/MM/yyyy\", { locale: ptBR })} às {relatedAppointment.appointmentTime}\n                                  </p>\n                                </div>\n                              </div>\n\n                              {/* Preço do serviço */}\n                              {relatedAppointment.servicePrice && (\n                                <div className=\"flex items-center gap-2\">\n                                  <DollarSign className=\"w-4 h-4 text-orange-600\" />\n                                  <div>\n                                    <span className=\"font-medium\">Valor do serviço:</span>\n                                    <p className=\"text-orange-600\">{formatCurrency(relatedAppointment.servicePrice)}</p>\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n\n                            {/* Motivo do cancelamento */}\n                            {relatedAppointment.cancelReason && (\n                              <div className=\"mt-3 p-2 bg-white dark:bg-gray-700 rounded\">\n                                <div className=\"flex items-start gap-2\">\n                                  <X className=\"w-4 h-4 text-red-500 mt-0.5\" />\n                                  <div>\n                                    <span className=\"font-medium text-red-600\">Motivo do cancelamento:</span>\n                                    <p className=\"text-red-500 text-sm mt-1\">{relatedAppointment.cancelReason}</p>\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        )}\n\n                        <div className=\"mt-3 p-3 bg-white dark:bg-gray-800 rounded border-l-4 border-red-400\">\n                          <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                            <strong>Como pagar:</strong> Entre em contato com o salão para quitar esta multa.\n                            Após o pagamento, ela será marcada como paga pelo estabelecimento e será removida desta lista.\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Upcoming Appointments */}\n        {upcomingAppointments.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CalendarIcon className=\"w-5 h-5\" />\n                Próximos Agendamentos\n              </CardTitle>\n              <CardDescription>\n                Seus agendamentos confirmados\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {upcomingAppointments.map((appointment) => (\n                  <div key={appointment.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Star className=\"w-4 h-4 text-primary\" />\n                          <h4 className=\"font-semibold\">{appointment.serviceName || 'Serviço'}</h4>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <CalendarIcon className=\"w-4 h-4\" />\n                          <span>\n                            {format(new Date(appointment.appointmentDate + 'T12:00:00'), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                          </span>\n                          <Clock className=\"w-4 h-4 ml-2\" />\n                          <span>\n                            {appointment.status === \"in_progress\" || appointment.status === \"completed\" ? (\n                              <>\n                                {appointment.actualStartTime ? (\n                                  <span className=\"text-blue-600 font-medium\">\n                                    Iniciado: {appointment.actualStartTime}\n                                  </span>\n                                ) : (\n                                  <span>Agendado: {appointment.appointmentTime}</span>\n                                )}\n                                {appointment.status === \"completed\" && appointment.actualEndTime && (\n                                  <span className=\"text-green-600 font-medium ml-2\">\n                                    - Concluído: {appointment.actualEndTime}\n                                  </span>\n                                )}\n                                {appointment.status === \"in_progress\" && (\n                                  <span className=\"text-orange-600 font-medium ml-2\">\n                                    - Em andamento...\n                                  </span>\n                                )}\n                              </>\n                            ) : (\n                              <>\n                                {appointment.appointmentTime}\n                                <span className=\"text-gray-500 text-xs ml-1\">(agendado)</span>\n                              </>\n                            )}\n                          </span>\n                        </div>\n                        {appointment.employeeName && (\n                          <div className=\"flex items-center gap-2 text-sm text-blue-600 font-medium\">\n                            <Sparkles className=\"w-4 h-4\" />\n                            <span>Especialista: {appointment.employeeName}</span>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-col items-end gap-2\">\n                        {getStatusBadge(appointment.status)}\n                        {(appointment.status === \"pending\" || canModifyAppointment(appointment) || canCancelAppointment(appointment)) && (\n                          <div className=\"flex gap-2 mt-2\">\n                            {(appointment.status === \"pending\" || canModifyAppointment(appointment)) && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleRescheduleAppointment(appointment.id)}\n                                disabled={rescheduleAppointmentMutation.isPending}\n                                className=\"flex items-center gap-1\"\n                                data-testid={`button-reschedule-${appointment.id}`}\n                              >\n                                <CalendarDays className=\"w-3 h-3\" />\n                                Reagendar\n                              </Button>\n                            )}\n                            {appointment.status === \"confirmed\" && canCancelAppointment(appointment) && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleCancelAppointment(appointment)}\n                                disabled={cancelAppointmentMutation.isPending}\n                                className=\"flex items-center gap-1\"\n                                data-testid={`button-cancel-${appointment.id}`}\n                                title={willHaveCancellationFee(appointment)\n                                  ? `⚠️ Cancelamento com multa de R$ ${getCancellationFeeAmount().toFixed(2)}`\n                                  : \"✅ Cancelamento sem multa\"\n                                }\n                              >\n                                <X className=\"w-3 h-3\" />\n                                Cancelar\n                                {willHaveCancellationFee(appointment) && (\n                                  <span className=\"text-xs ml-1\">(R$ {getCancellationFeeAmount().toFixed(2)})</span>\n                                )}\n                              </Button>\n                            )}\n                          </div>\n                        )}\n\n                      </div>\n                    </div>\n                    {appointment.servicePrice !== undefined && (\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <span>💰</span>\n                        {(appointment as any).hasPromotion ? (\n                          <div className=\"flex flex-col\">\n                            <span className=\"text-sm line-through text-gray-500\">\n                              {formatCurrency((appointment as any).originalPrice)}\n                            </span>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-green-600 font-medium\">\n                                {formatCurrency((appointment as any).promotionalPrice)}\n                              </span>\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                OFERTA\n                              </Badge>\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-green-600 font-medium\">{formatCurrency(appointment.servicePrice)}</span>\n                        )}\n                      </div>\n                    )}\n                    {appointment.notes && (\n                      <div className=\"flex items-start gap-2 text-sm text-muted-foreground mt-2\">\n                        <MapPin className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Observações: {appointment.notes}</span>\n                      </div>\n                    )}\n                    {appointment.rescheduleReason && (\n                      <div className=\"flex items-start gap-2 text-sm text-orange-600 font-medium mt-2\">\n                        <Clock className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Motivo do reagendamento: {appointment.rescheduleReason}</span>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Available Services */}\n        {availableServices.length > 0 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Store className=\"w-5 h-5\" />\n                    Serviços Disponíveis\n                  </CardTitle>\n                  <CardDescription>\n                    Todos os serviços oferecidos pelo salão\n                  </CardDescription>\n                </div>\n                <Button\n                  onClick={() => setLocation(\"/client-booking\")}\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2\"\n                >\n                  <CalendarIcon className=\"w-4 h-4\" />\n                  <span>Agendar</span>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {availableServices.map((service) => (\n                  <div key={service.id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Star className=\"w-4 h-4 text-primary\" />\n                      <h4 className=\"font-semibold\">{service.name}</h4>\n                    </div>\n                    {service.description && (\n                      <p className=\"text-sm text-muted-foreground mb-3 flex items-start gap-2\">\n                        <MapPin className=\"w-3 h-3 mt-0.5 text-muted-foreground flex-shrink-0\" />\n                        {service.description}\n                      </p>\n                    )}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-1\">\n                          <span className=\"text-lg font-bold text-green-600\">💰</span>\n                          {(service as any).hasPromotion ? (\n                            <div className=\"flex flex-col\">\n                              <span className=\"text-sm line-through text-gray-500\">\n                                {formatCurrency((service as any).originalPrice)}\n                              </span>\n                              <div className=\"flex items-center gap-1\">\n                                <span className=\"text-lg font-bold text-green-600\">\n                                  {formatCurrency((service as any).promotionalPrice)}\n                                </span>\n                                <Badge variant=\"destructive\" className=\"text-xs\">\n                                  OFERTA\n                                </Badge>\n                              </div>\n                            </div>\n                          ) : (\n                            <span className=\"text-lg font-bold text-green-600\">\n                              {formatCurrency(service.price)}\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                          <span className=\"text-sm text-muted-foreground bg-gray-100 px-2 py-1 rounded\">\n                            {service.duration}min\n                          </span>\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => setLocation(\"/client-booking\")}\n                        className=\"w-full flex items-center gap-2\"\n                      >\n                        <CalendarIcon className=\"w-4 h-4\" />\n                        Agendar Este Serviço\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Past Appointments */}\n        {pastAppointments.length > 0 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5\" />\n                    Histórico de Serviços\n                  </CardTitle>\n                  <CardDescription>\n                    Serviços realizados e cancelados\n                  </CardDescription>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <CalendarIcon className=\"w-4 h-4 text-muted-foreground\" />\n                  <select\n                    value={historyFilter}\n                    onChange={(e) => setHistoryFilter(e.target.value)}\n                    className=\"px-3 py-1 border rounded-md text-sm\"\n                  >\n                    <option value=\"week\">Esta Semana</option>\n                    <option value=\"month\">Este Mês</option>\n                    <option value=\"all\">Todos</option>\n                  </select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {historyLoading ? (\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Clock className=\"w-4 h-4 animate-spin\" />\n                    <span>Carregando histórico...</span>\n                  </div>\n                ) : pastAppointments.slice(0, 10).map((appointment) => (\n                  <div key={appointment.id} className=\"border rounded-lg p-4 opacity-75\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Star className=\"w-4 h-4 text-primary opacity-75\" />\n                          <h4 className=\"font-semibold\">{appointment.serviceName || 'Serviço'}</h4>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <CalendarIcon className=\"w-4 h-4\" />\n                          <span>\n                            {format(new Date(appointment.appointmentDate + 'T12:00:00'), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                          </span>\n                          <Clock className=\"w-4 h-4 ml-2\" />\n                          <span>\n                            {appointment.status === \"completed\" ? (\n                              <>\n                                {appointment.actualStartTime && appointment.actualEndTime ? (\n                                  <>\n                                    <span className=\"text-blue-600 font-medium\">\n                                      Realizado: {appointment.actualStartTime} - {appointment.actualEndTime}\n                                    </span>\n                                  </>\n                                ) : (\n                                  <span>Agendado: {appointment.appointmentTime}</span>\n                                )}\n                              </>\n                            ) : (\n                              <>\n                                {appointment.appointmentTime}\n                                <span className=\"text-gray-500 text-xs ml-1\">(agendado)</span>\n                              </>\n                            )}\n                          </span>\n                        </div>\n                        {appointment.employeeName && (\n                          <div className=\"flex items-center gap-2 text-sm text-blue-600 font-medium\">\n                            <Sparkles className=\"w-4 h-4\" />\n                            <span>Especialista: {appointment.employeeName}</span>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-col items-end gap-2\">\n                        {getStatusBadge(appointment.status)}\n                        {(canModifyAppointment(appointment) || canCancelAppointment(appointment)) && (\n                          <div className=\"flex gap-2 mt-2\">\n                            {canModifyAppointment(appointment) && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleRescheduleAppointment(appointment.id)}\n                                disabled={rescheduleAppointmentMutation.isPending}\n                                className=\"flex items-center gap-1\"\n                                data-testid={`button-reschedule-${appointment.id}`}\n                              >\n                                <CalendarDays className=\"w-3 h-3\" />\n                                Reagendar\n                              </Button>\n                            )}\n                            {canCancelAppointment(appointment) && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleCancelAppointment(appointment)}\n                                disabled={cancelAppointmentMutation.isPending}\n                                className=\"flex items-center gap-1\"\n                                data-testid={`button-cancel-${appointment.id}`}\n                                title={willHaveCancellationFee(appointment)\n                                  ? `⚠️ Cancelamento com multa de R$ ${getCancellationFeeAmount().toFixed(2)}`\n                                  : \"✅ Cancelamento sem multa\"\n                                }\n                              >\n                                <X className=\"w-3 h-3\" />\n                                Cancelar\n                                {willHaveCancellationFee(appointment) && (\n                                  <span className=\"text-xs ml-1\">(R$ {getCancellationFeeAmount().toFixed(2)})</span>\n                                )}\n                              </Button>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    {appointment.servicePrice !== undefined && (\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <span>💰</span>\n                        {(appointment as any).hasPromotion ? (\n                          <div className=\"flex flex-col\">\n                            <span className=\"text-sm line-through text-gray-500\">\n                              {formatCurrency((appointment as any).originalPrice)}\n                            </span>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-green-600 font-medium\">\n                                {formatCurrency((appointment as any).promotionalPrice)}\n                              </span>\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                OFERTA\n                              </Badge>\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-green-600 font-medium\">{formatCurrency(appointment.servicePrice)}</span>\n                        )}\n                      </div>\n                    )}\n                    {appointment.rescheduleReason && appointment.status !== \"completed\" && (\n                      <div className=\"flex items-start gap-2 text-sm text-orange-600 font-medium mt-2\">\n                        <Clock className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Motivo do reagendamento: {appointment.rescheduleReason}</span>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* No appointments message */}\n        {clientAppointments.length === 0 && !appointmentsLoading && (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <CalendarIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhum agendamento encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                Entre em contato para fazer seu primeiro agendamento!\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Reschedule Modal */}\n        <Dialog open={rescheduleModalOpen} onOpenChange={setRescheduleModalOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <CalendarDays className=\"w-5 h-5\" />\n                Reagendar Agendamento\n              </DialogTitle>\n              <DialogDescription>\n                Selecione uma nova data e horário para seu agendamento.\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              {/* Calendar */}\n              <div className=\"space-y-2\">\n                <Label>Nova Data</Label>\n                <Calendar\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={handleDateSelection}\n                  disabled={(date) => date < addDays(new Date(), 1)}\n                  initialFocus\n                  locale={ptBR}\n                  className=\"rounded-md border\"\n                />\n              </div>\n\n              {/* Time Selection */}\n              {selectedDate && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reschedule-time\">Novo Horário</Label>\n                  <Select value={selectedTime} onValueChange={setSelectedTime}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione o horário\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableTimeSlots.map((time) => (\n                        <SelectItem key={time} value={time}>\n                          {time}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Reason */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reschedule-reason\">Motivo do Reagendamento</Label>\n                <Textarea\n                  id=\"reschedule-reason\"\n                  placeholder=\"Informe o motivo do reagendamento...\"\n                  value={rescheduleReason}\n                  onChange={(e) => setRescheduleReason(e.target.value)}\n                  rows={3}\n                />\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setRescheduleModalOpen(false)}\n              >\n                Cancelar\n              </Button>\n              <Button\n                onClick={handleSubmitReschedule}\n                disabled={rescheduleAppointmentMutation.isPending || !selectedDate || !selectedTime || !rescheduleReason.trim()}\n              >\n                {rescheduleAppointmentMutation.isPending ? \"Reagendando...\" : \"Reagendar\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Account Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Configurações da Conta</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"max-w-md\">\n              <ChangePasswordForm />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":59098},"client/src/pages/clients.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Plus, Edit, Trash2, Users, Mail, Phone, ArrowLeft, User } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Client {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  notes?: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport default function Clients() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState(authService.getState().user);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    phone: \"\",\n    notes: \"\",\n    isActive: true,\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Fetch clients\n  const { data: clients, isLoading, error } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/clients\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n          return [];\n        }\n        throw new Error('Failed to fetch clients');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (clientData: any) => {\n      const response = await fetch(\"/api/clients\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(clientData),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n          return;\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao criar cliente\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Cliente criado com sucesso\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/clients\"] });\n\n      setIsCreateDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateClientMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/clients/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n          return;\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao atualizar cliente\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Cliente atualizado com sucesso\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/clients\"] });\n\n      setEditingClient(null);\n      resetForm();\n      setIsCreateDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteClientMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/clients/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n          return;\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao deletar cliente\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Cliente removido com sucesso\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/clients\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      phone: \"\",\n      notes: \"\",\n      isActive: true,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.name || !formData.email || !formData.phone) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingClient) {\n      const updateData = { ...formData };\n      if (!formData.password) {\n        delete updateData.password; // Don't update password if empty\n      }\n      updateClientMutation.mutate({ id: editingClient.id, data: updateData });\n    } else {\n      if (!formData.password) {\n        toast({\n          title: \"Erro\",\n          description: \"Senha é obrigatória para novos clientes\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      createClientMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (client: Client) => {\n    setEditingClient(client);\n    setFormData({\n      name: client.name,\n      email: client.email,\n      password: \"\",\n      phone: client.phone,\n      notes: client.notes || \"\",\n      isActive: client.isActive,\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteClientMutation.mutate(id);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (!authService.getState().isAuthenticated) {\n    setLocation(\"/login\");\n    return null; // Render nothing while redirecting\n  }\n\n  if (user?.role !== \"merchant\") {\n    return <div>Acesso negado</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"w-6 h-6 text-primary\" />\n                <h1 className=\"text-2xl font-bold text-foreground\">Clientes</h1>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-muted-foreground\">Comerciante:</p>\n              <p className=\"text-sm font-medium text-foreground\">{user?.name}</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total</p>\n                    <p className=\"text-2xl font-bold\">{clients?.length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Ativos</p>\n                    <p className=\"text-2xl font-bold\">{clients?.filter(c => c.isActive).length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-gray-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Inativos</p>\n                    <p className=\"text-2xl font-bold\">{clients?.filter(c => !c.isActive).length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Clients Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Lista de Clientes</CardTitle>\n                <Dialog open={isCreateDialogOpen} onOpenChange={(open) => {\n                  setIsCreateDialogOpen(open);\n                  if (!open) {\n                    setEditingClient(null);\n                    resetForm();\n                  }\n                }}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Novo Cliente\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingClient ? \"Editar Cliente\" : \"Novo Cliente\"}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Nome *</Label>\n                        <Input\n                          id=\"name\"\n                          type=\"text\"\n                          value={formData.name}\n                          onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">\n                          Senha {editingClient ? \"(deixe vazio para manter)\" : \"*\"}\n                        </Label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          value={formData.password}\n                          onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                          required={!editingClient}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Telefone *</Label>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          value={formData.phone}\n                          onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"notes\">Observações (opcional)</Label>\n                        <Textarea\n                          id=\"notes\"\n                          placeholder=\"Preferências, alergias, observações...\"\n                          value={formData.notes}\n                          onChange={(e) => handleInputChange(\"notes\", e.target.value)}\n                          rows={3}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"isActive\"\n                          checked={formData.isActive}\n                          onChange={(e) => handleInputChange(\"isActive\", e.target.checked)}\n                        />\n                        <Label htmlFor=\"isActive\">Cliente ativo</Label>\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsCreateDialogOpen(false)}\n                        >\n                          Cancelar\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={createClientMutation.isPending || updateClientMutation.isPending}\n                        >\n                          {createClientMutation.isPending || updateClientMutation.isPending\n                            ? \"Salvando...\"\n                            : editingClient\n                            ? \"Atualizar\"\n                            : \"Criar\"\n                          }\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <p>Carregando clientes...</p>\n              ) : error ? (\n                <p className=\"text-red-600\">Erro ao carregar clientes</p>\n              ) : clients && clients.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nome</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Telefone</TableHead>\n                        <TableHead>Observações</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {clients.map((client) => (\n                        <TableRow key={client.id}>\n                          <TableCell className=\"font-medium\">{client.name}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-1\">\n                              <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                              <span>{client.email}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-1\">\n                              <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                              <span>{client.phone}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {client.notes && client.notes.length > 50 \n                                ? `${client.notes.substring(0, 50)}...`\n                                : client.notes || \"Nenhuma\"\n                              }\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={client.isActive ? \"success\" : \"secondary\"}>\n                              {client.isActive ? \"Ativo\" : \"Inativo\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEdit(client)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button variant=\"ghost\" size=\"sm\">\n                                    <Trash2 className=\"w-4 h-4 text-red-600\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Remover cliente</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Tem certeza que deseja remover {client.name}? Esta ação não pode ser desfeita.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                    <AlertDialogAction\n                                      onClick={() => handleDelete(client.id)}\n                                      className=\"bg-red-600 hover:bg-red-700\"\n                                    >\n                                      Remover\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhum cliente cadastrado</p>\n                  <p className=\"text-sm text-muted-foreground\">Clique em \"Novo Cliente\" para começar</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":21033},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Store, CheckCircle, PlusCircle, Clock } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport ChangePasswordForm from \"@/components/auth/change-password-form\";\n\ninterface MerchantStats {\n  total: number;\n  active: number;\n  pending: number;\n  inactive: number;\n  thisMonth: number;\n}\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState(authService.getState().user);\n\n  // Role guard - redirect non-admin users to their appropriate dashboards\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n      \n      // Redirect non-admin users to their appropriate dashboards\n      if (state.user?.role === \"merchant\") {\n        setLocation(\"/merchant-dashboard\");\n      } else if (state.user?.role === \"employee\") {\n        setLocation(\"/employee-dashboard\");\n      }\n    });\n    return unsubscribe;\n  }, [setLocation]);\n\n  // Check on component mount as well\n  useEffect(() => {\n    const currentUser = authService.getState().user;\n    if (currentUser?.role === \"merchant\") {\n      setLocation(\"/merchant-dashboard\");\n    } else if (currentUser?.role === \"employee\") {\n      setLocation(\"/employee-dashboard\");\n    }\n  }, [setLocation]);\n\n  const { data: stats, isLoading } = useQuery<MerchantStats>({\n    queryKey: [\"/api/merchants/stats\"],\n    enabled: authService.getState().isAuthenticated && (!user || user.role === \"admin\"),\n  });\n\n  const formatDate = () => {\n    return new Date().toLocaleString(\"pt-BR\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const statsCards = [\n    {\n      title: \"Total de Comerciantes\",\n      value: stats?.total || 0,\n      icon: Store,\n      color: \"bg-primary/10 text-primary\",\n    },\n    {\n      title: \"Comerciantes Ativos\",\n      value: stats?.active || 0,\n      icon: CheckCircle,\n      color: \"bg-green-100 text-green-600\",\n    },\n    {\n      title: \"Novos Este Mês\",\n      value: stats?.thisMonth || 0,\n      icon: PlusCircle,\n      color: \"bg-blue-100 text-blue-600\",\n    },\n    {\n      title: \"Pendentes\",\n      value: stats?.pending || 0,\n      icon: Clock,\n      color: \"bg-yellow-100 text-yellow-600\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-dashboard\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Dashboard</h2>\n              <div className=\"text-sm text-muted-foreground\">\n                Última atualização: <span data-testid=\"text-last-update\">{formatDate()}</span>\n              </div>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {statsCards.map((stat, index) => {\n                const Icon = stat.icon;\n                return (\n                  <Card key={index} data-testid={`card-stat-${index}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                          <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-value-${index}`}>\n                            {isLoading ? \"-\" : stat.value}\n                          </p>\n                        </div>\n                        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${stat.color}`}>\n                          <Icon className=\"w-6 h-6\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Atividade Recente</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"text-center text-muted-foreground\" data-testid=\"loading-activity\">\n                    Carregando atividades...\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"activity-list\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-foreground\">\n                          Sistema iniciado com <strong>{stats?.total || 0} comerciantes</strong> cadastrados\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">Agora</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-foreground\">\n                          <strong>{stats?.active || 0} comerciantes ativos</strong> no sistema\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">Agora</p>\n                      </div>\n                    </div>\n                    {(stats?.pending || 0) > 0 && (\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm text-foreground\">\n                            <strong>{stats?.pending} comerciantes</strong> aguardando aprovação\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">Agora</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Account Settings */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Configurações da Conta</h3>\n                <ChangePasswordForm />\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6971},"client/src/pages/employee-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, Clock, User, LogOut, Check, X, Edit3, Play, CheckCircle, AlertCircle, UserX, Trash2, History, DollarSign, Phone, Mail, FileText, Star, Scissors } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport ChangePasswordForm from \"@/components/auth/change-password-form\";\n\n\ninterface Appointment {\n  id: string;\n  clientName: string;\n  clientPhone: string;\n  appointmentDate: string;\n  appointmentTime: string;\n  status: string;\n  notes?: string;\n  serviceName?: string;\n  servicePrice?: number;\n  rescheduleReason?: string;\n  newDate?: string;\n  newTime?: string;\n  employeePaymentType?: string;\n  employeeEarning?: number;\n  cancelReason?: string;\n  actualStartTime?: string;\n  actualEndTime?: string;\n}\n\ninterface EmployeeStats {\n  appointments: {\n    today: number;\n    thisWeek: number;\n    thisMonth: number;\n  };\n}\n\n// Helper function to get status badge\nfunction getStatusBadge(status: string) {\n  const statusConfig = {\n    pending: { label: \"Pendente\", className: \"bg-yellow-100 text-yellow-700\" },\n    scheduled: { label: \"Agendado\", className: \"bg-blue-100 text-blue-700\" },\n    confirmed: { label: \"Confirmado\", className: \"bg-green-100 text-green-700\" },\n    in_progress: { label: \"Em Andamento\", className: \"bg-purple-100 text-purple-700\" },\n    completed: { label: \"Concluído\", className: \"bg-gray-100 text-gray-700\" },\n    cancelled: { label: \"Cancelado\", className: \"bg-red-100 text-red-700\" },\n    rescheduled: { label: \"Reagendado\", className: \"bg-orange-100 text-orange-700\" },\n    late: { label: \"Atrasado\", className: \"bg-red-100 text-red-700\" },\n    no_show: { label: \"Não Compareceu\", className: \"bg-gray-100 text-gray-700\" },\n  };\n\n  const config = statusConfig[status as keyof typeof statusConfig] || {\n    label: status,\n    className: \"bg-gray-100 text-gray-700\"\n  };\n\n  return (\n    <Badge className={`text-xs ${config.className}`}>\n      {config.label}\n    </Badge>\n  );\n}\n\nexport default function EmployeeDashboard() {\n  const [user, setUser] = useState(authService.getState().user);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [rescheduleData, setRescheduleData] = useState({\n    appointmentId: \"\",\n    newDate: \"\",\n    newTime: \"\",\n    reason: \"\",\n  });\n  const [isRescheduleDialogOpen, setIsRescheduleDialogOpen] = useState(false);\n  const [historyFilter, setHistoryFilter] = useState(\"day\"); // day, week, month\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n\n  \n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      console.log('Employee dashboard - auth state changed:', state);\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    console.log('Employee dashboard - current user:', user?.id ? { id: user.id, role: user.role } : 'None');\n  }, [user]);\n\n  // Fetch appointments for the selected date\n  // Fetch merchant settings for cancellation fee info\n  const { data: merchantSettings } = useQuery<any>({\n    queryKey: [\"/api/employee/merchant-settings\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employee/merchant-settings\", {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar configurações do salão\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"employee\",\n  });\n\n  // Fetch penalties for merchant\n  const { data: penalties, isLoading: penaltiesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/merchant/penalties\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/merchant/penalties\", {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar multas\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"employee\" && merchantSettings?.cancellationFeeEnabled,\n  });\n\n  const { data: todaysAppointments, isLoading: appointmentsLoading, error, refetch: fetchAppointments } = useQuery<Appointment[]>({\n    queryKey: [\"/api/employee/appointments\", selectedDate],\n    queryFn: async () => {\n      console.log('Fetching appointments for employee:', user?.id || 'None');\n      console.log('Date:', selectedDate);\n      console.log('Auth token:', authService.getState().token ? 'Present' : 'Missing');\n\n      const response = await fetch(`/api/employee/appointments?date=${selectedDate}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      console.log('Response status:', response.status);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: \"Erro de conexão\" }));\n        console.error('API Error:', errorData);\n        throw new Error(errorData.message || \"Erro ao carregar agendamentos\");\n      }\n\n      const data = await response.json();\n      console.log('Appointments count:', data?.length || 0);\n      return data;\n    },\n    retry: 2,\n    enabled: Boolean(authService.getState().isAuthenticated || authService.getState().token),\n  });\n\n  // Get employee upcoming appointments (future dates with pending/confirmed status)\n  const { data: upcomingAppointments, isLoading: upcomingLoading, error: upcomingError, refetch: fetchUpcomingAppointments } = useQuery<Appointment[]>({\n    queryKey: [\"/api/employee/appointments/upcoming\"],\n    queryFn: async () => {\n      console.log('Fetching upcoming appointments for employee:', user?.id || 'None');\n      console.log('Auth token for upcoming:', authService.getState().token ? 'Present' : 'Missing');\n\n      const response = await fetch(`/api/employee/appointments/upcoming`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      console.log('Upcoming appointments response status:', response.status);\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar próximos agendamentos\");\n      }\n\n      const data = await response.json();\n      console.log('Upcoming appointments count:', data?.length || 0);\n      console.log('Upcoming appointments data:', data);\n\n      // Filtrar apenas agendamentos com status pendente, agendado ou confirmado\n      // Remover agendamentos concluídos, cancelados, não compareceu, etc.\n      const filteredData = data.filter((appointment: Appointment) =>\n        appointment.status === \"pending\" ||\n        appointment.status === \"scheduled\" ||\n        appointment.status === \"confirmed\"\n      );\n\n      console.log('Filtered upcoming appointments count:', filteredData?.length || 0);\n      return filteredData;\n    },\n    enabled: Boolean(authService.getState().isAuthenticated || authService.getState().token),\n  });\n\n  // Fetch historical appointments with filter (completed appointments only)\n  const { data: historicalAppointments, isLoading: historyLoading, refetch: fetchHistoricalAppointments } = useQuery({\n    queryKey: [\"/api/employee/appointments/history\", historyFilter],\n    queryFn: async () => {\n      const response = await fetch(`/api/employee/appointments/history?filter=${historyFilter}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao carregar histórico\");\n      }\n\n      return response.json();\n    },\n    enabled: Boolean(authService.getState().isAuthenticated || authService.getState().token),\n  });\n\n  const formatDate = () => {\n    return new Date().toLocaleString(\"pt-BR\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  // Mutation to update appointment status\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ appointmentId, updates }: { appointmentId: string; updates: any }) => {\n      const response = await fetch(`/api/appointments/${appointmentId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao atualizar agendamento\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all appointment-related queries to sync all dashboards\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments/history\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      toast({\n        title: \"Sucesso\",\n        description: \"Agendamento atualizado com sucesso\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmAppointment = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({\n      appointmentId,\n      updates: { status: \"confirmed\" },\n    });\n  };\n\n  const handleCancelAppointment = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({\n      appointmentId,\n      updates: { status: \"cancelled\" },\n    });\n  };\n\n  const handleStartAppointment = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({\n      appointmentId,\n      updates: { status: \"in_progress\" },\n    });\n  };\n\n  const handleCompleteAppointment = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({\n      appointmentId,\n      updates: { status: \"completed\" },\n    });\n  };\n\n  const handleMarkLate = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({\n      appointmentId,\n      updates: { status: \"late\" },\n    });\n  };\n\n  const handleMarkNoShow = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({\n      appointmentId,\n      updates: { status: \"no_show\" },\n    });\n  };\n\n  const handleDeleteAppointment = (appointmentId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este agendamento? Esta ação não pode ser desfeita.\")) {\n      deleteAppointmentMutation.mutate(appointmentId);\n    }\n  };\n\n  // Mutation specifically for rescheduling appointments\n  const rescheduleAppointmentMutation = useMutation({\n    mutationFn: async ({\n      appointmentId,\n      newDate,\n      newTime,\n      reason,\n    }: {\n      appointmentId: string;\n      newDate: string;\n      newTime: string;\n      reason: string;\n    }) => {\n      const response = await fetch(`/api/appointments/${appointmentId}/reschedule`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({ newDate, newTime, reason }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao reagendar agendamento\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all appointment-related queries to sync all dashboards\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments/history\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for deleting appointments\n  const deleteAppointmentMutation = useMutation({\n    mutationFn: async (appointmentId: string) => {\n      const response = await fetch(`/api/appointments/${appointmentId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao excluir agendamento\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Agendamento excluído com sucesso\",\n      });\n\n      // Invalidate all appointment-related queries to sync all dashboards\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments/history\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReschedule = async () => {\n    if (!rescheduleData.appointmentId || !rescheduleData.newDate || !rescheduleData.newTime || !rescheduleData.reason.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Todos os campos são obrigatórios para reagendar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/appointments/${rescheduleData.appointmentId}/reschedule`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({\n          newDate: rescheduleData.newDate,\n          newTime: rescheduleData.newTime,\n          reason: rescheduleData.reason,\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Sucesso\",\n          description: \"Agendamento reagendado com sucesso\",\n        });\n        setIsRescheduleDialogOpen(false);\n        setRescheduleData({\n          appointmentId: \"\",\n          newDate: \"\",\n          newTime: \"\",\n          reason: \"\",\n        });\n        fetchAppointments();\n        fetchUpcomingAppointments();\n        queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      } else {\n        const errorData = await response.json();\n        toast({\n          title: \"Erro\",\n          description: errorData.message || \"Erro ao reagendar agendamento\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error rescheduling appointment:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro interno do servidor\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  \n\n  useEffect(() => {\n    if (user && user.role === \"employee\") {\n      fetchAppointments();\n      fetchUpcomingAppointments();\n      fetchHistoricalAppointments();\n    }\n  }, [user]);\n\n  // Separate active and completed appointments\n  const activeAppointments = todaysAppointments?.filter(apt =>\n    apt.status !== \"completed\" &&\n    apt.status !== \"cancelled\" &&\n    apt.status !== \"no_show\"\n  ) || [];\n\n  // Combine today's completed appointments with historical ones\n  const todaysCompletedAppointments = todaysAppointments?.filter(apt =>\n    apt.status === \"completed\" ||\n    apt.status === \"cancelled\" ||\n    apt.status === \"no_show\"\n  ) || [];\n\n  const historicalCompletedAppointments = historicalAppointments?.filter(apt =>\n    apt.status === \"completed\" ||\n    apt.status === \"cancelled\" ||\n    apt.status === \"no_show\"\n  ) || [];\n\n  // Remove duplicates by ID and combine both arrays\n  const completedAppointments = [...todaysCompletedAppointments, ...historicalCompletedAppointments.filter(hist => \n    !todaysCompletedAppointments.some(today => today.id === hist.id)\n  )];\n\n  // Get next appointment from active appointments only\n  const nextAppointment = activeAppointments?.find(apt => {\n    const currentTime = new Date().toTimeString().slice(0, 5);\n    return apt.appointmentTime > currentTime && (apt.status === \"scheduled\" || apt.status === \"pending\" || apt.status === \"confirmed\" || apt.status === \"rescheduled\");\n  });\n\n  const statsCards = [\n    {\n      title: \"Agendamentos Ativos\",\n      value: activeAppointments?.length || 0,\n      icon: Calendar,\n      color: \"bg-blue-100 text-blue-600\",\n      description: \"seus atendimentos pendentes\",\n    },\n    {\n      title: \"Próximo Atendimento\",\n      value: nextAppointment?.appointmentTime || \"---\",\n      icon: Clock,\n      color: \"bg-orange-100 text-orange-600\",\n      description: nextAppointment ? `${nextAppointment.clientName}` : \"Nenhum agendamento\",\n    },\n    {\n      title: \"Status\",\n      value: \"Ativo\",\n      icon: User,\n      color: \"bg-green-100 text-green-600\",\n      description: \"funcionário\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-employee-dashboard\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">\n                Olá, {user?.name || 'Funcionário'}! 👋\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Painel do Funcionário - {formatDate()}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-foreground\">\n                  {user?.name}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {user?.email}\n                </p>\n              </div>\n              <button\n                onClick={() => authService.logout()}\n                className=\"px-4 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center space-x-2\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                <span>Sair</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            {statsCards.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <Card key={index} data-testid={`card-stat-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">\n                          {stat.title}\n                        </p>\n                        <p className=\"text-2xl font-bold text-foreground\">\n                          {stat.value}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {stat.description}\n                        </p>\n                      </div>\n                      <div className={`p-3 rounded-full ${stat.color}`}>\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n            \n          </div>\n\n          {/* Active Schedule, Upcoming and History */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Active Appointments */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground\">Minha Agenda</h3>\n                    <p className=\"text-sm text-muted-foreground\">Agendamentos para a data selecionada</p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"selectedDate\" className=\"text-sm text-muted-foreground\">Data:</Label>\n                    <Input\n                      id=\"selectedDate\"\n                      type=\"date\"\n                      value={selectedDate}\n                      onChange={(e) => setSelectedDate(e.target.value)}\n                      className=\"w-auto\"\n                    />\n                  </div>\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\" data-testid=\"schedule-list\">\n                  {appointmentsLoading ? (\n                    <p className=\"text-sm text-muted-foreground\">Carregando agenda...</p>\n                  ) : error ? (\n                    <div className=\"flex flex-col items-center justify-center py-8 space-y-4\">\n                      <div className=\"text-lg text-red-600\">⚠️ Erro ao carregar agendamentos</div>\n                      <div className=\"text-sm text-gray-600 text-center\">{(error as Error).message}</div>\n                      <button\n                        onClick={() => window.location.reload()}\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n                      >\n                        🔄 Tentar novamente\n                      </button>\n                    </div>\n                  ) : activeAppointments && activeAppointments.length > 0 ? (\n                    activeAppointments.map((appointment, index) => {\n                      const colors = [\"bg-blue-500\", \"bg-green-500\", \"bg-orange-500\", \"bg-purple-500\"];\n                      return (\n                        <div key={appointment.id} className=\"border rounded-lg p-4 mb-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className={`w-2 h-2 ${colors[index % colors.length]} rounded-full`}></div>\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium text-foreground flex items-center gap-2\">\n                                  <Clock className=\"w-4 h-4 text-blue-600\" />\n                                  {appointment.status === \"in_progress\" || appointment.status === \"completed\" ? (\n                                    <>\n                                      {appointment.actualStartTime ? (\n                                        <span className=\"text-blue-600 font-semibold\">\n                                          Iniciado: {appointment.actualStartTime}\n                                        </span>\n                                      ) : (\n                                        <span>Agendado: {appointment.appointmentTime}</span>\n                                      )}\n                                      {appointment.status === \"completed\" && appointment.actualEndTime && (\n                                        <span className=\"text-green-600 font-semibold ml-2\">\n                                          - Concluído: {appointment.actualEndTime}\n                                        </span>\n                                      )}\n                                      {appointment.status === \"in_progress\" && (\n                                        <span className=\"text-orange-600 font-semibold ml-2\">\n                                          - Em andamento...\n                                        </span>\n                                      )}\n                                    </>\n                                  ) : (\n                                    <>\n                                      {appointment.appointmentTime}\n                                      <span className=\"text-gray-500 text-xs ml-1\">(agendado)</span>\n                                    </>\n                                  )} -\n                                  <User className=\"w-4 h-4 text-green-600\" />\n                                  {appointment.clientName}\n                                </p>\n                                {/* Alerta de multa pendente */}\n                                {penalties && penalties.some(p => \n                                  p.status === \"pending\" && \n                                  (p.clientPhone === appointment.clientPhone || p.clientId === appointment.clientId)\n                                ) && (\n                                  <div className=\"flex items-center gap-1 bg-red-100 text-red-700 px-2 py-1 rounded text-xs font-medium mt-1\">\n                                    <AlertCircle className=\"w-3 h-3\" />\n                                    <span>⚠️ Cliente possui multa pendente de R$ {\n                                      (penalties\n                                        .filter(p => p.status === \"pending\" && \n                                          (p.clientPhone === appointment.clientPhone || p.clientId === appointment.clientId))\n                                        .reduce((total, p) => total + p.amount, 0) / 100\n                                      ).toFixed(2)\n                                    }</span>\n                                  </div>\n                                )}\n                                {appointment.status === \"rescheduled\" && (\n                                  <div className=\"mt-1\">\n                                    <p className=\"text-sm font-medium text-blue-600 flex items-center gap-1\">\n                                      <Calendar className=\"w-4 h-4\" />\n                                      Reagendado para: {appointment.newDate ? appointment.newDate.split('-').reverse().join('/') : ''} às {appointment.newTime}\n                                    </p>\n                                  </div>\n                                )}\n                                <p className=\"text-xs text-muted-foreground flex items-center gap-1 mt-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {appointment.clientPhone}\n                                </p>\n                                {appointment.serviceName && (\n                                  <p className=\"text-xs text-purple-600 font-medium mt-1 flex items-center gap-1\">\n                                    <Star className=\"w-3 h-3\" />\n                                    Serviço: {appointment.serviceName}\n                                  </p>\n                                )}\n                                {appointment.notes && (\n                                  <p className=\"text-xs text-muted-foreground mt-1 flex items-center gap-1\">\n                                    <FileText className=\"w-3 h-3\" />\n                                    Obs: {appointment.notes}\n                                  </p>\n                                )}\n                                {appointment.rescheduleReason && (\n                                  <p className=\"text-xs text-orange-600 mt-1 flex items-center gap-1\">\n                                    <AlertCircle className=\"w-3 h-3\" />\n                                    Motivo do reagendamento: {appointment.rescheduleReason}\n                                  </p>\n                                )}\n                                {(appointment.status === \"completed\" || appointment.status === \"cancelled\") && (\n                                  <p className=\"text-xs text-gray-500 mt-1 flex items-center gap-1\">\n                                    {appointment.status === \"completed\" ? (\n                                      <>\n                                        <CheckCircle className=\"w-3 h-3\" />\n                                        Agendamento concluído - não pode ser reagendado\n                                      </>\n                                    ) : (\n                                      <>\n                                        <X className=\"w-3 h-3\" />\n                                        Agendamento cancelado - não pode ser reagendado\n                                      </>\n                                    )}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col items-end space-y-2\">\n                              {getStatusBadge(appointment.status)}\n                            </div>\n                          </div>\n\n                          {/* Botões para agendamentos pendentes/agendados/confirmados */}\n                          {(appointment.status === \"pending\" || appointment.status === \"scheduled\" || appointment.status === \"confirmed\") && (\n                            <div className=\"space-y-2\">\n                              <div className=\"flex flex-wrap gap-2\">\n                                {(appointment.status === \"pending\" || appointment.status === \"scheduled\") && (\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => handleConfirmAppointment(appointment.id)}\n                                    className=\"flex items-center space-x-1\"\n                                  >\n                                    <Check className=\"w-3 h-3\" />\n                                    <span>Confirmar</span>\n                                  </Button>\n                                )}\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"default\"\n                                  onClick={() => handleStartAppointment(appointment.id)}\n                                  className=\"flex items-center space-x-1 bg-blue-600 hover:bg-blue-700\"\n                                >\n                                  <Play className=\"w-3 h-3\" />\n                                  <span>Iniciar</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"secondary\"\n                                  onClick={() => handleMarkLate(appointment.id)}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <AlertCircle className=\"w-3 h-3\" />\n                                  <span>Atrasado</span>\n                                </Button>\n                              </div>\n                              <div className=\"flex flex-wrap gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setRescheduleData({ ...rescheduleData, appointmentId: appointment.id });\n                                    setIsRescheduleDialogOpen(true);\n                                  }}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <Edit3 className=\"w-3 h-3\" />\n                                  <span>Reagendar</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleMarkNoShow(appointment.id)}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <UserX className=\"w-3 h-3\" />\n                                  <span>Não Compareceu</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleCancelAppointment(appointment.id)}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <X className=\"w-3 h-3\" />\n                                  <span>Cancelar</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleDeleteAppointment(appointment.id)}\n                                  className=\"flex items-center space-x-1 bg-red-700 hover:bg-red-800\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                  <span>Excluir</span>\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Botões para agendamento em andamento */}\n                          {appointment.status === \"in_progress\" && (\n                            <div className=\"flex flex-wrap gap-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"default\"\n                                onClick={() => handleCompleteAppointment(appointment.id)}\n                                className=\"flex items-center space-x-1 bg-green-600 hover:bg-green-700\"\n                              >\n                                <CheckCircle className=\"w-3 h-3\" />\n                                <span>Concluir</span>\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setRescheduleData({ ...rescheduleData, appointmentId: appointment.id });\n                                  setIsRescheduleDialogOpen(true);\n                                }}\n                                className=\"flex items-center space-x-1\"\n                              >\n                                <Edit3 className=\"w-3 h-3\" />\n                                <span>Reagendar</span>\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleDeleteAppointment(appointment.id)}\n                                className=\"flex items-center space-x-1 bg-red-700 hover:bg-red-800\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                                <span>Excluir</span>\n                              </Button>\n                            </div>\n                          )}\n\n                          {/* Botões para agendamentos reagendados */}\n                          {appointment.status === \"rescheduled\" && (\n                            <div className=\"space-y-2\">\n                              <div className=\"flex flex-wrap gap-2\">\n                                {appointment.status !== \"confirmed\" && (\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => handleConfirmAppointment(appointment.id)}\n                                    className=\"flex items-center space-x-1\"\n                                  >\n                                    <Check className=\"w-3 h-3\" />\n                                    <span>Confirmar</span>\n                                  </Button>\n                                )}\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"default\"\n                                  onClick={() => handleStartAppointment(appointment.id)}\n                                  className=\"flex items-center space-x-1 bg-blue-600 hover:bg-blue-700\"\n                                >\n                                  <Play className=\"w-3 h-3\" />\n                                  <span>Iniciar</span>\n                                </Button>\n                              </div>\n                              <div className=\"flex flex-wrap gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"secondary\"\n                                  onClick={() => handleMarkLate(appointment.id)}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <AlertCircle className=\"w-3 h-3\" />\n                                  <span>Atrasado</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setRescheduleData({ ...rescheduleData, appointmentId: appointment.id });\n                                    setIsRescheduleDialogOpen(true);\n                                  }}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <Edit3 className=\"w-3 h-3\" />\n                                  <span>Reagendar</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleMarkNoShow(appointment.id)}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <UserX className=\"w-3 h-3\" />\n                                  <span>Não Compareceu</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleCancelAppointment(appointment.id)}\n                                  className=\"flex items-center space-x-1\"\n                                >\n                                  <X className=\"w-3 h-3\" />\n                                  <span>Cancelar</span>\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleDeleteAppointment(appointment.id)}\n                                  className=\"flex items-center space-x-1 bg-red-700 hover:bg-red-800\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                  <span>Excluir</span>\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Botões para agendamento atrasado */}\n                          {appointment.status === \"late\" && (\n                            <div className=\"flex flex-wrap gap-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"default\"\n                                onClick={() => handleStartAppointment(appointment.id)}\n                                className=\"flex items-center space-x-1 bg-blue-600 hover:bg-blue-700\"\n                              >\n                                <Play className=\"w-3 h-3\" />\n                                <span>Iniciar</span>\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"default\"\n                                onClick={() => handleCompleteAppointment(appointment.id)}\n                                className=\"flex items-center space-x-1 bg-green-600 hover:bg-green-700\"\n                              >\n                                <CheckCircle className=\"w-3 h-3\" />\n                                <span>Concluir</span>\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleMarkNoShow(appointment.id)}\n                                className=\"flex items-center space-x-1\"\n                              >\n                                <UserX className=\"w-3 h-3\" />\n                                <span>Não Compareceu</span>\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleDeleteAppointment(appointment.id)}\n                                className=\"flex items-center space-x-1 bg-red-700 hover:bg-red-800\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                                <span>Excluir</span>\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Nenhum agendamento ativo para hoje 📅\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Upcoming Appointments */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Próximos Agendamentos</h3>\n                <p className=\"text-sm text-muted-foreground\">Agendamentos futuros confirmados</p>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\" data-testid=\"upcoming-list\">\n                  {upcomingLoading ? (\n                    <p className=\"text-sm text-muted-foreground\">Carregando próximos agendamentos...</p>\n                  ) : upcomingError ? (\n                    <div className=\"flex flex-col items-center justify-center py-8 space-y-4\">\n                      <div className=\"text-lg text-red-600\">⚠️ Erro ao carregar próximos agendamentos</div>\n                      <div className=\"text-sm text-gray-600 text-center\">{(upcomingError as Error).message}</div>\n                    </div>\n                  ) : upcomingAppointments && upcomingAppointments.length > 0 ? (\n                    upcomingAppointments.map((appointment, index) => {\n                      const colors = [\"bg-purple-500\", \"bg-pink-500\", \"bg-indigo-500\", \"bg-cyan-500\"];\n                      return (\n                        <div key={appointment.id} className=\"border rounded-lg p-4 mb-4 bg-blue-50 dark:bg-blue-900/20\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className={`w-2 h-2 ${colors[index % colors.length]} rounded-full`}></div>\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium text-foreground flex items-center gap-2\">\n                                  <Calendar className=\"w-4 h-4 text-blue-600\" />\n                                  {appointment.appointmentDate.split('-').reverse().join('/')} -\n                                  <Clock className=\"w-4 h-4 text-orange-600\" />\n                                  {appointment.appointmentTime}\n                                  <User className=\"w-4 h-4 text-green-600\" />\n                                  {appointment.clientName}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground flex items-center gap-1 mt-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {appointment.clientPhone}\n                                </p>\n                                {appointment.serviceName && (\n                                  <p className=\"text-xs text-purple-600 font-medium mt-1 flex items-center gap-1\">\n                                    <Star className=\"w-3 h-3\" />\n                                    Serviço: {appointment.serviceName}\n                                  </p>\n                                )}\n                                {appointment.notes && (\n                                  <p className=\"text-xs text-muted-foreground mt-1 flex items-center gap-1\">\n                                    <FileText className=\"w-3 h-3\" />\n                                    Obs: {appointment.notes}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className={`px-2 py-1 text-xs rounded-full ${{\n                                pending: \"bg-yellow-100 text-yellow-700\",\n                                confirmed: \"bg-blue-100 text-blue-700\"\n                              }[appointment.status] || \"bg-gray-100 text-gray-700\"}`}>\n                                {{\n                                  pending: \"Pendente\",\n                                  confirmed: \"Confirmado\"\n                                }[appointment.status] || appointment.status}\n                              </span>\n                            </div>\n                          </div>\n\n                          {/* Action Buttons for Upcoming Appointments */}\n                          <div className=\"flex flex-wrap gap-2 mt-4\">\n                            {appointment.status !== \"confirmed\" && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"default\"\n                                onClick={() => handleConfirmAppointment(appointment.id)}\n                                className=\"flex items-center space-x-1 bg-blue-600 hover:bg-blue-700\"\n                              >\n                                <CheckCircle className=\"w-3 h-3\" />\n                                <span>Confirmar</span>\n                              </Button>\n                            )}\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={() => handleStartAppointment(appointment.id)}\n                              className=\"flex items-center space-x-1 bg-green-600 hover:bg-green-700\"\n                            >\n                              <Play className=\"w-3 h-3\" />\n                              <span>Iniciar</span>\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={() => handleCompleteAppointment(appointment.id)}\n                              className=\"flex items-center space-x-1 bg-green-600 hover:bg-green-700\"\n                            >\n                              <CheckCircle className=\"w-3 h-3\" />\n                              <span>Concluir</span>\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setRescheduleData({ ...rescheduleData, appointmentId: appointment.id });\n                                setIsRescheduleDialogOpen(true);\n                              }}\n                              className=\"flex items-center space-x-1\"\n                            >\n                              <Edit3 className=\"w-3 h-3\" />\n                              <span>Reagendar</span>\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleMarkNoShow(appointment.id)}\n                              className=\"flex items-center space-x-1\"\n                            >\n                              <UserX className=\"w-3 h-3\" />\n                              <span>Não Compareceu</span>\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleCancelAppointment(appointment.id)}\n                              className=\"flex items-center space-x-1\"\n                            >\n                              <X className=\"w-3 h-3\" />\n                              <span>Cancelar</span>\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleDeleteAppointment(appointment.id)}\n                              className=\"flex items-center space-x-1 bg-red-700 hover:bg-red-800\"\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                              <span>Excluir</span>\n                            </Button>\n                          </div>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Nenhum agendamento futuro 📅\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Próximos agendamentos aparecerão aqui\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Earnings Summary for Percentage-based employees */}\n            {historicalAppointments && historicalAppointments.length > 0 && historicalAppointments[0]?.employeePaymentType === \"percentage\" && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <DollarSign className=\"w-5 h-5\" />\n                    Resumo de Ganhos\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Serviços concluídos:</span>\n                      <span className=\"font-medium\">{historicalAppointments.filter(apt => apt.status === \"completed\").length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Total ganho:</span>\n                      <span className=\"font-medium text-green-600\">\n                        R$ {(historicalAppointments.filter(apt => apt.status === \"completed\").reduce((total, apt) => total + (apt.employeeEarning || 0), 0) / 100).toFixed(2)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Valor total dos serviços concluídos:</span>\n                      <span className=\"font-medium\">\n                        R$ {(historicalAppointments.filter(apt => apt.status === \"completed\").reduce((total, apt) => total + (apt.servicePrice || 0), 0) / 100).toFixed(2)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Serviços cancelados/não compareceu:</span>\n                      <span className=\"font-medium text-red-600\">{historicalAppointments.filter(apt => apt.status === \"cancelled\" || apt.status === \"no_show\").length}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Historical Appointments */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <History className=\"w-5 h-5\" />\n                    Histórico de Serviços\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Label htmlFor=\"historyFilter\" className=\"text-sm\">Filtrar por:</Label>\n                    <Select value={historyFilter} onValueChange={setHistoryFilter}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"day\">Hoje</SelectItem>\n                        <SelectItem value=\"week\">7 dias</SelectItem>\n                        <SelectItem value=\"month\">30 dias</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {historyLoading ? (\n                    <p className=\"text-sm text-muted-foreground\">Carregando histórico...</p>\n                  ) : completedAppointments && completedAppointments.length > 0 ? (\n                    completedAppointments.map((appointment, index) => {\n                      const colors = [\"bg-gray-400\", \"bg-gray-500\", \"bg-gray-600\"];\n                      return (\n                        <div key={appointment.id} className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800/50\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className={`w-2 h-2 ${colors[index % colors.length]} rounded-full`}></div>\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium text-foreground flex items-center gap-2\">\n                                  <Calendar className=\"w-4 h-4 text-blue-600\" />\n                                  {appointment.appointmentDate.split('-').reverse().join('/')} -\n                                  <Clock className=\"w-4 h-4 text-orange-600\" />\n                                  {appointment.appointmentTime} -\n                                  <User className=\"w-4 h-4 text-green-600\" />\n                                  {appointment.clientName}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground flex items-center gap-1 mt-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {appointment.clientPhone}\n                                </p>\n                                {appointment.serviceName && (\n                                  <p className=\"text-xs text-blue-600 font-medium mt-1 flex items-center gap-1\">\n                                    <Scissors className=\"w-3 h-3\" />\n                                    Serviço: {appointment.serviceName}\n                                  </p>\n                                )}\n                                {appointment.servicePrice && (\n                                  <p className=\"text-xs text-green-600 font-medium flex items-center gap-1\">\n                                    <DollarSign className=\"w-3 h-3\" />\n                                    Valor: R$ {(appointment.servicePrice / 100).toFixed(2)}\n                                  </p>\n                                )}\n                                {appointment.actualStartTime && (\n                                  <p className=\"text-xs text-blue-600 font-medium flex items-center gap-1\">\n                                    <Play className=\"w-3 h-3\" />\n                                    Iniciado às: {appointment.actualStartTime}\n                                  </p>\n                                )}\n                                {appointment.actualEndTime && (\n                                  <p className=\"text-xs text-green-600 font-medium flex items-center gap-1\">\n                                    <CheckCircle className=\"w-3 h-3\" />\n                                    Concluído às: {appointment.actualEndTime}\n                                  </p>\n                                )}\n                                {appointment.actualStartTime && appointment.actualEndTime && (\n                                  <p className=\"text-xs text-purple-600 font-medium flex items-center gap-1\">\n                                    <Clock className=\"w-3 h-3\" />\n                                    Duração real: {(() => {\n                                      const [startHour, startMin] = appointment.actualStartTime.split(':').map(Number);\n                                      const [endHour, endMin] = appointment.actualEndTime.split(':').map(Number);\n                                      const startMinutes = startHour * 60 + startMin;\n                                      const endMinutes = endHour * 60 + endMin;\n                                      const duration = endMinutes - startMinutes;\n                                      const hours = Math.floor(duration / 60);\n                                      const minutes = duration % 60;\n                                      return hours > 0 ? `${hours}h ${minutes}min` : `${minutes}min`;\n                                    })()}\n                                  </p>\n                                )}\n                                {appointment.notes && (\n                                  <p className=\"text-xs text-muted-foreground mt-1 flex items-center gap-1\">\n                                    <FileText className=\"w-3 h-3\" />\n                                    Obs: {appointment.notes}\n                                  </p>\n                                )}\n                                {appointment.cancelReason && (\n                                  <p className=\"text-xs text-red-600 mt-1 flex items-center gap-1\">\n                                    <AlertCircle className=\"w-3 h-3\" />\n                                    Motivo do cancelamento: {appointment.cancelReason}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col items-end space-y-2\">\n                              {getStatusBadge(appointment.status)}\n                              <p className=\"text-xs text-muted-foreground\">\n                                {appointment.status === \"completed\" ? \"✅ Finalizado\" : \"❌ Cancelado\"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Nenhum serviço encontrado para o período selecionado 📋\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Os atendimentos finalizados aparecerão aqui\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Multas Pendentes - Only show if cancellation fee is enabled */}\n          {merchantSettings?.cancellationFeeEnabled && (\n            <Card className=\"mt-8\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Multas Pendentes</h3>\n                <p className=\"text-sm text-muted-foreground\">Multas de cancelamento dos clientes</p>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {penaltiesLoading ? (\n                    <p className=\"text-sm text-muted-foreground\">Carregando multas...</p>\n                  ) : penalties && penalties.length > 0 ? (\n                    penalties\n                      .filter(penalty => penalty.status === \"pending\")\n                      .map((penalty) => (\n                        <div key={penalty.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-foreground\">{penalty.clientName}</p>\n                            <p className=\"text-sm text-muted-foreground\">{penalty.clientPhone}</p>\n                            <p className=\"text-sm text-muted-foreground\">{penalty.reason}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Tipo: {penalty.type === \"cancellation\" ? \"Cancelamento\" : penalty.type}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold text-red-600\">\n                              R$ {(penalty.amount / 100).toFixed(2)}\n                            </p>\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              Pendente\n                            </Badge>\n                          </div>\n                        </div>\n                      ))\n                  ) : (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Nenhuma multa pendente\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          \n\n          {/* Reschedule Dialog */}\n          <Dialog open={isRescheduleDialogOpen} onOpenChange={setIsRescheduleDialogOpen}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Reagendar Atendimento</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newDate\">Nova Data</Label>\n                  <Input\n                    id=\"newDate\"\n                    type=\"date\"\n                    value={rescheduleData.newDate}\n                    onChange={(e) => setRescheduleData(prev => ({ ...prev, newDate: e.target.value }))}\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newTime\">Novo Horário</Label>\n                  <Input\n                    id=\"newTime\"\n                    type=\"time\"\n                    value={rescheduleData.newTime}\n                    onChange={(e) => setRescheduleData(prev => ({ ...prev, newTime: e.target.value }))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reason\">Motivo do Reagendamento *</Label>\n                  <Textarea\n                    id=\"reason\"\n                    placeholder=\"Explique o motivo do reagendamento...\"\n                    value={rescheduleData.reason}\n                    onChange={(e) => setRescheduleData(prev => ({ ...prev, reason: e.target.value }))}\n                    rows={3}\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsRescheduleDialogOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    onClick={handleReschedule}\n                    disabled={rescheduleAppointmentMutation.isPending}\n                  >\n                    {rescheduleAppointmentMutation.isPending ? \"Reagendando...\" : \"Reagendar\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          {/* Account Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Configurações da Conta</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-w-md\">\n                <ChangePasswordForm />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":67524},"client/src/pages/employee-days-off.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Plus, Trash2, Calendar, User, ArrowLeft, Edit } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Employee {\n  id: string;\n  name: string;\n  email: string;\n  isActive: boolean;\n}\n\ninterface EmployeeDayOff {\n  id: string;\n  employeeId: string;\n  date: string;\n  reason?: string;\n  createdAt: string;\n}\n\nexport default function EmployeeDaysOff() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState(authService.getState().user);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingDayOff, setEditingDayOff] = useState<EmployeeDayOff | null>(null);\n\n  const [formData, setFormData] = useState({\n    employeeId: \"\",\n    date: \"\",\n    reason: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    employeeId: \"\",\n    date: \"\",\n    reason: \"\",\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n      if (!state.isAuthenticated) {\n        setLocation(\"/login\");\n      }\n    });\n\n    if (!authService.getState().isAuthenticated) {\n      setLocation(\"/login\");\n    }\n\n    return unsubscribe;\n  }, [setLocation]);\n\n  // Fetch employees\n  const { data: employees = [] } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employees\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch employees');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  // Fetch employee days off\n  const { data: daysOff = [], isLoading } = useQuery<EmployeeDayOff[]>({\n    queryKey: [\"/api/employee-days-off\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employee-days-off\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch days off');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  const createDayOffMutation = useMutation({\n    mutationFn: async (dayOffData: any) => {\n      console.log(\"Sending day off data:\", dayOffData);\n      \n      const response = await fetch(\"/api/employee-days-off\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(dayOffData),\n      });\n\n      console.log(\"Response status:\", response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Error response:\", errorText);\n        \n        try {\n          const error = JSON.parse(errorText);\n          throw new Error(error.message || \"Erro ao criar folga\");\n        } catch (parseError) {\n          throw new Error(`Erro ao criar folga: ${response.status} ${response.statusText}`);\n        }\n      }\n\n      const result = await response.json();\n      console.log(\"Success response:\", result);\n      return result;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Folga criada com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee-days-off\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDayOffMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      console.log(\"Updating day off:\", id, data);\n      \n      const response = await fetch(`/api/employee-days-off/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      console.log(\"Update response status:\", response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Update error response:\", errorText);\n        \n        try {\n          const error = JSON.parse(errorText);\n          throw new Error(error.message || \"Erro ao atualizar folga\");\n        } catch (parseError) {\n          throw new Error(`Erro ao atualizar folga: ${response.status} ${response.statusText}`);\n        }\n      }\n\n      const result = await response.json();\n      console.log(\"Update success response:\", result);\n      return result;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Folga atualizada com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee-days-off\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n      setIsEditDialogOpen(false);\n      resetEditForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDayOffMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/employee-days-off/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao remover folga\");\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Folga removida com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee-days-off\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      employeeId: \"\",\n      date: \"\",\n      reason: \"\",\n    });\n  };\n\n  const resetEditForm = () => {\n    setEditFormData({\n      employeeId: \"\",\n      date: \"\",\n      reason: \"\",\n    });\n    setEditingDayOff(null);\n  };\n\n  const handleEdit = (dayOff: EmployeeDayOff) => {\n    setEditingDayOff(dayOff);\n    setEditFormData({\n      employeeId: dayOff.employeeId,\n      date: dayOff.date,\n      reason: dayOff.reason || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!editFormData.employeeId || !editFormData.date) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!editingDayOff) {\n      toast({\n        title: \"Erro\",\n        description: \"Folga não encontrada\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if date is in the past\n    const selectedDate = new Date(editFormData.date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    if (selectedDate < today) {\n      toast({\n        title: \"Erro\",\n        description: \"Não é possível editar folga para datas no passado\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if day off already exists for this employee and date (excluding current one)\n    const existingDayOff = daysOff.find(\n      d => d.employeeId === editFormData.employeeId && \n           d.date === editFormData.date && \n           d.id !== editingDayOff.id\n    );\n\n    if (existingDayOff) {\n      toast({\n        title: \"Erro\",\n        description: \"Este funcionário já possui folga registrada para esta data\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"Updating day off with data:\", editFormData);\n    updateDayOffMutation.mutate({ \n      id: editingDayOff.id, \n      data: {\n        employeeId: editFormData.employeeId,\n        date: editFormData.date,\n        reason: editFormData.reason,\n      }\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.employeeId || !formData.date) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if date is in the past\n    const selectedDate = new Date(formData.date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    if (selectedDate < today) {\n      toast({\n        title: \"Erro\",\n        description: \"Não é possível criar folga para datas no passado\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if day off already exists for this employee and date\n    const existingDayOff = daysOff.find(\n      d => d.employeeId === formData.employeeId && d.date === formData.date\n    );\n\n    if (existingDayOff) {\n      toast({\n        title: \"Erro\",\n        description: \"Este funcionário já possui folga registrada para esta data\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"Creating day off with data:\", formData);\n    createDayOffMutation.mutate(formData);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteDayOffMutation.mutate(id);\n  };\n\n  const getEmployeeName = (employeeId: string) => {\n    const employee = employees.find(e => e.id === employeeId);\n    return employee?.name || \"Funcionário não encontrado\";\n  };\n\n  if (!authService.getState().isAuthenticated || authService.getState().user?.role !== \"merchant\") {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-6 h-6 text-primary\" />\n                <h1 className=\"text-2xl font-bold text-foreground\">Folgas dos Funcionários</h1>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-muted-foreground\">Comerciante:</p>\n              <p className=\"text-sm font-medium text-foreground\">{user?.name}</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total de Folgas</p>\n                    <p className=\"text-2xl font-bold\">{daysOff.length}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Funcionários Ativos</p>\n                    <p className=\"text-2xl font-bold\">{employees.filter(e => e.isActive).length}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Days Off Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Folgas Programadas</CardTitle>\n                <Dialog open={isCreateDialogOpen} onOpenChange={(open) => {\n                  setIsCreateDialogOpen(open);\n                  if (!open) resetForm();\n                }}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Nova Folga\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Nova Folga</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"employee\">Funcionário *</Label>\n                        <Select\n                          value={formData.employeeId}\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, employeeId: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um funcionário\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {employees.filter(e => e.isActive).map((employee) => (\n                              <SelectItem key={employee.id} value={employee.id}>\n                                {employee.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"date\">Data da Folga *</Label>\n                        <Input\n                          id=\"date\"\n                          type=\"date\"\n                          value={formData.date}\n                          onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n                          min={new Date().toISOString().split('T')[0]}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"reason\">Motivo (opcional)</Label>\n                        <Textarea\n                          id=\"reason\"\n                          placeholder=\"Motivo da folga...\"\n                          value={formData.reason}\n                          onChange={(e) => setFormData(prev => ({ ...prev, reason: e.target.value }))}\n                          rows={3}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsCreateDialogOpen(false)}\n                        >\n                          Cancelar\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={createDayOffMutation.isPending}\n                        >\n                          {createDayOffMutation.isPending ? \"Criando...\" : \"Criar Folga\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Edit Dialog */}\n                <Dialog open={isEditDialogOpen} onOpenChange={(open) => {\n                  setIsEditDialogOpen(open);\n                  if (!open) resetEditForm();\n                }}>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Editar Folga</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-employee\">Funcionário *</Label>\n                        <Select\n                          value={editFormData.employeeId}\n                          onValueChange={(value) => setEditFormData(prev => ({ ...prev, employeeId: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um funcionário\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {employees.filter(e => e.isActive).map((employee) => (\n                              <SelectItem key={employee.id} value={employee.id}>\n                                {employee.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-date\">Data da Folga *</Label>\n                        <Input\n                          id=\"edit-date\"\n                          type=\"date\"\n                          value={editFormData.date}\n                          onChange={(e) => setEditFormData(prev => ({ ...prev, date: e.target.value }))}\n                          min={new Date().toISOString().split('T')[0]}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-reason\">Motivo (opcional)</Label>\n                        <Textarea\n                          id=\"edit-reason\"\n                          placeholder=\"Motivo da folga...\"\n                          value={editFormData.reason}\n                          onChange={(e) => setEditFormData(prev => ({ ...prev, reason: e.target.value }))}\n                          rows={3}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsEditDialogOpen(false)}\n                        >\n                          Cancelar\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={updateDayOffMutation.isPending}\n                        >\n                          {updateDayOffMutation.isPending ? \"Atualizando...\" : \"Atualizar Folga\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <p>Carregando folgas...</p>\n              ) : daysOff.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Funcionário</TableHead>\n                        <TableHead>Data</TableHead>\n                        <TableHead>Motivo</TableHead>\n                        <TableHead>Criado em</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {daysOff.map((dayOff) => (\n                        <TableRow key={dayOff.id}>\n                          <TableCell className=\"font-medium\">\n                            {getEmployeeName(dayOff.employeeId)}\n                          </TableCell>\n                          <TableCell>\n                            {(() => {\n                              const [year, month, day] = dayOff.date.split('-');\n                              return new Date(parseInt(year), parseInt(month) - 1, parseInt(day)).toLocaleDateString('pt-BR');\n                            })()}\n                          </TableCell>\n                          <TableCell>\n                            {dayOff.reason || \"Não informado\"}\n                          </TableCell>\n                          <TableCell>\n                            {new Date(dayOff.createdAt).toLocaleDateString('pt-BR')}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleEdit(dayOff)}\n                              >\n                                <Edit className=\"w-4 h-4 text-blue-600\" />\n                              </Button>\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button variant=\"ghost\" size=\"sm\">\n                                    <Trash2 className=\"w-4 h-4 text-red-600\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Remover folga</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Tem certeza que deseja remover esta folga? Esta ação não pode ser desfeita.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                    <AlertDialogAction\n                                      onClick={() => handleDelete(dayOff.id)}\n                                      className=\"bg-red-600 hover:bg-red-700\"\n                                    >\n                                      Remover\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhuma folga programada</p>\n                  <p className=\"text-sm text-muted-foreground\">Clique em \"Nova Folga\" para começar</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":24764},"client/src/pages/employees.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Plus, Edit, Trash2, Users, Mail, Phone, ArrowLeft } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Employee {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  specialties?: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport default function Employees() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState(authService.getState().user);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    phone: \"\",\n    role: \"employee\",\n    specialties: \"\",\n    paymentType: \"monthly\",\n    paymentValue: 0,\n    isActive: true,\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n      if (!state.isAuthenticated) {\n        setLocation(\"/login\");\n      }\n    });\n\n    // Initial check for authentication state\n    if (!authService.getState().isAuthenticated) {\n      setLocation(\"/login\");\n    }\n\n    return unsubscribe;\n  }, [setLocation]);\n\n  // Fetch employees\n  const { data: employees, isLoading, error } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employees\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          authService.logout();\n          setLocation(\"/login\");\n          throw new Error(\"Unauthorized\");\n        }\n        throw new Error('Failed to fetch employees');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (employeeData: any) => {\n      const response = await fetch(\"/api/employees\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(employeeData),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          authService.logout();\n          setLocation(\"/login\");\n          throw new Error(\"Unauthorized\");\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao criar funcionário\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Funcionário criado com sucesso\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/employees\"] });\n\n      setIsCreateDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/employees/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          authService.logout();\n          setLocation(\"/login\");\n          throw new Error(\"Unauthorized\");\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao atualizar funcionário\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Funcionário atualizado com sucesso\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/employees\"] });\n\n      setEditingEmployee(null);\n      setIsCreateDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/employees/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          authService.logout();\n          setLocation(\"/login\");\n          throw new Error(\"Unauthorized\");\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao deletar funcionário\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Funcionário removido com sucesso\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/employees\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      phone: \"\",\n      role: \"employee\",\n      specialties: \"\",\n      paymentType: \"monthly\",\n      paymentValue: 0,\n      isActive: true,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.name || !formData.email || !formData.phone) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingEmployee) {\n      const updateData: any = { ...formData };\n      if (!formData.password) {\n        delete updateData.password; // Don't update password if empty\n      }\n      updateEmployeeMutation.mutate({ id: editingEmployee.id, data: updateData });\n    } else {\n      if (!formData.password) {\n        toast({\n          title: \"Erro\",\n          description: \"Senha é obrigatória para novos funcionários\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      createEmployeeMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (employee: Employee) => {\n    setEditingEmployee(employee);\n    setFormData({\n      name: employee.name,\n      email: employee.email,\n      password: \"\",\n      phone: employee.phone,\n      role: employee.role,\n      specialties: employee.specialties || \"\",\n      paymentType: (employee as any).paymentType || \"monthly\",\n      paymentValue: (employee as any).paymentValue || 0,\n      isActive: employee.isActive,\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteEmployeeMutation.mutate(id);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Redirect to login if not authenticated or not a merchant\n  useEffect(() => {\n    if (!authService.getState().isAuthenticated || authService.getState().user?.role !== \"merchant\") {\n      setLocation(\"/login\");\n    }\n  }, [setLocation]);\n\n\n  if (!authService.getState().isAuthenticated || authService.getState().user?.role !== \"merchant\") {\n    // Optionally render a loading spinner or null if redirect is handled by useEffect\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"w-6 h-6 text-primary\" />\n                <h1 className=\"text-2xl font-bold text-foreground\">Funcionários</h1>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-muted-foreground\">Comerciante:</p>\n              <p className=\"text-sm font-medium text-foreground\">{user?.name}</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total</p>\n                    <p className=\"text-2xl font-bold\">{employees?.length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Ativos</p>\n                    <p className=\"text-2xl font-bold\">{employees?.filter(e => e.isActive).length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-gray-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Inativos</p>\n                    <p className=\"text-2xl font-bold\">{employees?.filter(e => !e.isActive).length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Employees Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Lista de Funcionários</CardTitle>\n                <Dialog open={isCreateDialogOpen} onOpenChange={(open) => {\n                  setIsCreateDialogOpen(open);\n                  if (!open) {\n                    setEditingEmployee(null);\n                    resetForm();\n                  }\n                }}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Novo Funcionário\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingEmployee ? \"Editar Funcionário\" : \"Novo Funcionário\"}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Nome *</Label>\n                        <Input\n                          id=\"name\"\n                          type=\"text\"\n                          value={formData.name}\n                          onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">\n                          Senha {editingEmployee ? \"(deixe vazio para manter)\" : \"*\"}\n                        </Label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          value={formData.password}\n                          onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                          required={!editingEmployee}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Telefone *</Label>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          value={formData.phone}\n                          onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                          required\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"role\">Função</Label>\n                        <Select\n                          value={formData.role}\n                          onValueChange={(value) => handleInputChange(\"role\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"employee\">Funcionário</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"specialties\">Especialidades (opcional)</Label>\n                        <Input\n                          id=\"specialties\"\n                          type=\"text\"\n                          placeholder=\"Ex: Corte, Manicure, Pedicure\"\n                          value={formData.specialties}\n                          onChange={(e) => handleInputChange(\"specialties\", e.target.value)}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"paymentType\">Tipo de Pagamento</Label>\n                        <Select\n                          value={formData.paymentType}\n                          onValueChange={(value) => handleInputChange(\"paymentType\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"monthly\">Mensal</SelectItem>\n                            <SelectItem value=\"weekly\">Semanal</SelectItem>\n                            <SelectItem value=\"daily\">Diário</SelectItem>\n                            <SelectItem value=\"percentage\">Porcentagem por Serviço</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"paymentValue\">\n                          {formData.paymentType === \"percentage\" ? \"Porcentagem (%)\" : \"Valor (R$)\"}\n                        </Label>\n                        <Input\n                          id=\"paymentValue\"\n                          type=\"number\"\n                          step={formData.paymentType === \"percentage\" ? \"1\" : \"0.01\"}\n                          min=\"0\"\n                          max={formData.paymentType === \"percentage\" ? \"100\" : undefined}\n                          placeholder={formData.paymentType === \"percentage\" ? \"Ex: 50\" : \"Ex: 2000.00\"}\n                          value={\n                            formData.paymentValue === 0 \n                              ? \"\" \n                              : formData.paymentType === \"percentage\" \n                                ? (formData.paymentValue / 100).toString()\n                                : (formData.paymentValue / 100).toString()\n                          }\n                          onChange={(e) => {\n                            const inputValue = e.target.value;\n                            if (inputValue === \"\") {\n                              handleInputChange(\"paymentValue\", 0);\n                              return;\n                            }\n                            const value = parseFloat(inputValue);\n                            if (isNaN(value)) {\n                              return;\n                            }\n                            handleInputChange(\"paymentValue\", Math.round(value * 100));\n                          }}\n                        />\n                        {formData.paymentType === \"percentage\" && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            Porcentagem que o funcionário recebe do valor de cada serviço\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"isActive\"\n                          checked={formData.isActive}\n                          onChange={(e) => handleInputChange(\"isActive\", e.target.checked)}\n                        />\n                        <Label htmlFor=\"isActive\">Funcionário ativo</Label>\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsCreateDialogOpen(false)}\n                        >\n                          Cancelar\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={createEmployeeMutation.isPending || updateEmployeeMutation.isPending}\n                        >\n                          {createEmployeeMutation.isPending || updateEmployeeMutation.isPending\n                            ? \"Salvando...\"\n                            : editingEmployee\n                            ? \"Atualizar\"\n                            : \"Criar\"\n                          }\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <p>Carregando funcionários...</p>\n              ) : error ? (\n                <p className=\"text-red-600\">Erro ao carregar funcionários</p>\n              ) : employees && employees.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nome</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Telefone</TableHead>\n                        <TableHead>Função</TableHead>\n                        <TableHead>Pagamento</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {employees.map((employee) => (\n                        <TableRow key={employee.id}>\n                          <TableCell className=\"font-medium\">{employee.name}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-1\">\n                              <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                              <span>{employee.email}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-1\">\n                              <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                              <span>{employee.phone}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"secondary\">\n                              Funcionário\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              {(employee as any).paymentType === \"monthly\" && \"Mensal\"}\n                              {(employee as any).paymentType === \"weekly\" && \"Semanal\"}\n                              {(employee as any).paymentType === \"daily\" && \"Diário\"}\n                              {(employee as any).paymentType === \"percentage\" && \"Porcentagem\"}\n                              <br />\n                              <span className=\"text-muted-foreground\">\n                                {(employee as any).paymentType === \"percentage\" \n                                  ? `${((employee as any).paymentValue || 0) / 100}%`\n                                  : `R$ ${((employee as any).paymentValue || 0) / 100}`\n                                }\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={employee.isActive ? \"default\" : \"secondary\"}>\n                              {employee.isActive ? \"Ativo\" : \"Inativo\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEdit(employee)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button variant=\"ghost\" size=\"sm\">\n                                    <Trash2 className=\"w-4 h-4 text-red-600\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Remover funcionário</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Tem certeza que deseja remover {employee.name}? Esta ação não pode ser desfeita.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                    <AlertDialogAction\n                                      onClick={() => handleDelete(employee.id)}\n                                      className=\"bg-red-600 hover:bg-red-700\"\n                                    >\n                                      Remover\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhum funcionário cadastrado</p>\n                  <p className=\"text-sm text-muted-foreground\">Clique em \"Novo Funcionário\" para começar</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":27030},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport MerchantSignupForm from \"@/components/auth/merchant-signup-form\";\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSignup, setShowSignup] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      if (state.isAuthenticated) {\n        // Let App.tsx handle role-based redirection\n        setLocation(\"/\");\n      }\n    });\n    return unsubscribe;\n  }, [setLocation]);\n\n  const onSubmit = async (data: LoginData) => {\n    setIsLoading(true);\n    try {\n      const result = await authService.login(data.email, data.password);\n\n      if (result.success) {\n        toast({\n          title: \"Login realizado com sucesso!\",\n          description: \"Redirecionando para o painel...\",\n        });\n        console.log(\"Login successful, user data:\", result.user);\n        if (result.user.role === \"employee\") {\n          console.log(\"Redirecting to employee dashboard\");\n          setLocation(\"/employee-dashboard\");\n        } else if (result.user.role === \"merchant\") {\n          console.log(\"Redirecting to merchant dashboard\");\n          setLocation(\"/merchant-dashboard\");\n        } else if (result.user.role === \"client\") {\n          console.log(\"Redirecting to client dashboard\");\n          setLocation(\"/client-dashboard\");\n        } else {\n          console.log(\"Redirecting to admin dashboard\");\n          setLocation(\"/dashboard\");\n        }\n      } else {\n        toast({\n          title: \"Erro no login\",\n          description: result.error || \"Credenciais inválidas\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro de conexão\",\n        description: \"Não foi possível conectar ao servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (showSignup) {\n    return <MerchantSignupForm onBack={() => setShowSignup(false)} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-accent/10 flex items-center justify-center p-4\" data-testid=\"page-login\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-2xl border border-border\">\n          <CardContent className=\"p-8 space-y-6\">\n            {/* Logo/Header */}\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl text-primary-foreground\">✂️</span>\n              </div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Beauty Scheduler</h1>\n              <p className=\"text-muted-foreground\">Painel Administrativo</p>\n            </div>\n\n            {/* Login Form */}\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"form-login\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...register(\"email\")}\n                  placeholder=\"leolulu842@gmail.com\"\n                  disabled={isLoading}\n                  data-testid=\"input-email\"\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Senha</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...register(\"password\")}\n                  placeholder=\"Digite sua senha\"\n                  disabled={isLoading}\n                  data-testid=\"input-password\"\n                />\n                {errors.password && (\n                  <p className=\"text-sm text-destructive\" data-testid=\"error-password\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"remember\"\n                    className=\"w-4 h-4 text-primary border border-input rounded focus:ring-ring\"\n                  />\n                  <label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">\n                    Lembrar-me\n                  </label>\n                </div>\n                <a href=\"#\" className=\"text-sm text-primary hover:underline\">\n                  Esqueceu a senha?\n                </a>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Entrando...\" : \"Entrar\"}\n              </Button>\n            </form>\n\n            {/* Divisor */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">\n                  Ou\n                </span>\n              </div>\n            </div>\n\n            {/* Botão de Cadastro */}\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setShowSignup(true)}\n              disabled={isLoading}\n            >\n              Cadastre seu Salão\n            </Button>\n\n            <div className=\"pt-4 text-center text-sm text-muted-foreground\">\n              © 2024 Beauty Scheduler. Todos os direitos reservados.\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6912},"client/src/pages/merchant-access.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, DollarSign, Users, AlertCircle, Clock, CheckCircle2, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Merchant {\n  id: string;\n  name: string;\n  ownerName: string;\n  email: string;\n  phone: string;\n  status: string;\n  accessStartDate?: string;\n  accessEndDate?: string;\n  accessDurationDays?: number;\n  monthlyFee?: number;\n  paymentStatus?: string;\n  lastPaymentDate?: string;\n  nextPaymentDue?: string;\n  createdAt: string;\n}\n\ninterface AccessStats {\n  active: number;\n  expired: number;\n  paymentPending: number;\n  totalRevenue: number;\n}\n\nexport default function MerchantAccess() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedMerchant, setSelectedMerchant] = useState<Merchant | null>(null);\n  const [isAccessModalOpen, setIsAccessModalOpen] = useState(false);\n  const [accessForm, setAccessForm] = useState({\n    durationDays: 30,\n    monthlyFee: 5000, // R$ 50.00 in cents\n  });\n  const { toast } = useToast();\n\n  // Get all merchants\n  const { data: merchants = [], isLoading } = useQuery<Merchant[]>({\n    queryKey: [\"/api/merchants\"],\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  // Get merchant stats including access stats\n  const { data: stats } = useQuery<{\n    total: number;\n    active: number;\n    pending: number;\n    inactive: number;\n    thisMonth: number;\n    access: AccessStats;\n  }>({\n    queryKey: [\"/api/merchants/stats\"],\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  // Grant access mutation\n  const grantAccessMutation = useMutation({\n    mutationFn: async ({ merchantId, durationDays, monthlyFee }: { merchantId: string; durationDays: number; monthlyFee: number }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/merchants/${merchantId}/grant-access`, {\n        durationDays,\n        monthlyFee,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      setIsAccessModalOpen(false);\n      setSelectedMerchant(null);\n      toast({\n        title: \"Acesso concedido!\",\n        description: \"O acesso foi concedido com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao conceder acesso\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Suspend access mutation\n  const suspendAccessMutation = useMutation({\n    mutationFn: async (merchantId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/merchants/${merchantId}/suspend-access`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      toast({\n        title: \"Acesso suspenso!\",\n        description: \"O acesso foi suspenso com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao suspender acesso\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Renew access mutation\n  const renewAccessMutation = useMutation({\n    mutationFn: async (merchantId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/merchants/${merchantId}/renew-access`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      toast({\n        title: \"Acesso renovado!\",\n        description: \"O acesso foi renovado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao renovar acesso\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredMerchants = merchants.filter((merchant) =>\n    merchant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    merchant.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    merchant.ownerName.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusBadge = (merchant: Merchant) => {\n    if (merchant.status === \"active\") {\n      if (merchant.accessEndDate) {\n        const now = new Date();\n        const endDate = new Date(merchant.accessEndDate);\n        if (endDate <= now) {\n          return <Badge variant=\"destructive\">Expirado</Badge>;\n        }\n        const daysLeft = Math.ceil((endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        if (daysLeft <= 7) {\n          return <Badge className=\"bg-orange-100 text-orange-800\">Expira em {daysLeft} dias</Badge>;\n        }\n        return <Badge className=\"bg-green-100 text-green-800\">Ativo ({daysLeft} dias)</Badge>;\n      }\n      return <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>;\n    }\n    \n    if (merchant.status === \"payment_pending\") {\n      return <Badge variant=\"destructive\">Pagamento Pendente</Badge>;\n    }\n    \n    if (merchant.status === \"pending\") {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Aguardando Aprovação</Badge>;\n    }\n    \n    return <Badge variant=\"secondary\">{merchant.status}</Badge>;\n  };\n\n  const formatDate = (date: string | undefined) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleDateString(\"pt-BR\");\n  };\n\n  const formatCurrency = (cents: number | undefined) => {\n    if (!cents) return \"-\";\n    return (cents / 100).toLocaleString(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n    });\n  };\n\n  const handleGrantAccess = (merchant: Merchant) => {\n    setSelectedMerchant(merchant);\n    setAccessForm({\n      durationDays: merchant.accessDurationDays || 30,\n      monthlyFee: merchant.monthlyFee || 5000,\n    });\n    setIsAccessModalOpen(true);\n  };\n\n  const handleSubmitAccess = () => {\n    if (!selectedMerchant) return;\n    \n    grantAccessMutation.mutate({\n      merchantId: selectedMerchant.id,\n      durationDays: accessForm.durationDays,\n      monthlyFee: accessForm.monthlyFee,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"flex-1 p-6\">\n            <div className=\"text-center\">Carregando...</div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Gerenciar Acesso dos Comerciantes</h2>\n            </div>\n\n            {/* Stats Cards */}\n            {stats?.access && (\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Ativos</CardTitle>\n                    <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">{stats.access.active}</div>\n                    <p className=\"text-xs text-muted-foreground\">Comerciantes com acesso ativo</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Expirados</CardTitle>\n                    <XCircle className=\"h-4 w-4 text-red-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">{stats.access.expired}</div>\n                    <p className=\"text-xs text-muted-foreground\">Comerciantes com acesso expirado</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Pagamento Pendente</CardTitle>\n                    <AlertCircle className=\"h-4 w-4 text-orange-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">{stats.access.paymentPending}</div>\n                    <p className=\"text-xs text-muted-foreground\">Aguardando pagamento</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Receita Total</CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-blue-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {formatCurrency(stats.access.totalRevenue)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Receita dos pagamentos</p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Search */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Label htmlFor=\"search\">Buscar comerciantes:</Label>\n                  <Input\n                    id=\"search\"\n                    type=\"text\"\n                    placeholder=\"Nome, email ou proprietário...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"max-w-md\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Merchants Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Comerciantes ({filteredMerchants.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-2\">Comerciante</th>\n                        <th className=\"text-left py-2\">Status</th>\n                        <th className=\"text-left py-2\">Acesso</th>\n                        <th className=\"text-left py-2\">Mensalidade</th>\n                        <th className=\"text-left py-2\">Último Pagamento</th>\n                        <th className=\"text-left py-2\">Ações</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredMerchants.map((merchant) => (\n                        <tr key={merchant.id} className=\"border-b hover:bg-muted/50\">\n                          <td className=\"py-3\">\n                            <div>\n                              <div className=\"font-medium\">{merchant.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">{merchant.ownerName}</div>\n                              <div className=\"text-xs text-muted-foreground\">{merchant.email}</div>\n                            </div>\n                          </td>\n                          <td className=\"py-3\">{getStatusBadge(merchant)}</td>\n                          <td className=\"py-3\">\n                            <div className=\"text-sm\">\n                              <div>Início: {formatDate(merchant.accessStartDate)}</div>\n                              <div>Fim: {formatDate(merchant.accessEndDate)}</div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {merchant.accessDurationDays} dias\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"font-medium\">{formatCurrency(merchant.monthlyFee)}</div>\n                            <Badge variant={\n                              merchant.paymentStatus === \"paid\" ? \"default\" : \n                              merchant.paymentStatus === \"trial\" ? \"secondary\" : \n                              \"destructive\"\n                            } className=\"text-xs\">\n                              {merchant.paymentStatus === \"paid\" ? \"Pago\" : \n                               merchant.paymentStatus === \"trial\" ? \"Teste Grátis\" : \n                               \"Pendente\"}\n                            </Badge>\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"text-sm\">\n                              {formatDate(merchant.lastPaymentDate)}\n                            </div>\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"flex space-x-2\">\n                              {(merchant.status === \"pending\" || merchant.status === \"payment_pending\") && (\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleGrantAccess(merchant)}\n                                  disabled={grantAccessMutation.isPending}\n                                >\n                                  Conceder Acesso\n                                </Button>\n                              )}\n                              \n                              {merchant.status === \"active\" && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => renewAccessMutation.mutate(merchant.id)}\n                                    disabled={renewAccessMutation.isPending}\n                                  >\n                                    Renovar\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"destructive\"\n                                    onClick={() => suspendAccessMutation.mutate(merchant.id)}\n                                    disabled={suspendAccessMutation.isPending}\n                                  >\n                                    Suspender\n                                  </Button>\n                                </>\n                              )}\n                              \n                              {merchant.status === \"payment_pending\" && (\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => renewAccessMutation.mutate(merchant.id)}\n                                  disabled={renewAccessMutation.isPending}\n                                >\n                                  Renovar Acesso\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n\n      {/* Grant Access Modal */}\n      <Dialog open={isAccessModalOpen} onOpenChange={setIsAccessModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Conceder Acesso - {selectedMerchant?.name}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"duration\">Duração do Acesso (dias)</Label>\n              <Input\n                id=\"duration\"\n                type=\"number\"\n                min=\"1\"\n                value={accessForm.durationDays}\n                onChange={(e) => setAccessForm({ ...accessForm, durationDays: parseInt(e.target.value) || 30 })}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"fee\">Taxa Mensal (R$)</Label>\n              <Input\n                id=\"fee\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={accessForm.monthlyFee / 100}\n                onChange={(e) => setAccessForm({ ...accessForm, monthlyFee: Math.round(parseFloat(e.target.value) * 100) || 5000 })}\n              />\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Valor em reais (ex: 50.00)\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setIsAccessModalOpen(false)}>\n                Cancelar\n              </Button>\n              <Button\n                onClick={handleSubmitAccess}\n                disabled={grantAccessMutation.isPending}\n              >\n                {grantAccessMutation.isPending ? \"Concedendo...\" : \"Conceder Acesso\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18315},"client/src/pages/merchant-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, Clock, Users, User, UserCheck, Phone, Mail, DollarSign, StickyNote, Plus, AlertCircle } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ChangePasswordForm from \"@/components/auth/change-password-form\";\n\n\ninterface MerchantStats {\n  appointments: {\n    today: number;\n    thisWeek: number;\n    thisMonth: number;\n  };\n  services: {\n    total: number;\n    active: number;\n  };\n}\n\ninterface Appointment {\n  id: string;\n  clientName: string;\n  appointmentDate: string;\n  appointmentTime: string;\n  endTime?: string;\n  status: string;\n  notes?: string;\n  clientPhone?: string;\n  clientEmail?: string;\n  serviceId?: string;\n  serviceName?: string;\n  servicePrice?: number;\n  employeeId?: string;\n  employeeName?: string;\n  completedAt?: string;\n  actualStartTime?: string;\n  actualEndTime?: string;\n  paymentStatus?: string;\n}\n\n// Helper function to format currency\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL',\n  }).format(amount / 100); // Assuming amount is in cents\n};\n\n\n// Componente para lista de pagamentos pendentes\nfunction PendingPaymentsList() {\n  const { data: pendingPayments = [], isLoading } = useQuery<Appointment[]>({\n    queryKey: [\"/api/appointments/pending-payments\"],\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  const queryClient = useQueryClient();\n\n  if (isLoading) {\n    return <p className=\"text-sm text-muted-foreground\">Carregando pagamentos pendentes...</p>;\n  }\n\n  if (pendingPayments.length === 0) {\n    return (\n      <div className=\"text-center py-4\">\n        <p className=\"text-sm text-muted-foreground\">\n          Nenhum pagamento pendente\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n      {pendingPayments.slice(0, 5).map((appointment) => (\n        <div key={appointment.id} className=\"flex items-center justify-between p-4 border rounded-lg bg-orange-50 dark:bg-orange-900/20\">\n          <div className=\"flex-1\">\n            <p className=\"font-medium text-foreground\">{appointment.clientName}</p>\n            <p className=\"text-sm text-muted-foreground\">{appointment.clientPhone}</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Data: {appointment.appointmentDate} às {appointment.appointmentTime}\n            </p>\n            {appointment.servicePrice && (\n              <p className=\"text-sm font-medium text-green-600\">\n                {formatCurrency(appointment.servicePrice)}\n              </p>\n            )}\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"default\"\n            className=\"text-xs h-7 bg-green-600 hover:bg-green-700\"\n            onClick={async (e) => {\n              const button = e.currentTarget;\n              if (!button) return;\n\n              // Prevent multiple clicks\n              button.disabled = true;\n\n              try {\n                const response = await fetch(`/api/appointments/${appointment.id}/status`, {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authService.getState().token}`,\n                  },\n                  body: JSON.stringify({ \n                    paymentStatus: \"paid\"\n                  }),\n                });\n\n                if (response.ok) {\n                  queryClient.invalidateQueries({ queryKey: [\"/api/appointments/pending-payments\"] });\n                  queryClient.invalidateQueries({ queryKey: [\"/api/appointments/all\"] });\n                } else {\n                  console.error(\"Erro ao marcar como pago:\", response.status);\n                  alert(\"Erro ao atualizar pagamento. Tente novamente.\");\n                  if (button) {\n                    button.disabled = false;\n                  }\n                }\n              } catch (error) {\n                console.error(\"Error marking payment as paid:\", error);\n                alert(\"Erro de conexão. Tente novamente.\");\n                if (button) {\n                  button.disabled = false;\n                }\n              }\n            }}\n            data-testid={`button-pay-${appointment.id}`}\n          >\n            Marcar como Pago\n          </Button>\n        </div>\n      ))}\n      {pendingPayments.length > 5 && (\n        <div className=\"text-center pt-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            E mais {pendingPayments.length - 5} pagamentos pendentes...\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function MerchantDashboard() {\n  const [user, setUser] = useState(authService.getState().user);\n  const [, setLocation] = useLocation();\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedService, setSelectedService] = useState<any>(null);\n  const [showServiceModal, setShowServiceModal] = useState(false);\n  const [showPixModal, setShowPixModal] = useState(false);\n  const [paymentStatus, setPaymentStatus] = useState<'idle' | 'pending' | 'processing' | 'approved' | 'failed'>('idle');\n  const [pixData, setPixData] = useState<any>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Fetch merchant stats\n  const { data: stats, isLoading: statsLoading } = useQuery<MerchantStats>({\n    queryKey: [\"/api/merchant/stats\"],\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  // Get all appointments with complete data\n  // Fetch merchant's own cancellation fee settings\n  const { data: merchantSettings } = useQuery<any>({\n    queryKey: [\"/api/merchant/settings\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/merchant\", {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar configurações\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  // Fetch merchant policies for cancellation fee info\n  const { data: merchantPolicies } = useQuery<any>({\n    queryKey: [`/api/merchants/${user?.id}/booking-policies`],\n    queryFn: async () => {\n      const response = await fetch(`/api/merchants/${user?.id}/booking-policies`, {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar políticas\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\" && !!user?.id,\n  });\n\n  // Fetch penalties for merchant\n  const { data: penalties = [], isLoading: penaltiesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/merchant/penalties\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/merchant/penalties\", {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar multas\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  const { data: allAppointments, isLoading: appointmentsLoading } = useQuery<Appointment[]>({\n    queryKey: [\"/api/appointments/all\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/appointments`, {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar agendamentos\");\n      }\n\n      const appointments = await response.json();\n\n      // Enrich appointments with service and employee data\n      const enrichedAppointments = await Promise.all(\n        appointments.map(async (appointment: any) => {\n          try {\n            // Get service info\n            const serviceResponse = await fetch(`/api/services?merchantId=${user?.id}`, {\n              headers: {\n                \"Authorization\": `Bearer ${authService.getState().token}`,\n              },\n            });\n\n            let serviceName = null;\n            let servicePrice = null;\n\n            if (serviceResponse.ok) {\n              const services = await serviceResponse.json();\n              const service = services.find((s: any) => s.id === appointment.serviceId);\n              if (service) {\n                serviceName = service.name;\n                servicePrice = service.price;\n              }\n            }\n\n            // Get employee info if assigned\n            let employeeName = null;\n            if (appointment.employeeId) {\n              const employeeResponse = await fetch(`/api/employees?merchantId=${user?.id}`, {\n                headers: {\n                  \"Authorization\": `Bearer ${authService.getState().token}`,\n                },\n              });\n\n              if (employeeResponse.ok) {\n                const employees = await employeeResponse.json();\n                const employee = employees.find((e: any) => e.id === appointment.employeeId);\n                if (employee) {\n                  employeeName = employee.name;\n                }\n              }\n            }\n\n            return {\n              ...appointment,\n              serviceName,\n              servicePrice,\n              employeeName,\n            };\n          } catch (error) {\n            console.error(\"Error enriching appointment:\", error);\n            return appointment;\n          }\n        })\n      );\n\n      return enrichedAppointments;\n    },\n    enabled: authService.getState().isAuthenticated && !!user?.id,\n  });\n\n  const formatDate = () => {\n    return new Date().toLocaleString(\"pt-BR\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const handleServiceClick = async (serviceId: string) => {\n    try {\n      const response = await fetch(`/api/services?merchantId=${user?.id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (response.ok) {\n        const services = await response.json();\n        const service = services.find((s: any) => s.id === serviceId);\n        if (service) {\n          setSelectedService(service);\n          setShowServiceModal(true);\n        }\n      }\n    } catch (error) {\n      console.error(\"Erro ao buscar detalhes do serviço:\", error);\n    }\n  };\n\n  // Filter appointments by status\n  const filteredAppointments = allAppointments?.filter(appointment => {\n    if (statusFilter === \"all\") return true;\n    return appointment.status === statusFilter;\n  }) || [];\n\n  // Get next appointment from today's appointments\n  const today = new Date().toISOString().split('T')[0];\n  const todaysAppointments = allAppointments?.filter(apt => apt.appointmentDate === today) || [];\n  const nextAppointment = todaysAppointments?.find(apt => {\n    const currentTime = new Date().toTimeString().slice(0, 5); // HH:MM format\n    return apt.appointmentTime > currentTime && (apt.status === \"pending\" || apt.status === \"confirmed\");\n  });\n\n  const statsCards = [\n    {\n      title: \"Agendamentos Hoje\",\n      value: stats?.appointments.today || 0,\n      icon: Calendar,\n      color: \"bg-blue-100 text-blue-600\",\n      description: `${stats?.appointments.thisWeek || 0} esta semana`,\n    },\n    {\n      title: \"Total de Serviços\",\n      value: stats?.services.total || 0,\n      icon: Users,\n      color: \"bg-green-100 text-green-600\",\n      description: `${stats?.services.active || 0} ativos`,\n    },\n    {\n      title: \"Próximo Agendamento\",\n      value: nextAppointment?.appointmentTime || \"---\",\n      icon: Clock,\n      color: \"bg-orange-100 text-orange-600\",\n      description: nextAppointment ? `${nextAppointment.clientName}` : \"Nenhum agendamento\",\n    },\n    {\n      title: \"Este Mês\",\n      value: stats?.appointments.thisMonth || 0,\n      icon: Calendar,\n      color: \"bg-purple-100 text-purple-600\",\n      description: \"agendamentos totais\",\n    },\n  ];\n\n  // Mutation for upgrading to VIP\n  const { mutate: upgradeMutation, isLoading: upgradeLoading } = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/merchant/upgrade-to-vip\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao ativar plano VIP\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/merchants/${user?.id}`] });\n      toast({\n        title: \"Plano VIP ativado com sucesso!\",\n        description: data.message,\n        variant: \"success\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao ativar plano VIP\",\n        description: error.message || \"Por favor, tente novamente.\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  // Mutation for renewing VIP\n  const { mutate: renewMutation, isLoading: renewLoading } = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/merchant/renew-vip\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao renovar plano VIP\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/merchants/${user?.id}`] });\n      toast({\n        title: \"Plano VIP renovado com sucesso!\",\n        description: data.message,\n        variant: \"success\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao renovar plano VIP\",\n        description: error.message || \"Por favor, tente novamente.\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  // Fetch merchant data to check plan status and validity\n  const { data: merchantData, isLoading: merchantDataLoading } = useQuery<any>({\n    queryKey: [`/api/merchants/${user?.id}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/merchants/${user?.id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar dados do comerciante\");\n      }\n\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && !!user?.id,\n  });\n\n  const planStatus = merchantData?.planStatus || 'free';\n  const planValidity = merchantData?.planValidity; // Assuming this is a date string\n\n  const isExpired = planValidity ? new Date(planValidity) < new Date() : true;\n  const daysUntilExpiration = planValidity ? Math.ceil((new Date(planValidity).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : 0;\n\n  const handleUpgradeToVip = () => {\n    upgradeMutation();\n  };\n\n  const handleRenewVip = () => {\n    renewMutation();\n  };\n\n  const createPixPayment = async () => {\n    setPaymentStatus('pending');\n    try {\n      const response = await fetch('/api/pix/create-payment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({\n          description: 'Renovação VIP - 30 dias',\n          amount: 100, // R$ 1,00 em centavos\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao criar pagamento PIX');\n      }\n\n      const data = await response.json();\n      setPixData(data);\n      setPaymentStatus('processing');\n    } catch (error: any) {\n      setPaymentStatus('failed');\n      toast({\n        title: 'Erro ao criar pagamento PIX',\n        description: error.message,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const checkPixPaymentStatus = async () => {\n    if (!pixData?.id) return;\n\n    try {\n      const response = await fetch(`/api/pix/payment-status/${pixData.id}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao verificar status do pagamento');\n      }\n\n      const data = await response.json();\n\n      if (data.status === 'paid') {\n        setPaymentStatus('approved');\n        queryClient.invalidateQueries({ queryKey: [`/api/merchants/${user?.id}`] }); // Invalidate merchant data to refresh plan status\n        toast({\n          title: 'Pagamento PIX confirmado!',\n          description: 'Seu plano VIP foi renovado com sucesso.',\n          variant: 'success',\n        });\n        // Optionally close the modal after a delay\n        setTimeout(() => {\n          setShowPixModal(false);\n          resetPaymentState();\n        }, 3000);\n      } else if (data.status === 'failed' || data.status === 'refused') {\n        setPaymentStatus('failed');\n      }\n      // If status is 'pending' or 'processing', keep waiting\n    } catch (error: any) {\n      console.error('Erro ao verificar status do pagamento PIX:', error);\n      setPaymentStatus('failed');\n      toast({\n        title: 'Erro ao verificar pagamento PIX',\n        description: error.message,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const resetPaymentState = () => {\n    setPaymentStatus('idle');\n    setPixData(null);\n  };\n\n  // Poll for payment status if processing\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | null = null;\n    if (paymentStatus === 'processing' && pixData?.id) {\n      intervalId = setInterval(checkPixPaymentStatus, 5000); // Check every 5 seconds\n    }\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [paymentStatus, pixData]);\n\n  const handleRenewVipWithPix = () => {\n    setShowPixModal(true);\n    createPixPayment();\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-merchant-dashboard\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">\n                {user?.name || 'Meu Salão'}\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Painel do Comerciante - {user?.ownerName}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Bem-vindo,</p>\n                <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-email\">\n                  {user?.email}\n                </p>\n              </div>\n              <button\n                onClick={() => authService.logout()}\n                className=\"px-4 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\"\n                data-testid=\"button-logout\"\n              >\n                Sair\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Dashboard</h2>\n            <div className=\"text-sm text-muted-foreground\">\n              Última atualização: <span data-testid=\"text-last-update\">{formatDate()}</span>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {statsCards.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <Card key={index} data-testid={`card-stat-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-value-${index}`}>\n                          {stat.value}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {stat.description}\n                        </p>\n                      </div>\n                      <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${stat.color}`}>\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Plan Information and Actions */}\n          <Card>\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Seu Plano</h3>\n            </div>\n            <CardContent className=\"p-6\">\n              {merchantDataLoading ? (\n                <p className=\"text-sm text-muted-foreground\">Carregando informações do plano...</p>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm font-medium text-foreground\">Status do Plano:</span>\n                      <Badge variant={planStatus === 'vip' ? 'outline' : 'secondary'}>{planStatus === 'vip' ? 'VIP' : 'Grátis'}</Badge>\n                    </div>\n                    {planValidity && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Validade: {new Date(planValidity).toLocaleDateString('pt-BR')}\n                        {isExpired && <span className=\"text-red-600 ml-2\">(Expirado)</span>}\n                      </p>\n                    )}\n                    {planStatus === 'free' && daysUntilExpiration <= 10 && !isExpired && (\n                      <p className=\"text-sm text-yellow-600 mt-1\">\n                        Seu plano grátis expira em {daysUntilExpiration} dias. Considere o upgrade!\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    {planStatus === 'free' || isExpired ? (\n                      <Button \n                        onClick={handleUpgradeToVip}\n                        disabled={upgradeLoading}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                      >\n                        {upgradeLoading ? \"Processando...\" : \"Contratar VIP - R$ 1,00/mês\"}\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handleRenewVipWithPix} // Changed to call the new function\n                        disabled={renewLoading}\n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      >\n                        {renewLoading ? \"Processando...\" : \"Renovar VIP por 30 dias\"}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <div className=\"grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Ações Rápidas</h3>\n                {merchantSettings?.cancellationFeeEnabled && (\n                  <div className=\"mt-2\">\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      Sistema de Multas Ativo\n                    </Badge>\n                  </div>\n                )}\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={() => setLocation(\"/new-appointment\")}\n                    className=\"w-full p-3 text-left border border-border rounded-lg hover:bg-muted transition-colors\"\n                    data-testid=\"button-new-appointment\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Calendar className=\"w-5 h-5 text-blue-600\" />\n                      <div>\n                        <p className=\"font-medium text-foreground\">Novo Agendamento</p>\n                        <p className=\"text-sm text-muted-foreground\">Agendar um novo serviço</p>\n                      </div>\n                    </div>\n                  </button>\n                  <button\n                    onClick={() => setLocation(\"/schedule\")}\n                    className=\"w-full p-3 text-left border border-border rounded-lg hover:bg-muted transition-colors\"\n                    data-testid=\"button-view-schedule\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Clock className=\"w-5 h-5 text-green-600\" />\n                      <div>\n                        <p className=\"font-medium text-foreground\">Ver Agenda</p>\n                        <p className=\"text-sm text-muted-foreground\">Visualizar agenda do dia</p>\n                      </div>\n                    </div>\n                  </button>\n\n                  <Button\n                    onClick={() => setLocation(\"/services\")}\n                    className=\"w-full justify-start h-auto p-4\"\n                    variant=\"outline\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"w-5 h-5 text-purple-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Gerenciar Serviços</div>\n                        <div className=\"text-xs text-muted-foreground\">Configurar serviços oferecidos</div>\n                      </div>\n                    </div>\n                  </Button>\n                  <Button\n                    onClick={() => setLocation(\"/employees\")}\n                    className=\"w-full justify-start h-auto p-4\"\n                    variant=\"outline\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"w-5 h-5 text-blue-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Funcionários</div>\n                        <div className=\"text-xs text-muted-foreground\">Gerenciar equipe</div>\n                      </div>\n                    </div>\n                  </Button>\n                  <button\n                    onClick={() => setLocation(\"/clients\")}\n                    className=\"w-full p-3 text-left border border-border rounded-lg hover:bg-muted transition-colors\"\n                    data-testid=\"button-manage-clients\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <User className=\"w-5 h-5 text-indigo-600\" />\n                      <div>\n                        <p className=\"font-medium text-foreground\">Clientes</p>\n                        <p className=\"text-sm text-muted-foreground\">Cadastrar e gerenciar clientes</p>\n                      </div>\n                    </div>\n                  </button>\n                  <Button\n                    onClick={() => setLocation(\"/employee-days-off\")}\n                    className=\"w-full justify-start h-auto p-4\"\n                    variant=\"outline\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Calendar className=\"w-5 h-5 text-purple-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Folgas</div>\n                        <div className=\"text-xs text-muted-foreground\">Gerenciar folgas dos funcionários</div>\n                      </div>\n                    </div>\n                  </Button>\n                  <button\n                    onClick={() => setLocation(\"/merchant-settings\")}\n                    className=\"w-full p-3 text-left border border-border rounded-lg hover:bg-muted transition-colors\"\n                    data-testid=\"button-merchant-settings\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Clock className=\"w-5 h-5 text-teal-600\" />\n                      <div>\n                        <p className=\"font-medium text-foreground\">Configurações</p>\n                        <p className=\"text-sm text-muted-foreground\">Configurar dias e horários do salão</p>\n                      </div>\n                    </div>\n                  </button>\n                  <button\n                    onClick={() => setLocation(\"/promotions\")}\n                    className=\"w-full p-3 text-left border border-border rounded-lg hover:bg-muted transition-colors\"\n                    data-testid=\"button-promotions\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <DollarSign className=\"w-5 h-5 text-yellow-600\" />\n                      <div>\n                        <p className=\"font-medium text-foreground\">Promoções</p>\n                        <p className=\"text-sm text-muted-foreground\">Gerenciar descontos e ofertas especiais</p>\n                      </div>\n                    </div>\n                  </button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* All Appointments */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Todos Agendamentos</h3>\n                {/* Status Filter */}\n                <div className=\"mt-4\">\n                  <select\n                    value={statusFilter}\n                    onChange={(e) => setStatusFilter(e.target.value)}\n                    className=\"w-48 p-2 text-sm border border-border rounded-md bg-background text-foreground\"\n                  >\n                    <option value=\"all\">Todos os Status</option>\n                    <option value=\"pending\">Pendente</option>\n                    <option value=\"confirmed\">Confirmado</option>\n                    <option value=\"late\">Atrasado</option>\n                    <option value=\"completed\">Concluído</option>\n                    <option value=\"cancelled\">Cancelado</option>\n                    <option value=\"no_show\">Não Compareceu</option>\n                    <option value=\"rescheduled\">Reagendado</option>\n                  </select>\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4 max-h-96 overflow-y-auto\" data-testid=\"schedule-list\">\n                  {appointmentsLoading ? (\n                    <p className=\"text-sm text-muted-foreground\">Carregando agendamentos...</p>\n                  ) : filteredAppointments && filteredAppointments.length > 0 ? (\n                    filteredAppointments.map((appointment, index) => {\n                      // Definir cores e ícones por status\n                      const getStatusConfig = (status: string) => {\n                        switch (status) {\n                          case \"pending\":\n                            return { color: \"bg-yellow-500\", label: \"Pendente\", textColor: \"text-yellow-700\" };\n                          case \"confirmed\":\n                            return { color: \"bg-blue-500\", label: \"Confirmado\", textColor: \"text-blue-700\" };\n                          case \"late\":\n                            return { color: \"bg-orange-500\", label: \"Atrasado\", textColor: \"text-orange-700\" };\n                          case \"completed\":\n                            return { color: \"bg-green-500\", label: \"Concluído\", textColor: \"text-green-700\" };\n                          case \"cancelled\":\n                            return { color: \"bg-red-500\", label: \"Cancelado\", textColor: \"text-red-700\" };\n                          case \"no_show\":\n                            return { color: \"bg-gray-500\", label: \"Não Compareceu\", textColor: \"text-gray-700\" };\n                          case \"rescheduled\":\n                            return { color: \"bg-purple-500\", label: \"Reagendado\", textColor: \"text-purple-700\" };\n                          default:\n                            return { color: \"bg-gray-400\", label: status, textColor: \"text-gray-600\" };\n                        }\n                      };\n\n                      const statusConfig = getStatusConfig(appointment.status);\n\n                      return (\n                        <div key={appointment.id} className=\"border rounded-lg p-4 space-y-3 bg-card\">\n                          {/* Header com status */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className={`w-3 h-3 ${statusConfig.color} rounded-full`}></div>\n                              <span className={`px-2 py-1 text-xs rounded-full bg-opacity-20 ${statusConfig.color.replace('bg-', 'bg-')} ${statusConfig.textColor} font-medium`}>\n                                {statusConfig.label}\n                              </span>\n                              {/* Alerta de multa pendente */}\n                              {penalties && penalties.some(p => \n                                p.status === \"pending\" && \n                                (p.clientPhone === appointment.clientPhone || p.clientId === appointment.clientId)\n                              ) && (\n                                <div className=\"flex items-center gap-1 bg-red-100 text-red-700 px-2 py-1 rounded text-xs font-medium\">\n                                  <AlertCircle className=\"w-3 h-3\" />\n                                  <span>Cliente com multa pendente</span>\n                                </div>\n                              )}\n                            </div>\n                            {appointment.servicePrice !== undefined && appointment.servicePrice !== null && (\n                              <div className=\"flex items-center gap-1\">\n                                <DollarSign className=\"w-4 h-4 text-green-600\" />\n                                <span className=\"text-sm text-green-600 font-semibold\">\n                                  {formatCurrency(appointment.servicePrice)}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Detalhes principais */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                            {/* Data e Hora */}\n                            <div>\n                              <p className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Data e Hora</p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Calendar className=\"w-4 h-4 text-blue-600\" />\n                                <span className=\"text-sm font-medium text-foreground\">\n                                  {new Date(appointment.appointmentDate + 'T00:00:00').toLocaleDateString('pt-BR')}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Clock className=\"w-4 h-4 text-green-600\" />\n                                <span className=\"text-sm font-foreground\">\n                                  {appointment.status === \"in_progress\" || appointment.status === \"completed\" ? (\n                                    <>\n                                      {appointment.actualStartTime ? (\n                                        <span className=\"text-blue-600 font-medium\">\n                                          Iniciado: {appointment.actualStartTime}\n                                        </span>\n                                      ) : (\n                                        <span>Agendado: {appointment.appointmentTime}</span>\n                                      )}\n                                      {appointment.status === \"completed\" && appointment.actualEndTime && (\n                                        <span className=\"text-green-600 font-medium ml-2\">\n                                          - Concluído: {appointment.actualEndTime}\n                                        </span>\n                                      )}\n                                      {appointment.status === \"in_progress\" && (\n                                        <span className=\"text-orange-600 font-medium ml-2\">\n                                          - Em andamento...\n                                        </span>\n                                      )}\n                                    </>\n                                  ) : (\n                                    <>\n                                      {appointment.appointmentTime}\n                                      {appointment.endTime ? ` - ${appointment.endTime}` : ''}\n                                      <span className=\"text-gray-500 text-xs ml-1\">(previsto)</span>\n                                    </>\n                                  )}\n                                </span>\n                              </div>\n                            </div>\n\n                            {/* Cliente */}\n                            <div>\n                              <p className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Cliente</p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <User className=\"w-4 h-4 text-purple-600\" />\n                                <span className=\"text-sm font-medium text-foreground\">\n                                  {appointment.clientName}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Phone className=\"w-4 h-4 text-orange-600\" />\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {appointment.clientPhone}\n                                </span>\n                              </div>\n                              {appointment.clientEmail && (\n                                <div className=\"flex items-center gap-2 mt-1\">\n                                  <Mail className=\"w-4 h-4 text-cyan-600\" />\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {appointment.clientEmail}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n\n                            {/* Serviço */}\n                            {appointment.serviceName && (\n                              <div>\n                                <p className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Serviço</p>\n                                <button\n                                  onClick={() => appointment.serviceId && handleServiceClick(appointment.serviceId)}\n                                  className=\"flex items-center gap-2 mt-1 text-sm font-medium text-blue-600 hover:text-blue-800 underline cursor-pointer\"\n                                >\n                                  <Users className=\"w-4 h-4\" />\n                                  {appointment.serviceName}\n                                </button>\n                              </div>\n                            )}\n\n                            {/* FUNCIONÁRIO */}\n                            {appointment.employeeName && (\n                              <div>\n                                <p className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Funcionário</p>\n                                <div className=\"flex items-center gap-2 mt-1\">\n                                  <UserCheck className=\"w-4 h-4 text-indigo-600\" />\n                                  <span className=\"text-sm font-medium text-foreground\">\n                                    {appointment.employeeName}\n                                  </span>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Observações */}\n                          {appointment.notes && (\n                            <div className=\"pt-2 border-t border-border\">\n                              <p className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Observações</p>\n                              <div className=\"flex items-start gap-2 mt-1\">\n                                <StickyNote className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {appointment.notes}\n                                </span>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Ações do Agendamento */}\n                          {appointment.status === \"confirmed\" && (\n                            <div className=\"pt-3 border-t border-border\">\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"text-xs h-7\"\n                                  onClick={async () => {\n                                    try {\n                                      await fetch(`/api/appointments/${appointment.id}/status`, {\n                                        method: \"POST\",\n                                        headers: {\n                                          \"Content-Type\": \"application/json\",\n                                          \"Authorization\": `Bearer ${authService.getState().token}`,\n                                        },\n                                        body: JSON.stringify({ \n                                          status: \"in_progress\",\n                                          arrivalTime: new Date().toTimeString().slice(0, 5)\n                                        }),\n                                      });\n                                      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/all\"] });\n                                    } catch (error) {\n                                      console.error(\"Error starting appointment:\", error);\n                                    }\n                                  }}\n                                  data-testid={`button-start-${appointment.id}`}\n                                >\n                                  Iniciar\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n\n                          {appointment.status === \"in_progress\" && (\n                            <div className=\"pt-3 border-t border-border\">\n                              <div className=\"space-y-2\">\n                                <p className=\"text-xs font-medium text-muted-foreground\">Marcar como concluído:</p>\n                                <div className=\"flex gap-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"default\"\n                                    className=\"text-xs h-7 bg-green-600 hover:bg-green-700\"\n                                    onClick={async () => {\n                                      try {\n                                        await fetch(`/api/appointments/${appointment.id}/status`, {\n                                          method: \"POST\",\n                                          headers: {\n                                            \"Content-Type\": \"application/json\",\n                                            \"Authorization\": `Bearer ${authService.getState().token}`,\n                                          },\n                                          body: JSON.stringify({ \n                                            status: \"completed\",\n                                            paymentStatus: \"paid\",\n                                            actualEndTime: new Date().toTimeString().slice(0, 5)\n                                          }),\n                                        });\n                                        queryClient.invalidateQueries({ queryKey: [\"/api/appointments/all\"] });\n                                      } catch (error) {\n                                        console.error(\"Error completing appointment with payment:\", error);\n                                      }\n                                    }}\n                                    data-testid={`button-complete-paid-${appointment.id}`}\n                                  >\n                                    Concluir + Pago\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-xs h-7 border-orange-300 text-orange-700 hover:bg-orange-50\"\n                                    onClick={async () => {\n                                      try {\n                                        await fetch(`/api/appointments/${appointment.id}/status`, {\n                                          method: \"POST\",\n                                          headers: {\n                                            \"Content-Type\": \"application/json\",\n                                            \"Authorization\": `Bearer ${authService.getState().token}`,\n                                          },\n                                          body: JSON.stringify({ \n                                            status: \"completed\",\n                                            paymentStatus: \"pending\",\n                                            actualEndTime: new Date().toTimeString().slice(0, 5)\n                                          }),\n                                        });\n                                        queryClient.invalidateQueries({ queryKey: [\"/api/appointments/all\"] });\n                                      } catch (error) {\n                                        console.error(\"Error completing appointment without payment:\", error);\n                                      }\n                                    }}\n                                    data-testid={`button-complete-pending-${appointment.id}`}\n                                  >\n                                    Concluir (Pagar Depois)\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Opções de Pagamento para Agendamentos Concluídos */}\n                          {appointment.status === \"completed\" && (\n                            <div className=\"pt-3 border-t border-border\">\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-xs font-medium text-muted-foreground\">\n                                    Status do pagamento:\n                                  </span>\n                                  {(appointment as any).paymentStatus === \"pending\" ? (\n                                    <span className=\"text-xs text-orange-600 font-medium\">⚠️ Pendente</span>\n                                  ) : (appointment as any).paymentStatus === \"paid\" ? (\n                                    <span className=\"text-xs text-green-600 font-medium\">✅ Pago</span>\n                                  ) : (\n                                    <span className=\"text-xs text-gray-600 font-medium\">Não definido</span>\n                                  )}\n                                </div>\n                                <div className=\"flex gap-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant={(appointment as any).paymentStatus === \"paid\" ? \"default\" : \"outline\"}\n                                    className={`text-xs h-7 ${\n                                      (appointment as any).paymentStatus === \"paid\" \n                                        ? \"bg-green-600 hover:bg-green-700 text-white cursor-default\" \n                                        : \"border-green-300 text-green-700 hover:bg-green-50\"\n                                    }`}\n                                    disabled={(appointment as any).paymentStatus === \"paid\"}\n                                    onClick={async (e) => {\n                                      const button = e.currentTarget;\n                                      if (!button || (appointment as any).paymentStatus === \"paid\") return;\n\n                                      // Prevent multiple clicks\n                                      const originalDisabled = button.disabled;\n                                      button.disabled = true;\n\n                                      try {\n                                        console.log(`Marking appointment ${appointment.id} as paid`);\n\n                                        const response = await fetch(`/api/appointments/${appointment.id}/status`, {\n                                          method: \"POST\",\n                                          headers: {\n                                            \"Content-Type\": \"application/json\",\n                                            \"Authorization\": `Bearer ${authService.getState().token}`,\n                                          },\n                                          body: JSON.stringify({ \n                                            paymentStatus: \"paid\"\n                                          }),\n                                        });\n\n                                        if (response.ok) {\n                                          console.log(\"Payment status updated successfully\");\n                                          // Force immediate refetch of data\n                                          await queryClient.invalidateQueries({ queryKey: [\"/api/appointments/all\"] });\n                                          await queryClient.invalidateQueries({ queryKey: [\"/api/appointments/pending-payments\"] });\n\n                                          // Force refetch\n                                          queryClient.refetchQueries({ queryKey: [\"/api/appointments/all\"] });\n                                          queryClient.refetchQueries({ queryKey: [\"/api/appointments/pending-payments\"] });\n                                        } else {\n                                          const errorText = await response.text();\n                                          console.error(\"Erro ao atualizar pagamento:\", response.status, errorText);\n                                          alert(\"Erro ao atualizar status do pagamento. Tente novamente.\");\n                                          button.disabled = originalDisabled;\n                                        }\n                                      } catch (error) {\n                                        console.error(\"Error marking payment as paid:\", error);\n                                        alert(\"Erro de conexão. Verifique sua internet e tente novamente.\");\n                                        button.disabled = originalDisabled;\n                                      }\n                                    }}\n                                    data-testid={`button-mark-paid-${appointment.id}`}\n                                  >\n                                    {(appointment as any).paymentStatus === \"paid\" ? \"✓ Pago\" : \"Marcar como Pago\"}\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant={(appointment as any).paymentStatus === \"pending\" ? \"default\" : \"outline\"}\n                                    className={`text-xs h-7 ${\n                                      (appointment as any).paymentStatus === \"pending\" \n                                        ? \"bg-orange-600 hover:bg-orange-700 text-white cursor-default\" \n                                        : \"border-orange-300 text-orange-700 hover:bg-orange-50\"\n                                    }`}\n                                    disabled={(appointment as any).paymentStatus === \"pending\"}\n                                    onClick={async (e) => {\n                                      const button = e.currentTarget;\n                                      if (!button || (appointment as any).paymentStatus === \"pending\") return;\n\n                                      // Prevent multiple clicks\n                                      const originalDisabled = button.disabled;\n                                      button.disabled = true;\n\n                                      try {\n                                        console.log(`Marking appointment ${appointment.id} as pending payment`);\n\n                                        const response = await fetch(`/api/appointments/${appointment.id}/status`, {\n                                          method: \"POST\",\n                                          headers: {\n                                            \"Content-Type\": \"application/json\",\n                                            \"Authorization\": `Bearer ${authService.getState().token}`,\n                                          },\n                                          body: JSON.stringify({ \n                                            paymentStatus: \"pending\"\n                                          }),\n                                        });\n\n                                        if (response.ok) {\n                                          console.log(\"Payment status updated successfully\");\n                                          // Force immediate refetch of data\n                                          await queryClient.invalidateQueries({ queryKey: [\"/api/appointments/all\"] });\n                                          await queryClient.invalidateQueries({ queryKey: [\"/api/appointments/pending-payments\"] });\n\n                                          // Force refetch\n                                          queryClient.refetchQueries({ queryKey: [\"/api/appointments/all\"] });\n                                          queryClient.refetchQueries({ queryKey: [\"/api/appointments/pending-payments\"] });\n                                        } else {\n                                          const errorText = await response.text();\n                                          console.error(\"Erro ao atualizar pagamento:\", response.status, errorText);\n                                          alert(\"Erro ao atualizar status do pagamento. Tente novamente.\");\n                                          button.disabled = originalDisabled;\n                                        }\n                                      } catch (error) {\n                                        console.error(\"Error marking payment as pending:\", error);\n                                        alert(\"Erro de conexão. Verifique sua internet e tente novamente.\");\n                                        button.disabled = originalDisabled;\n                                      }\n                                    }}\n                                    data-testid={`button-mark-pending-${appointment.id}`}\n                                  >\n                                    {(appointment as any).paymentStatus === \"pending\" ? \"⏳ Pendente\" : \"Marcar como Pendente\"}\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">\n                      {statusFilter === \"all\" ? \"Nenhum agendamento encontrado\" : `Nenhum agendamento com status \"${statusFilter}\"`}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Multas Pendentes - Only show if cancellation fee is enabled */}\n            {(merchantSettings?.cancellationFeeEnabled || merchantPolicies?.cancellationFeeEnabled) && (\n              <Card>\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Multas Pendentes</h3>\n                  <p className=\"text-sm text-muted-foreground\">Gerenciar multas de cancelamento</p>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                    {penaltiesLoading ? (\n                      <p className=\"text-sm text-muted-foreground\">Carregando multas...</p>\n                    ) : penalties && penalties.filter(p => p.status === \"pending\").length > 0 ? (\n                      penalties\n                        .filter(penalty => penalty.status === \"pending\")\n                        .slice(0, 5)\n                        .map((penalty) => (\n                          <div key={penalty.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-foreground\">{penalty.clientName}</p>\n                              <p className=\"text-sm text-muted-foreground\">{penalty.clientPhone}</p>\n                              <p className=\"text-sm text-muted-foreground\">{penalty.reason}</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {formatCurrency(penalty.amount)}\n                              </p>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"text-xs h-7\"\n                                onClick={async () => {\n                                  try {\n                                    await fetch(`/api/penalties/${penalty.id}`, {\n                                      method: \"PUT\",\n                                      headers: {\n                                        \"Content-Type\": \"application/json\",\n                                        \"Authorization\": `Bearer ${authService.getState().token}`,\n                                      },\n                                      body: JSON.stringify({ status: \"paid\" }),\n                                    });\n                                    queryClient.invalidateQueries({ queryKey: [\"/api/merchant/penalties\"] });\n                                  } catch (error) {\n                                    console.error(\"Error marking penalty as paid:\", error);\n                                  }\n                                }}\n                              >\n                                Pago\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"secondary\"\n                                className=\"text-xs h-7\"\n                                onClick={async () => {\n                                  try {\n                                    await fetch(`/api/penalties/${penalty.id}`, {\n                                      method: \"PUT\",\n                                      headers: {\n                                        \"Content-Type\": \"application/json\",\n                                        \"Authorization\": `Bearer ${authService.getState().token}`,\n                                      },\n                                      body: JSON.stringify({ status: \"waived\" }),\n                                    });\n                                    queryClient.invalidateQueries({ queryKey: [\"/api/merchant/penalties\"] });\n                                  } catch (error) {\n                                    console.error(\"Error waiving penalty:\", error);\n                                  }\n                                }}\n                              >\n                                Dispensar\n                              </Button>\n                            </div>\n                          </div>\n                        ))\n                    ) : (\n                      <div className=\"text-center py-4\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          Nenhuma multa pendente\n                        </p>\n                      </div>\n                    )}\n                    {penalties && penalties.filter(p => p.status === \"pending\").length > 5 && (\n                      <div className=\"text-center pt-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setLocation(\"/merchant-penalties\")}\n                          className=\"text-xs\"\n                        >\n                          Ver todas as multas\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Pagamentos Pendentes */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Pagamentos Pendentes</h3>\n                <p className=\"text-sm text-muted-foreground\">Agendamentos concluídos aguardando pagamento</p>\n              </div>\n              <CardContent className=\"p-6\">\n                <PendingPaymentsList />\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Atividade Recente</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\" data-testid=\"activity-list\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Atividades recentes aparecerão aqui\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Account Settings */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Configurações da Conta</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"max-w-md\">\n                  <ChangePasswordForm />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      {/* Service Details Modal */}\n      {showServiceModal && selectedService && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Detalhes do Serviço</h3>\n              <button\n                onClick={() => setShowServiceModal(false)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Nome:</p>\n                <p className=\"text-sm text-muted-foreground\">{selectedService.name}</p>\n              </div>\n              {selectedService.description && (\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">Descrição:</p>\n                  <p className=\"text-sm text-muted-foreground\">{selectedService.description}</p>\n                </div>\n              )}\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Preço:</p>\n                <p className=\"text-sm text-green-600 font-medium\">\n                  {formatCurrency(selectedService.price)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Duração:</p>\n                <p className=\"text-sm text-muted-foreground\">{selectedService.duration} minutos</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Status:</p>\n                <p className={`text-sm ${selectedService.isActive ? 'text-green-600' : 'text-red-600'}`}>\n                  {selectedService.isActive ? 'Ativo' : 'Inativo'}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex justify-end mt-6\">\n              <button\n                onClick={() => setShowServiceModal(false)}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n              >\n                Fechar\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* PIX Payment Modal for Renewal */}\n      {showPixModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Renovar Plano VIP</h3>\n              <button\n                onClick={() => {\n                  setShowPixModal(false);\n                  resetPaymentState();\n                }}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                ✕\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Resumo do Pagamento</h4>\n                <div className=\"flex justify-between\">\n                  <span>Renovação VIP - 30 dias</span>\n                  <span className=\"font-medium\">R$ 1,00</span>\n                </div>\n              </div>\n\n              {paymentStatus === 'idle' && (\n                <div className=\"text-center\">\n                  <Button\n                    onClick={createPixPayment}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    disabled={renewLoading} // Use renewLoading to disable button while initial VIP renewal is processed\n                  >\n                    {renewLoading ? \"Processando...\" : \"Gerar PIX para Renovação\"}\n                  </Button>\n                </div>\n              )}\n\n              {paymentStatus === 'pending' && !pixData && (\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Gerando código PIX...\n                  </p>\n                  <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                </div>\n              )}\n\n              {paymentStatus === 'processing' && pixData && (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm font-medium mb-2\">Escaneie o QR Code para pagar</p>\n                    <div className=\"flex justify-center mb-4\">\n                      <div className=\"bg-white p-4 rounded-lg border shadow-sm\">\n                        <img \n                          src={`data:image/png;base64,${pixData.qr_code_base64}`}\n                          alt=\"QR Code PIX\" \n                          className=\"w-48 h-48\"\n                          onError={(e) => {\n                            console.error('Error loading QR code image:', e);\n                            console.log('QR code base64 data:', pixData.qr_code_base64?.substring(0, 100) + '...');\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mb-4\">\n                      Ou copie e cole o código PIX no seu banco\n                    </p>\n                    <div className=\"bg-gray-100 p-2 rounded text-xs break-all\">\n                      {pixData.qr_code}\n                    </div>\n                    <div className=\"flex gap-2 mt-2\">\n                      <button\n                        onClick={() => {\n                          navigator.clipboard.writeText(pixData.qr_code || \"\");\n                          toast({\n                            title: \"Código copiado!\",\n                            description: \"O código PIX foi copiado para a área de transferência.\",\n                            variant: \"success\"\n                          });\n                        }}\n                        className=\"px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700\"\n                      >\n                        📋 Copiar Código PIX\n                      </button>\n                      <button\n                        onClick={() => {\n                          // Compartilhar via WhatsApp (opcional)\n                          const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(`Código PIX para pagamento: ${pixData.qr_code}`)}`;\n                          window.open(whatsappUrl, '_blank');\n                        }}\n                        className=\"px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700\"\n                      >\n                        📱 Compartilhar\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"animate-spin h-6 w-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2\"></div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Aguardando confirmação do pagamento...\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {paymentStatus === 'approved' && (\n                <div className=\"text-center\">\n                  <div className=\"text-green-600 mb-4\">\n                    <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <h4 className=\"text-lg font-semibold text-green-600 mb-2\">\n                    Pagamento Aprovado!\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Seu plano VIP foi renovado com sucesso por 30 dias.\n                  </p>\n                </div>\n              )}\n\n              {paymentStatus === 'failed' && (\n                <div className=\"text-center\">\n                  <div className=\"text-red-600 mb-4\">\n                    <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </div>\n                  <h4 className=\"text-lg font-semibold text-red-600 mb-2\">\n                    Falha no Pagamento\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Não foi possível processar o pagamento. Tente novamente.\n                  </p>\n                  <Button\n                    onClick={() => {\n                      resetPaymentState();\n                      createPixPayment(); // Retry creating PIX payment\n                    }}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Tentar Novamente\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":74131},"client/src/pages/merchant-penalties.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, DollarSign, User, Calendar, Phone, Mail, CheckCircle, XCircle, FileText, Clock } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface Penalty {\n  id: string;\n  merchantId: string;\n  clientId: string | null;\n  appointmentId: string;\n  clientName: string;\n  clientPhone: string;\n  clientEmail: string | null;\n  type: string;\n  amount: number;\n  reason: string;\n  status: string;\n  paidAt: string | null;\n  paidBy: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface PenaltyWithDetails extends Penalty {\n  serviceName?: string;\n  servicePrice?: number;\n  employeeName?: string;\n  appointmentDate?: string;\n  appointmentTime?: string;\n}\n\nexport default function MerchantPenalties() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const user = authService.getState().user;\n\n  if (!user || user.role !== \"merchant\") {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  // Fetch penalties\n  const { data: penalties = [], isLoading, error } = useQuery<PenaltyWithDetails[]>({\n    queryKey: [\"/api/merchant/penalties\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/merchant/penalties\", {\n        headers: {\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar multas\");\n      }\n\n      const penaltiesData = await response.json();\n\n      // Enrich with appointment details\n      const enrichedPenalties = await Promise.all(\n        penaltiesData.map(async (penalty: Penalty) => {\n          try {\n            // Get appointment details\n            const appointmentResponse = await fetch(`/api/appointments/${penalty.appointmentId}`, {\n              headers: {\n                \"Authorization\": `Bearer ${authService.getState().token}`,\n              },\n            });\n\n            if (appointmentResponse.ok) {\n              const appointment = await appointmentResponse.json();\n              \n              // Get service details\n              let serviceName = null;\n              let servicePrice = null;\n              if (appointment.serviceId) {\n                const serviceResponse = await fetch(`/api/services`, {\n                  headers: {\n                    \"Authorization\": `Bearer ${authService.getState().token}`,\n                  },\n                });\n\n                if (serviceResponse.ok) {\n                  const services = await serviceResponse.json();\n                  const service = services.find((s: any) => s.id === appointment.serviceId);\n                  if (service) {\n                    serviceName = service.name;\n                    servicePrice = service.price;\n                  }\n                }\n              }\n\n              // Get employee details\n              let employeeName = null;\n              if (appointment.employeeId) {\n                const employeeResponse = await fetch(`/api/employees`, {\n                  headers: {\n                    \"Authorization\": `Bearer ${authService.getState().token}`,\n                  },\n                });\n\n                if (employeeResponse.ok) {\n                  const employees = await employeeResponse.json();\n                  const employee = employees.find((e: any) => e.id === appointment.employeeId);\n                  if (employee) {\n                    employeeName = employee.name;\n                  }\n                }\n              }\n\n              return {\n                ...penalty,\n                serviceName,\n                servicePrice,\n                employeeName,\n                appointmentDate: appointment.appointmentDate,\n                appointmentTime: appointment.appointmentTime,\n              };\n            }\n          } catch (error) {\n            console.error(\"Error enriching penalty:\", error);\n          }\n          return penalty;\n        })\n      );\n\n      return enrichedPenalties;\n    },\n    enabled: !!user && user.role === \"merchant\",\n  });\n\n  // Update penalty status mutation\n  const updatePenaltyMutation = useMutation({\n    mutationFn: async ({ penaltyId, status }: { penaltyId: string; status: string }) => {\n      const response = await fetch(`/api/penalties/${penaltyId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({ status }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Erro ao atualizar status da multa\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Force refetch of penalties data for merchant\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchant/penalties\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/merchant/penalties\"] });\n      \n      // Also invalidate client penalties cache so clients see updates immediately\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/penalties\"] });\n      \n      toast({\n        title: \"Status atualizado\",\n        description: variables.status === \"paid\" ? \"Multa marcada como paga\" : \"Multa dispensada\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error updating penalty:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar status da multa\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter penalties\n  const filteredPenalties = penalties.filter(penalty => {\n    if (statusFilter === \"all\") return true;\n    return penalty.status === statusFilter;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pendente</Badge>;\n      case \"paid\":\n        return <Badge className=\"bg-green-100 text-green-800\">Pago</Badge>;\n      case \"waived\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">Dispensado</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return (amount / 100).toLocaleString(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR });\n  };\n\n  const formatAppointmentDate = (dateString: string) => {\n    return format(new Date(dateString + 'T00:00:00'), \"dd/MM/yyyy\", { locale: ptBR });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Carregando multas...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-destructive\">Erro ao carregar multas</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Gerenciar Multas</h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Multas de cancelamento aplicadas aos clientes\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <DollarSign className=\"w-5 h-5 text-yellow-600\" />\n                  Multas Pendentes\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {penalties.filter(p => p.status === \"pending\").length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {formatCurrency(\n                    penalties\n                      .filter(p => p.status === \"pending\")\n                      .reduce((sum, p) => sum + p.amount, 0)\n                  )} em aberto\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  Multas Pagas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {penalties.filter(p => p.status === \"paid\").length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {formatCurrency(\n                    penalties\n                      .filter(p => p.status === \"paid\")\n                      .reduce((sum, p) => sum + p.amount, 0)\n                  )} recebido\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <XCircle className=\"w-5 h-5 text-blue-600\" />\n                  Multas Dispensadas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {penalties.filter(p => p.status === \"waived\").length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {formatCurrency(\n                    penalties\n                      .filter(p => p.status === \"waived\")\n                      .reduce((sum, p) => sum + p.amount, 0)\n                  )} dispensado\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Multas Aplicadas</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Filtrar por status:</span>\n                  <select\n                    value={statusFilter}\n                    onChange={(e) => setStatusFilter(e.target.value)}\n                    className=\"px-3 py-1 border border-border rounded-md bg-background text-foreground text-sm\"\n                  >\n                    <option value=\"all\">Todos</option>\n                    <option value=\"pending\">Pendente</option>\n                    <option value=\"paid\">Pago</option>\n                    <option value=\"waived\">Dispensado</option>\n                  </select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredPenalties.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">\n                    {statusFilter === \"all\" \n                      ? \"Nenhuma multa encontrada\"\n                      : `Nenhuma multa com status \"${statusFilter}\"`\n                    }\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredPenalties.map((penalty) => (\n                    <div key={penalty.id} className=\"border rounded-lg p-6 space-y-4\">\n                      {/* Header com status e valor */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          {getStatusBadge(penalty.status)}\n                          <span className=\"text-sm text-muted-foreground\">\n                            Criada em: {formatDate(penalty.createdAt)}\n                          </span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-bold text-red-600\">\n                            {formatCurrency(penalty.amount)}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Multa de {penalty.type === \"cancellation\" ? \"Cancelamento\" : penalty.type}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Informações detalhadas da multa */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                        {/* Informações do Cliente */}\n                        <div className=\"space-y-3 bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                          <h4 className=\"font-semibold text-blue-800 dark:text-blue-200 flex items-center gap-2\">\n                            <User className=\"w-4 h-4\" />\n                            Cliente\n                          </h4>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <User className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                              <span className=\"text-sm font-medium\">{penalty.clientName}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Phone className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                              <span className=\"text-sm\">{penalty.clientPhone}</span>\n                            </div>\n                            {penalty.clientEmail && (\n                              <div className=\"flex items-center gap-2\">\n                                <Mail className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                                <span className=\"text-sm\">{penalty.clientEmail}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Informações do Serviço */}\n                        <div className=\"space-y-3 bg-purple-50 dark:bg-purple-950/20 p-4 rounded-lg border border-purple-200 dark:border-purple-800\">\n                          <h4 className=\"font-semibold text-purple-800 dark:text-purple-200 flex items-center gap-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            Serviço\n                          </h4>\n                          <div className=\"space-y-2\">\n                            {penalty.serviceName ? (\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4 text-purple-600 dark:text-purple-400\" />\n                                <span className=\"text-sm font-medium\">{penalty.serviceName}</span>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4 text-gray-400\" />\n                                <span className=\"text-sm text-gray-500\">Serviço não encontrado</span>\n                              </div>\n                            )}\n                            {penalty.servicePrice ? (\n                              <div className=\"flex items-center gap-2\">\n                                <DollarSign className=\"w-4 h-4 text-purple-600 dark:text-purple-400\" />\n                                <span className=\"text-sm\">{formatCurrency(penalty.servicePrice)}</span>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center gap-2\">\n                                <DollarSign className=\"w-4 h-4 text-gray-400\" />\n                                <span className=\"text-sm text-gray-500\">Preço não disponível</span>\n                              </div>\n                            )}\n                            {penalty.appointmentDate && penalty.appointmentTime ? (\n                              <div className=\"flex items-center gap-2\">\n                                <Clock className=\"w-4 h-4 text-purple-600 dark:text-purple-400\" />\n                                <span className=\"text-sm\">\n                                  {formatAppointmentDate(penalty.appointmentDate)} às {penalty.appointmentTime}\n                                </span>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center gap-2\">\n                                <Clock className=\"w-4 h-4 text-gray-400\" />\n                                <span className=\"text-sm text-gray-500\">Horário não disponível</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Informações do Funcionário */}\n                        <div className=\"space-y-3 bg-green-50 dark:bg-green-950/20 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n                          <h4 className=\"font-semibold text-green-800 dark:text-green-200 flex items-center gap-2\">\n                            <User className=\"w-4 h-4\" />\n                            Funcionário\n                          </h4>\n                          <div className=\"space-y-2\">\n                            {penalty.employeeName ? (\n                              <div className=\"flex items-center gap-2\">\n                                <User className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                                <span className=\"text-sm font-medium\">{penalty.employeeName}</span>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center gap-2\">\n                                <User className=\"w-4 h-4 text-gray-400\" />\n                                <span className=\"text-sm text-gray-500\">Qualquer funcionário</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Detalhes da Multa e Cancelamento */}\n                        <div className=\"space-y-3 bg-red-50 dark:bg-red-950/20 p-4 rounded-lg border border-red-200 dark:border-red-800\">\n                          <h4 className=\"font-semibold text-red-800 dark:text-red-200 flex items-center gap-2\">\n                            <FileText className=\"w-4 h-4\" />\n                            Multa & Cancelamento\n                          </h4>\n                          <div className=\"space-y-3\">\n                            {/* Valor da Multa */}\n                            <div className=\"flex items-start gap-2\">\n                              <DollarSign className=\"w-4 h-4 text-red-600 dark:text-red-400 mt-0.5\" />\n                              <div className=\"text-sm\">\n                                <span className=\"font-medium text-red-600 dark:text-red-400\">\n                                  {formatCurrency(penalty.amount)}\n                                </span>\n                                <p className=\"text-xs text-red-500\">\n                                  {penalty.type === \"cancellation\" ? \"Multa de cancelamento\" : penalty.type}\n                                </p>\n                              </div>\n                            </div>\n                            \n                            {/* Data/Hora do Cancelamento */}\n                            <div className=\"flex items-start gap-2\">\n                              <Clock className=\"w-4 h-4 text-red-600 dark:text-red-400 mt-0.5\" />\n                              <div className=\"text-sm\">\n                                <span className=\"font-medium\">Cancelado em:</span>\n                                <p className=\"text-xs text-red-500\">{formatDate(penalty.createdAt)}</p>\n                              </div>\n                            </div>\n                            \n                            {/* Motivo do Cancelamento */}\n                            <div className=\"flex items-start gap-2\">\n                              <FileText className=\"w-4 h-4 text-red-600 dark:text-red-400 mt-0.5\" />\n                              <div className=\"text-sm\">\n                                <span className=\"font-medium\">Motivo do cancelamento:</span>\n                                <p className=\"text-xs text-red-500 mt-1 break-words bg-white dark:bg-gray-800 p-2 rounded border\">\n                                  {penalty.reason || \"Nenhum motivo informado\"}\n                                </p>\n                              </div>\n                            </div>\n                            \n                            {/* Status de Pagamento */}\n                            {penalty.status === \"paid\" && penalty.paidAt && (\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 text-green-600 dark:text-green-400 mt-0.5\" />\n                                <div className=\"text-sm\">\n                                  <span className=\"font-medium text-green-600\">Pago em:</span>\n                                  <p className=\"text-xs text-green-500\">{formatDate(penalty.paidAt)}</p>\n                                  {penalty.paidBy && (\n                                    <p className=\"text-xs text-green-500\">Por: {penalty.paidBy}</p>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                            \n                            {penalty.status === \"waived\" && (\n                              <div className=\"flex items-start gap-2\">\n                                <XCircle className=\"w-4 h-4 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                                <div className=\"text-sm\">\n                                  <span className=\"font-medium text-blue-600\">Multa dispensada</span>\n                                  <p className=\"text-xs text-blue-500\">em {formatDate(penalty.updatedAt)}</p>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Actions */}\n                      {penalty.status === \"pending\" && (\n                        <div className=\"flex gap-3 pt-4 border-t\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() => updatePenaltyMutation.mutate({ \n                              penaltyId: penalty.id, \n                              status: \"paid\" \n                            })}\n                            disabled={updatePenaltyMutation.isPending}\n                            className=\"bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-2\" />\n                            {updatePenaltyMutation.isPending ? \"Processando...\" : \"Marcar como Pago\"}\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updatePenaltyMutation.mutate({ \n                              penaltyId: penalty.id, \n                              status: \"waived\" \n                            })}\n                            disabled={updatePenaltyMutation.isPending}\n                            className=\"disabled:opacity-50\"\n                          >\n                            <XCircle className=\"w-4 h-4 mr-2\" />\n                            {updatePenaltyMutation.isPending ? \"Processando...\" : \"Dispensar Multa\"}\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":25569},"client/src/pages/merchant-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Clock, Save, ArrowLeft, Image, Power, Upload, DollarSign, AlertTriangle } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { BookingPoliciesData } from \"@shared/schema\";\n\nconst merchantScheduleSchema = z.object({\n  workDays: z.array(z.number()).min(1, \"Selecione pelo menos um dia de funcionamento\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário deve estar no formato HH:MM\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Horário deve estar no formato HH:MM\"),\n  hasBreak: z.boolean().optional(),\n  breakStartTime: z.string().optional(),\n  breakEndTime: z.string().optional(),\n}).refine((data) => {\n  if (data.hasBreak) {\n    return data.breakStartTime && data.breakEndTime;\n  }\n  return true;\n}, {\n  message: \"Horários de intervalo são obrigatórios quando habilitado\",\n  path: [\"breakStartTime\"],\n});\n\ntype MerchantScheduleForm = z.infer<typeof merchantScheduleSchema>;\n\nconst weekDays = [\n  { id: 0, name: \"Domingo\", short: \"Dom\" },\n  { id: 1, name: \"Segunda-feira\", short: \"Seg\" },\n  { id: 2, name: \"Terça-feira\", short: \"Ter\" },\n  { id: 3, name: \"Quarta-feira\", short: \"Qua\" },\n  { id: 4, name: \"Quinta-feira\", short: \"Qui\" },\n  { id: 5, name: \"Sexta-feira\", short: \"Sex\" },\n  { id: 6, name: \"Sábado\", short: \"Sáb\" },\n];\n\nexport default function MerchantSettings() {\n  const [user, setUser] = useState(authService.getState().user);\n  const [hasBreak, setHasBreak] = useState(false);\n  const [logoUrl, setLogoUrl] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(true);\n  const [bookingPolicies, setBookingPolicies] = useState<BookingPoliciesData>({\n    noShowFeeEnabled: false,\n    noShowFeeAmount: 0,\n    lateFeeEnabled: false,\n    lateFeeAmount: 0,\n    lateToleranceMinutes: 15,\n    cancellationPolicyHours: 24,\n    cancellationFeeEnabled: false,\n    cancellationFeeAmount: 0,\n  });\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Determine merchantId based on user role\n  const merchantId = user?.role === \"merchant\" ? user.id : user?.merchantId;\n\n  // Redirect if not authenticated or not authorized\n  useEffect(() => {\n    if (!authService.getState().isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n    if (user && user.role !== \"merchant\" && user.role !== \"admin\") {\n      setLocation(\"/dashboard\");\n    }\n  }, [user, setLocation]);\n\n  // Fetch current merchant data\n  const { data: merchant, isLoading } = useQuery({\n    queryKey: [`/api/merchants/${merchantId}`],\n    enabled: !!merchantId,\n  });\n\n  const form = useForm<MerchantScheduleForm>({\n    resolver: zodResolver(merchantScheduleSchema),\n    defaultValues: {\n      workDays: [1, 2, 3, 4, 5, 6], // Monday to Saturday by default\n      startTime: \"09:00\",\n      endTime: \"18:00\",\n      hasBreak: false,\n      breakStartTime: \"\",\n      breakEndTime: \"\",\n    },\n  });\n\n  // Update form values when merchant data is loaded\n  useEffect(() => {\n    if (merchant) {\n      const workDays = merchant.workDays ? JSON.parse(merchant.workDays) : [1, 2, 3, 4, 5, 6];\n      const hasBreakTime = !!(merchant.breakStartTime && merchant.breakEndTime);\n\n      form.reset({\n        workDays: workDays,\n        startTime: merchant.startTime || \"09:00\",\n        endTime: merchant.endTime || \"18:00\",\n        hasBreak: hasBreakTime,\n        breakStartTime: merchant.breakStartTime || \"\",\n        breakEndTime: merchant.breakEndTime || \"\",\n      });\n\n      setHasBreak(hasBreakTime);\n      setLogoUrl(merchant.logoUrl || \"\");\n      setIsOpen(merchant.isOpen !== undefined ? merchant.isOpen : true);\n    }\n  }, [merchant, form]);\n\n  const updateScheduleMutation = useMutation({\n    mutationFn: async (data: MerchantScheduleForm) => {\n      console.log(\"=== DEBUG: updateScheduleMutation ===\");\n      console.log(\"merchantId:\", merchantId);\n      console.log(\"user:\", user);\n      console.log(\"data recebida:\", data);\n\n      if (!merchantId) {\n        console.error(\"Erro: merchantId não encontrado\");\n        throw new Error(\"Usuário não autenticado ou sem permissão\");\n      }\n\n      const scheduleData = {\n        workDays: JSON.stringify(data.workDays),\n        startTime: data.startTime,\n        endTime: data.endTime,\n        breakStartTime: (data.hasBreak && data.breakStartTime && data.breakStartTime.trim() !== \"\") ? data.breakStartTime : null,\n        breakEndTime: (data.hasBreak && data.breakEndTime && data.breakEndTime.trim() !== \"\") ? data.breakEndTime : null,\n      };\n\n      console.log(\"scheduleData preparado:\", scheduleData);\n\n      const url = `/api/merchants/${merchantId}/schedule`;\n      const token = localStorage.getItem('token');\n\n      console.log(\"URL da requisição:\", url);\n      console.log(\"Token presente:\", !!token);\n      console.log(\"Token value (primeiros 20 chars):\", token ? token.substring(0, 20) + '...' : 'NULO');\n      console.log(\"LocalStorage keys:\", Object.keys(localStorage));\n      console.log(\"Headers:\", {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token ? 'TOKEN_PRESENTE' : 'TOKEN_AUSENTE'}`\n      });\n\n      try {\n        const response = await fetch(url, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify(scheduleData),\n        });\n\n        console.log(\"Response status:\", response.status);\n        console.log(\"Response ok:\", response.ok);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Response error text:\", errorText);\n          throw new Error(`Erro ao atualizar horários: ${response.status} - ${errorText}`);\n        }\n\n        const result = await response.json();\n        console.log(\"Response success data:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Horários atualizados\",\n        description: \"Os horários de funcionamento foram atualizados com sucesso.\",\n      });\n      if (merchantId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/merchants/${merchantId}`] });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: error.message || \"Não foi possível atualizar os horários.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Upload logo mutation\n  const uploadLogoMutation = useMutation({\n    mutationFn: async (file: File) => {\n      if (!merchantId) {\n        throw new Error(\"Usuário não autenticado ou sem permissão\");\n      }\n\n      const formData = new FormData();\n      formData.append('logo', file);\n\n      const response = await fetch('/api/upload/logo', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao fazer upload');\n      }\n\n      const data = await response.json();\n      return data.logoUrl;\n    },\n    onSuccess: async (logoUrl: string) => {\n      // Update merchant with new logo URL\n      await updateLogoMutation.mutateAsync(logoUrl);\n      setLogoUrl(logoUrl);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao fazer upload\",\n        description: error.message || \"Não foi possível fazer upload da imagem.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update logo mutation\n  const updateLogoMutation = useMutation({\n    mutationFn: async (logoUrl: string) => {\n      console.log(\"=== DEBUG: updateLogoMutation ===\");\n      console.log(\"merchantId:\", merchantId);\n      console.log(\"logoUrl:\", logoUrl);\n\n      if (!merchantId) {\n        console.error(\"Erro: merchantId não encontrado para logo\");\n        throw new Error(\"Usuário não autenticado ou sem permissão\");\n      }\n\n      const url = `/api/merchants/${merchantId}/logo`;\n      const token = localStorage.getItem('token');\n\n      console.log(\"Logo URL da requisição:\", url);\n      console.log(\"Logo Token presente:\", !!token);\n\n      try {\n        const response = await fetch(url, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify({ logoUrl }),\n        });\n\n        console.log(\"Logo Response status:\", response.status);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Logo Response error:\", errorText);\n          throw new Error(`Erro ao atualizar logo: ${response.status} - ${errorText}`);\n        }\n\n        const result = await response.json();\n        console.log(\"Logo Response success:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"Logo Fetch error:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logo atualizado\",\n        description: \"O logo do salão foi atualizado com sucesso.\",\n      });\n      if (merchantId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/merchants/${merchantId}`] });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar logo\",\n        description: error.message || \"Não foi possível atualizar o logo.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle file upload\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size (5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"Arquivo muito grande\",\n        description: \"A imagem deve ter no máximo 5MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file type\n    const allowedTypes = [\n      'image/jpeg',\n      'image/jpg', \n      'image/png',\n      'image/gif',\n      'image/webp',\n      'image/bmp',\n      'image/svg+xml'\n    ];\n\n    if (!file.type.startsWith('image/') && !allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Tipo de arquivo inválido\",\n        description: \"Apenas arquivos de imagem são permitidos (JPG, PNG, GIF, WebP, BMP, SVG).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadLogoMutation.mutate(file);\n  };\n\n  // Update open/closed status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async (isOpen: boolean) => {\n      console.log(\"=== DEBUG: updateStatusMutation ===\");\n      console.log(\"merchantId:\", merchantId);\n      console.log(\"isOpen:\", isOpen);\n\n      if (!merchantId) {\n        console.error(\"Erro: merchantId não encontrado para status\");\n        throw new Error(\"Usuário não autenticado ou sem permissão\");\n      }\n\n      const url = `/api/merchants/${merchantId}/is-open`;\n      const token = localStorage.getItem('token');\n\n      console.log(\"Status URL da requisição:\", url);\n      console.log(\"Status Token presente:\", !!token);\n\n      try {\n        const response = await fetch(url, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify({ isOpen }),\n        });\n\n        console.log(\"Status Response status:\", response.status);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Status Response error:\", errorText);\n          throw new Error(`Erro ao atualizar status: ${response.status} - ${errorText}`);\n        }\n\n        const result = await response.json();\n        console.log(\"Status Response success:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"Status Fetch error:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status atualizado\",\n        description: `Salão marcado como ${isOpen ? \"aberto\" : \"fechado\"}.`,\n      });\n      if (merchantId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/merchants/${merchantId}`] });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar status\",\n        description: error.message || \"Não foi possível atualizar o status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch booking policies\n  const { data: fetchedBookingPolicies } = useQuery({\n    queryKey: [`/api/merchants/${merchantId}/booking-policies`],\n    enabled: !!merchantId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Update booking policies state when data is fetched\n  useEffect(() => {\n    if (fetchedBookingPolicies) {\n      // Convert cents to reais for display\n      setBookingPolicies({\n        ...fetchedBookingPolicies,\n        noShowFeeAmount: fetchedBookingPolicies.noShowFeeAmount / 100,\n        lateFeeAmount: fetchedBookingPolicies.lateFeeAmount / 100,\n        cancellationFeeAmount: fetchedBookingPolicies.cancellationFeeAmount / 100,\n      });\n    }\n  }, [fetchedBookingPolicies]);\n\n  // Update booking policies mutation\n  const updateBookingPoliciesMutation = useMutation({\n    mutationFn: async (policies: BookingPoliciesData) => {\n      if (!merchantId) {\n        throw new Error(\"Usuário não autenticado ou sem permissão\");\n      }\n\n      // Convert reais to cents before sending to backend\n      const policiesInCents = {\n        ...policies,\n        noShowFeeAmount: Math.round(policies.noShowFeeAmount * 100),\n        lateFeeAmount: Math.round(policies.lateFeeAmount * 100),\n        cancellationFeeAmount: Math.round(policies.cancellationFeeAmount * 100),\n      };\n\n      const response = await apiRequest(\"PATCH\", `/api/merchants/${merchantId}/booking-policies`, policiesInCents);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Políticas atualizadas\",\n        description: \"As políticas de agendamento foram atualizadas com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/merchants/${merchantId}/booking-policies`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar políticas\",\n        description: error.message || \"Não foi possível atualizar as políticas.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBookingPolicyChange = (field: keyof BookingPoliciesData, value: boolean | number) => {\n    setBookingPolicies(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSaveBookingPolicies = () => {\n    updateBookingPoliciesMutation.mutate(bookingPolicies);\n  };\n\n  const onSubmit = (data: MerchantScheduleForm) => {\n    updateScheduleMutation.mutate(data);\n  };\n\n  const handleWorkDayToggle = (dayId: number, checked: boolean) => {\n    const currentWorkDays = form.getValues(\"workDays\");\n    if (checked) {\n      if (!currentWorkDays.includes(dayId)) {\n        form.setValue(\"workDays\", [...currentWorkDays, dayId].sort());\n      }\n    } else {\n      form.setValue(\"workDays\", currentWorkDays.filter(id => id !== dayId));\n    }\n  };\n\n  const handleBreakToggle = (checked: boolean) => {\n    setHasBreak(checked);\n    form.setValue(\"hasBreak\", checked);\n    if (!checked) {\n      form.setValue(\"breakStartTime\", \"\");\n      form.setValue(\"breakEndTime\", \"\");\n    } else {\n      form.setValue(\"breakStartTime\", \"12:00\");\n      form.setValue(\"breakEndTime\", \"13:00\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\" data-testid=\"page-merchant-settings\">\n        <div className=\"flex items-center justify-center h-64\">\n          <p className=\"text-muted-foreground\">Carregando configurações...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-merchant-settings\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Voltar\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">\n                  Configurações de Horário\n                </h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Configure os dias e horários de funcionamento do seu salão\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Salão:</p>\n                <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-salon-name\">\n                  {user?.name}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5\" />\n                <span>Horários de Funcionamento</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Work Days */}\n                  <FormField\n                    control={form.control}\n                    name=\"workDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Dias de Funcionamento</FormLabel>\n                        <FormDescription>\n                          Selecione os dias da semana em que o salão funciona\n                        </FormDescription>\n                        <FormControl>\n                          <div className=\"grid grid-cols-7 gap-4\">\n                            {weekDays.map((day) => (\n                              <div key={day.id} className=\"flex flex-col items-center space-y-2\">\n                                <Checkbox\n                                  id={`day-${day.id}`}\n                                  checked={field.value.includes(day.id)}\n                                  onCheckedChange={(checked) => \n                                    handleWorkDayToggle(day.id, checked as boolean)\n                                  }\n                                  data-testid={`checkbox-day-${day.id}`}\n                                />\n                                <Label \n                                  htmlFor={`day-${day.id}`} \n                                  className=\"text-xs text-center cursor-pointer\"\n                                >\n                                  {day.short}\n                                </Label>\n                              </div>\n                            ))}\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Working Hours */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"startTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Horário de Abertura</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"time\"\n                              {...field}\n                              data-testid=\"input-start-time\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"endTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Horário de Fechamento</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"time\"\n                              {...field}\n                              data-testid=\"input-end-time\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Break Hours */}\n                  <div>\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <Checkbox\n                        id=\"hasBreak\"\n                        checked={hasBreak}\n                        onCheckedChange={handleBreakToggle}\n                        data-testid=\"checkbox-has-break\"\n                      />\n                      <Label htmlFor=\"hasBreak\" className=\"text-lg font-medium text-foreground cursor-pointer\">\n                        Possui intervalo para almoço\n                      </Label>\n                    </div>\n\n                    {hasBreak && (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"breakStartTime\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Início do Intervalo</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"time\"\n                                  {...field}\n                                  data-testid=\"input-break-start-time\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"breakEndTime\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Fim do Intervalo</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"time\"\n                                  {...field}\n                                  data-testid=\"input-break-end-time\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Submit Button */}\n                  <div className=\"flex justify-end\">\n                    <Button\n                      type=\"submit\"\n                      disabled={updateScheduleMutation.isPending}\n                      data-testid=\"button-save-schedule\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {updateScheduleMutation.isPending ? \"Salvando...\" : \"Salvar Alterações\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Logo Management Card */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Image className=\"w-5 h-5\" />\n                <span>Logo do Salão</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {logoUrl && (\n                  <div className=\"flex items-center justify-center w-32 h-32 border border-dashed border-muted-foreground rounded-lg overflow-hidden\">\n                    <img\n                      src={logoUrl.startsWith('/uploads/') ? `${window.location.origin}${logoUrl}` : logoUrl}\n                      alt=\"Logo do salão\"\n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-current-logo\"\n                    />\n                  </div>\n                )}\n\n                <div className=\"space-y-4\">\n                  {/* Upload de Arquivo */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"logoFile\" className=\"text-base font-medium\">Fazer Upload da Imagem</Label>\n                    <div className=\"flex flex-col space-y-2\">\n                      <div className=\"relative\">\n                        <Input\n                          id=\"logoFile\"\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleFileUpload}\n                          disabled={uploadLogoMutation.isPending}\n                          data-testid=\"input-logo-file\"\n                          className=\"bg-gray-100 border-2 border-dashed border-gray-300 hover:border-gray-400 focus:border-blue-500 cursor-pointer file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                        />\n                        {uploadLogoMutation.isPending && (\n                          <div className=\"absolute inset-0 bg-white bg-opacity-50 flex items-center justify-center\">\n                            <span className=\"text-sm text-blue-600 font-medium\">Enviando...</span>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex items-center justify-center w-full\">\n                        <label \n                          htmlFor=\"logoFile\" \n                          className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors\"\n                        >\n                          <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                            <Upload className=\"w-8 h-8 mb-4 text-gray-500\" />\n                            <p className=\"mb-2 text-sm text-gray-500\">\n                              <span className=\"font-semibold\">Clique para fazer upload</span> ou arraste e solte\n                            </p>\n                            <p className=\"text-xs text-gray-500\">JPG, PNG, GIF, WebP, BMP ou SVG (máx. 5MB)</p>\n                          </div>\n                        </label>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Selecione uma imagem do seu computador (máx. 5MB)\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex-1 h-px bg-border\"></div>\n                    <span className=\"text-sm text-muted-foreground\">OU</span>\n                    <div className=\"flex-1 h-px bg-border\"></div>\n                  </div>\n\n                  {/* URL da Imagem */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"logoUrl\">URL da Imagem</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"logoUrl\"\n                        type=\"url\"\n                        value={logoUrl}\n                        onChange={(e) => setLogoUrl(e.target.value)}\n                        placeholder=\"https://exemplo.com/logo.png\"\n                        data-testid=\"input-logo-url\"\n                      />\n                      <Button\n                        onClick={() => updateLogoMutation.mutate(logoUrl)}\n                        disabled={updateLogoMutation.isPending || !logoUrl.trim()}\n                        data-testid=\"button-update-logo\"\n                      >\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        {updateLogoMutation.isPending ? \"Salvando...\" : \"Salvar URL\"}\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Cole a URL de uma imagem online\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Open/Closed Status Card */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Power className=\"w-5 h-5\" />\n                <span>Status de Funcionamento</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"isOpen\" className=\"text-base font-medium\">\n                    Salão {isOpen ? \"Aberto\" : \"Fechado\"}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Controle se o salão está atualmente funcionando para novos agendamentos.\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isOpen\"\n                    checked={isOpen}\n                    onCheckedChange={(checked) => {\n                      setIsOpen(checked);\n                      updateStatusMutation.mutate(checked);\n                    }}\n                    disabled={updateStatusMutation.isPending}\n                    data-testid=\"switch-is-open\"\n                  />\n                  <span className={`text-sm font-medium ${isOpen ? \"text-green-600\" : \"text-red-600\"}`}>\n                    {isOpen ? \"Aberto\" : \"Fechado\"}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Booking Policies Card */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                <span>Políticas de Agendamento</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Cancellation Fee */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"cancellationFeeEnabled\" className=\"text-base font-medium flex items-center space-x-2\">\n                      <AlertTriangle className=\"w-4 h-4\" />\n                      <span>Multa por Cancelamento</span>\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Cobrança por cancelamento fora do prazo estabelecido.\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"cancellationFeeEnabled\"\n                    checked={bookingPolicies.cancellationFeeEnabled}\n                    onCheckedChange={(checked) => handleBookingPolicyChange('cancellationFeeEnabled', checked)}\n                    data-testid=\"switch-cancellation-fee\"\n                  />\n                </div>\n                {bookingPolicies.cancellationFeeEnabled && (\n                  <div className=\"ml-6 space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"cancellationFeeAmount\">Valor da multa (R$)</Label>\n                      <Input\n                        id=\"cancellationFeeAmount\"\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={bookingPolicies.cancellationFeeAmount === 0 ? \"\" : bookingPolicies.cancellationFeeAmount}\n                        onChange={(e) => handleBookingPolicyChange('cancellationFeeAmount', e.target.value === \"\" ? 0 : parseFloat(e.target.value))}\n                        className=\"w-32\"\n                        data-testid=\"input-cancellation-fee-amount\"\n                        placeholder=\"0,00\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"cancellationPolicyHours\">Prazo para cancelamento (horas)</Label>\n                      <Input\n                        id=\"cancellationPolicyHours\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"168\"\n                        value={bookingPolicies.cancellationPolicyHours}\n                        onChange={(e) => handleBookingPolicyChange('cancellationPolicyHours', parseInt(e.target.value || '24'))}\n                        className=\"w-32\"\n                        data-testid=\"input-cancellation-hours\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Save Button */}\n              <div className=\"pt-4 border-t\">\n                <Button\n                  onClick={handleSaveBookingPolicies}\n                  disabled={updateBookingPoliciesMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"button-save-policies\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {updateBookingPoliciesMutation.isPending ? \"Salvando...\" : \"Salvar Políticas\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":35266},"client/src/pages/merchants.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MerchantTable from \"@/components/merchants/merchant-table\";\nimport MerchantForm from \"@/components/merchants/merchant-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Plus, Search } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Merchant } from \"@shared/schema\";\n\nexport default function Merchants() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isNewMerchantModalOpen, setIsNewMerchantModalOpen] = useState(false);\n  const [editingMerchant, setEditingMerchant] = useState<Merchant | null>(null);\n  const [viewingMerchant, setViewingMerchant] = useState<Merchant | null>(null);\n  const [deletingMerchant, setDeletingMerchant] = useState<Merchant | null>(null);\n  const { toast } = useToast();\n\n  const { data: merchants = [], isLoading } = useQuery<Merchant[]>({\n    queryKey: [\"/api/merchants\"],\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  const createMerchantMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/merchants\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      setIsNewMerchantModalOpen(false);\n      toast({\n        title: \"Comerciante criado com sucesso!\",\n        description: \"O novo comerciante foi adicionado ao sistema.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar comerciante\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMerchantMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/merchants/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      setEditingMerchant(null);\n      toast({\n        title: \"Comerciante atualizado com sucesso!\",\n        description: \"As informações foram salvas.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar comerciante\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/merchants/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      toast({\n        title: \"Status atualizado com sucesso!\",\n        description: \"O status do comerciante foi alterado.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar status\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMerchantMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/merchants/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      setDeletingMerchant(null);\n      toast({\n        title: \"Comerciante excluído com sucesso!\",\n        description: \"O comerciante foi removido do sistema.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao excluir comerciante\",\n        description: error.message || \"Ocorreu um erro inesperado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredMerchants = merchants.filter((merchant) =>\n    merchant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    merchant.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleView = (merchant: Merchant) => {\n    setViewingMerchant(merchant);\n  };\n\n  const handleEdit = (merchant: Merchant) => {\n    setEditingMerchant(merchant);\n  };\n\n  const handleUpdateStatus = (merchantId: string, status: string) => {\n    updateStatusMutation.mutate({ id: merchantId, status });\n  };\n\n  const handleDelete = (merchant: Merchant) => {\n    setDeletingMerchant(merchant);\n  };\n\n  const confirmDelete = () => {\n    if (deletingMerchant) {\n      deleteMerchantMutation.mutate(deletingMerchant.id);\n    }\n  };\n\n  const handleCreateMerchant = async (data: any) => {\n    await createMerchantMutation.mutateAsync(data);\n  };\n\n  const handleUpdateMerchant = async (data: any) => {\n    if (editingMerchant) {\n      await updateMerchantMutation.mutateAsync({ id: editingMerchant.id, data });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-merchants\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Gerenciar Comerciantes</h2>\n              <Button \n                onClick={() => setIsNewMerchantModalOpen(true)}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-new-merchant\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                <span>Novo Comerciante</span>\n              </Button>\n            </div>\n\n            {/* Search and Filter */}\n            <div className=\"bg-card rounded-lg border border-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Lista de Comerciantes</h3>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Buscar comerciantes...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                    data-testid=\"input-search\"\n                  />\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Search className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Merchants Table */}\n            <MerchantTable\n              merchants={filteredMerchants}\n              onView={handleView}\n              onEdit={handleEdit}\n              onUpdateStatus={handleUpdateStatus}\n              onDelete={handleDelete}\n              isLoading={isLoading}\n            />\n          </div>\n        </main>\n      </div>\n\n      {/* New Merchant Modal */}\n      <Dialog open={isNewMerchantModalOpen} onOpenChange={setIsNewMerchantModalOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-new-merchant\">\n          <DialogHeader>\n            <DialogTitle>Novo Comerciante</DialogTitle>\n          </DialogHeader>\n          <MerchantForm\n            onSubmit={handleCreateMerchant}\n            onCancel={() => setIsNewMerchantModalOpen(false)}\n            isLoading={createMerchantMutation.isPending}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Merchant Modal */}\n      <Dialog open={!!editingMerchant} onOpenChange={() => setEditingMerchant(null)}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-edit-merchant\">\n          <DialogHeader>\n            <DialogTitle>Editar Comerciante</DialogTitle>\n          </DialogHeader>\n          {editingMerchant && (\n            <MerchantForm\n              onSubmit={handleUpdateMerchant}\n              onCancel={() => setEditingMerchant(null)}\n              initialData={editingMerchant}\n              isLoading={updateMerchantMutation.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* View Merchant Modal */}\n      <Dialog open={!!viewingMerchant} onOpenChange={() => setViewingMerchant(null)}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-view-merchant\">\n          <DialogHeader>\n            <DialogTitle>Detalhes do Comerciante</DialogTitle>\n          </DialogHeader>\n          {viewingMerchant && (\n            <div className=\"space-y-4\">\n              <div>\n                <strong>Nome do Estabelecimento:</strong> {viewingMerchant.name}\n              </div>\n              <div>\n                <strong>Proprietário:</strong> {viewingMerchant.ownerName}\n              </div>\n              <div>\n                <strong>Email:</strong> {viewingMerchant.email}\n              </div>\n              <div>\n                <strong>Telefone:</strong> {viewingMerchant.phone}\n              </div>\n              <div>\n                <strong>Endereço:</strong> {viewingMerchant.address}\n              </div>\n              <div>\n                <strong>Status:</strong> {viewingMerchant.status}\n              </div>\n              <div>\n                <strong>Cadastrado em:</strong> {new Date(viewingMerchant.createdAt!).toLocaleDateString(\"pt-BR\")}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Modal */}\n      <AlertDialog open={!!deletingMerchant} onOpenChange={() => setDeletingMerchant(null)}>\n        <AlertDialogContent data-testid=\"modal-delete-merchant\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir o comerciante \"{deletingMerchant?.name}\"?\n              <br />\n              <strong>Esta ação não pode ser desfeita!</strong>\n              <br />\n              Todos os dados relacionados (serviços, funcionários, clientes e agendamentos) também serão removidos.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              disabled={deleteMerchantMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMerchantMutation.isPending ? \"Excluindo...\" : \"Excluir\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":11485},"client/src/pages/new-appointment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Calendar, Clock, User, Phone, Mail } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Service {\n  id: string;\n  name: string;\n  duration: number;\n  price: number;\n}\n\nexport default function NewAppointment() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState(authService.getState().user);\n\n  const [formData, setFormData] = useState({\n    serviceId: \"\",\n    clientName: \"\",\n    clientPhone: \"\",\n    clientEmail: \"\",\n    appointmentDate: \"\",\n    appointmentTime: \"\",\n    notes: \"\",\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Fetch active services\n  const { data: services, isLoading: servicesLoading, error: servicesError } = useQuery<Service[]>({\n    queryKey: [\"/api/services/active\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/services/active\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch services');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (appointmentData: any) => {\n      const response = await fetch(\"/api/appointments\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify(appointmentData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao criar agendamento\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      // Check if client has pending penalties\n      if (data.hasPendingPenalties) {\n        toast({\n          title: \"⚠️ Atenção: Cliente com Multa Pendente\",\n          description: `Este cliente possui ${data.pendingPenaltiesCount} multa(s) pendente(s) no valor de R$ ${(data.pendingPenaltiesAmount / 100).toFixed(2)}. Considere cobrar antes do atendimento.`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Sucesso!\",\n          description: \"Agendamento criado com sucesso\",\n        });\n      }\n      \n      // Invalidate all appointment-related queries to sync all dashboards\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/appointments\"] });\n\n      setLocation(\"/schedule\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.serviceId || !formData.clientName || !formData.clientPhone ||\n        !formData.appointmentDate || !formData.appointmentTime) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAppointmentMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Fetch merchant data to get working hours\n  const { data: merchantData } = useQuery({\n    queryKey: [`/api/merchants/${user?.id}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/merchants/${user?.id}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch merchant data');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  // Generate time slots based on merchant working hours\n  const generateTimeSlots = () => {\n    if (!merchantData) return [];\n    \n    const startTime = merchantData.startTime || \"08:00\";\n    const endTime = merchantData.endTime || \"22:00\";\n    \n    const [startHour, startMinute] = startTime.split(':').map(Number);\n    const [endHour, endMinute] = endTime.split(':').map(Number);\n    \n    // Check if selected date is today\n    const today = new Date().toISOString().split('T')[0];\n    const isToday = formData.appointmentDate === today;\n    const now = new Date();\n    const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();\n    \n    const slots = [];\n    let currentHour = startHour;\n    let currentMinute = startMinute;\n    \n    while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {\n      const timeSlot = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;\n      const slotTimeInMinutes = currentHour * 60 + currentMinute;\n      \n      // Skip time slots that have already passed today\n      if (isToday && slotTimeInMinutes <= currentTimeInMinutes) {\n        // Increment by 30 minutes and continue\n        currentMinute += 30;\n        if (currentMinute >= 60) {\n          currentMinute = 0;\n          currentHour++;\n        }\n        continue;\n      }\n      \n      slots.push(timeSlot);\n      \n      // Increment by 30 minutes\n      currentMinute += 30;\n      if (currentMinute >= 60) {\n        currentMinute = 0;\n        currentHour++;\n      }\n    }\n    \n    return slots;\n  };\n\n  const timeSlots = generateTimeSlots();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <h1 className=\"text-2xl font-bold text-foreground\">Novo Agendamento</h1>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-muted-foreground\">Comerciante:</p>\n              <p className=\"text-sm font-medium text-foreground\">{user?.name}</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Service Selection */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"service\">Serviço *</Label>\n                  {servicesError && (\n                    <p className=\"text-sm text-red-600\">\n                      Erro ao carregar serviços. Verifique se você tem serviços cadastrados.\n                    </p>\n                  )}\n                  {!servicesLoading && !servicesError && services && services.length === 0 && (\n                    <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                      <p className=\"text-sm text-yellow-800 mb-2\">\n                        Você precisa cadastrar pelo menos um serviço para criar agendamentos.\n                      </p>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setLocation(\"/services\")}\n                      >\n                        Gerenciar Serviços\n                      </Button>\n                    </div>\n                  )}\n                  <Select\n                    value={formData.serviceId}\n                    onValueChange={(value) => handleInputChange(\"serviceId\", value)}\n                    disabled={servicesLoading || !!servicesError || (services && services.length === 0)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={\n                        servicesLoading \n                          ? \"Carregando serviços...\" \n                          : services && services.length === 0 \n                            ? \"Nenhum serviço disponível\" \n                            : \"Selecione um serviço\"\n                      } />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {!servicesLoading && services?.map((service) => (\n                        <SelectItem key={service.id} value={service.id}>\n                          {service.name} - R$ {(service.price / 100).toFixed(2)} ({service.duration}min)\n                        </SelectItem>\n                      ))}\n                      {!servicesLoading && (!services || services.length === 0) && (\n                        <div className=\"p-2 text-sm text-muted-foreground text-center\">\n                          Nenhum serviço disponível\n                        </div>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Client Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"clientName\">Nome do Cliente *</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"clientName\"\n                        type=\"text\"\n                        placeholder=\"Nome completo\"\n                        className=\"pl-10\"\n                        value={formData.clientName}\n                        onChange={(e) => handleInputChange(\"clientName\", e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"clientPhone\">Telefone *</Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"clientPhone\"\n                        type=\"tel\"\n                        placeholder=\"(11) 99999-9999\"\n                        className=\"pl-10\"\n                        value={formData.clientPhone}\n                        onChange={(e) => handleInputChange(\"clientPhone\", e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"clientEmail\">Email (opcional)</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"clientEmail\"\n                      type=\"email\"\n                      placeholder=\"cliente@email.com\"\n                      className=\"pl-10\"\n                      value={formData.clientEmail}\n                      onChange={(e) => handleInputChange(\"clientEmail\", e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                {/* Date and Time */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"appointmentDate\">Data do Agendamento *</Label>\n                    <div className=\"relative\">\n                      <Calendar className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"appointmentDate\"\n                        type=\"date\"\n                        className=\"pl-10\"\n                        value={formData.appointmentDate}\n                        onChange={(e) => handleInputChange(\"appointmentDate\", e.target.value)}\n                        min={new Date().toISOString().split('T')[0]}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"appointmentTime\">Horário *</Label>\n                    <div className=\"relative\">\n                      <Clock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground z-10\" />\n                      <Select\n                        value={formData.appointmentTime}\n                        onValueChange={(value) => handleInputChange(\"appointmentTime\", value)}\n                      >\n                        <SelectTrigger className=\"pl-10\">\n                          <SelectValue placeholder=\"Selecione o horário\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {timeSlots.map((time) => (\n                            <SelectItem key={time} value={time}>\n                              {time}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Notes */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Observações (opcional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Observações sobre o agendamento...\"\n                    value={formData.notes}\n                    onChange={(e) => handleInputChange(\"notes\", e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex justify-end space-x-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setLocation(\"/merchant-dashboard\")}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createAppointmentMutation.isPending}\n                  >\n                    {createAppointmentMutation.isPending ? \"Criando...\" : \"Criar Agendamento\"}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":15896},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/promotions.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Plus, Edit, Trash2, DollarSign, Calendar, Percent, Tag } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Service {\n  id: string;\n  name: string;\n  price: number;\n  duration: number;\n  isActive: boolean;\n}\n\ninterface Promotion {\n  id: string;\n  merchantId: string;\n  serviceId: string;\n  name: string;\n  description?: string;\n  discountType: \"percentage\" | \"fixed\";\n  discountValue: number;\n  startDate: string;\n  endDate: string;\n  isActive: boolean;\n  serviceName?: string;\n  servicePrice?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function Promotions() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [user, setUser] = useState(authService.getState().user);\n  const [isNewPromotionModalOpen, setIsNewPromotionModalOpen] = useState(false);\n  const [editingPromotion, setEditingPromotion] = useState<Promotion | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    serviceId: \"\",\n    discountType: \"percentage\" as \"percentage\" | \"fixed\",\n    discountValue: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    isActive: true,\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n      if (!state.isAuthenticated) {\n        setLocation(\"/login\");\n      }\n    });\n    if (!authService.getState().isAuthenticated) {\n      setLocation(\"/login\");\n    }\n    return unsubscribe;\n  }, [setLocation]);\n\n  // Fetch services\n  const { data: services = [], isLoading: servicesLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\", user?.id],\n    queryFn: async () => {\n      const response = await fetch(\"/api/services\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch services\");\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  // Fetch promotions\n  const { data: promotions = [], isLoading: promotionsLoading } = useQuery<Promotion[]>({\n    queryKey: [\"/api/promotions\", user?.id],\n    queryFn: async () => {\n      const response = await fetch(\"/api/promotions\", {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch promotions\");\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  const createPromotionMutation = useMutation({\n    mutationFn: async (promotionData: any) => {\n      const response = await fetch(\"/api/promotions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({\n          ...promotionData,\n          discountValue: promotionData.discountType === \"percentage\" \n            ? parseInt(promotionData.discountValue)\n            : Math.round(parseFloat(promotionData.discountValue.replace(\",\", \".\")) * 100), // Convert to cents for fixed discount\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao criar promoção\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Promoção criada com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n      resetForm();\n      setIsNewPromotionModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePromotionMutation = useMutation({\n    mutationFn: async ({ id, promotionData }: { id: string; promotionData: any }) => {\n      const response = await fetch(`/api/promotions/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({\n          ...promotionData,\n          discountValue: promotionData.discountType === \"percentage\" \n            ? parseInt(promotionData.discountValue)\n            : Math.round(parseFloat(promotionData.discountValue.replace(\",\", \".\")) * 100), // Convert to cents for fixed discount\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao atualizar promoção\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Promoção atualizada com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n      resetForm();\n      setEditingPromotion(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePromotionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/promotions/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao excluir promoção\");\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Promoção excluída com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      serviceId: \"\",\n      discountType: \"percentage\",\n      discountValue: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      isActive: true,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.name || !formData.serviceId || !formData.discountValue || !formData.startDate || !formData.endDate) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const discountValue = parseFloat(formData.discountValue);\n    if (formData.discountType === \"percentage\" && (discountValue < 1 || discountValue > 99)) {\n      toast({\n        title: \"Erro\",\n        description: \"Desconto percentual deve estar entre 1% e 99%\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingPromotion) {\n      updatePromotionMutation.mutate({ id: editingPromotion.id, promotionData: formData });\n    } else {\n      createPromotionMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (promotion: Promotion) => {\n    setEditingPromotion(promotion);\n    setFormData({\n      name: promotion.name,\n      description: promotion.description || \"\",\n      serviceId: promotion.serviceId,\n      discountType: promotion.discountType,\n      discountValue: promotion.discountType === \"percentage\" \n        ? promotion.discountValue.toString()\n        : (promotion.discountValue / 100).toString(),\n      startDate: promotion.startDate,\n      endDate: promotion.endDate,\n      isActive: promotion.isActive,\n    });\n  };\n\n  const handleDelete = (promotionId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir esta promoção?\")) {\n      deletePromotionMutation.mutate(promotionId);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    }).format(amount / 100);\n  };\n\n  const calculateDiscountedPrice = (originalPrice: number, discountType: string, discountValue: number) => {\n    if (discountType === \"percentage\") {\n      return originalPrice - Math.round((originalPrice * discountValue) / 100);\n    } else {\n      return Math.max(0, originalPrice - discountValue);\n    }\n  };\n\n  const isPromotionActive = (startDate: string, endDate: string) => {\n    const today = new Date().toISOString().split('T')[0];\n    return today >= startDate && today <= endDate;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <h1 className=\"text-2xl font-bold text-foreground\">Gerenciar Promoções</h1>\n            </div>\n            <Dialog\n              open={isNewPromotionModalOpen || !!editingPromotion}\n              onOpenChange={(open) => {\n                if (!open) {\n                  setIsNewPromotionModalOpen(false);\n                  setEditingPromotion(null);\n                  resetForm();\n                }\n              }}\n            >\n              <DialogTrigger asChild>\n                <Button\n                  onClick={() => setIsNewPromotionModalOpen(true)}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span>Nova Promoção</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[600px]\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingPromotion ? \"Editar Promoção\" : \"Nova Promoção\"}\n                  </DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Nome da Promoção *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Ex: Desconto de Verão\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Descrição</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={formData.description}\n                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Descrição da promoção...\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceId\">Serviço *</Label>\n                    <Select\n                      value={formData.serviceId}\n                      onValueChange={(value) => setFormData(prev => ({ ...prev, serviceId: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecione um serviço\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {services.map((service) => (\n                          <SelectItem key={service.id} value={service.id}>\n                            {service.name} - {formatCurrency(service.price)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"discountType\">Tipo de Desconto *</Label>\n                      <Select\n                        value={formData.discountType}\n                        onValueChange={(value: \"percentage\" | \"fixed\") => setFormData(prev => ({ ...prev, discountType: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"percentage\">Porcentagem (%)</SelectItem>\n                          <SelectItem value=\"fixed\">Valor Fixo (R$)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"discountValue\">Valor do Desconto *</Label>\n                      <div className=\"relative\">\n                        {formData.discountType === \"percentage\" ? (\n                          <Percent className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <DollarSign className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        )}\n                        <Input\n                          id=\"discountValue\"\n                          type=\"number\"\n                          min={formData.discountType === \"percentage\" ? \"1\" : \"0.01\"}\n                          max={formData.discountType === \"percentage\" ? \"99\" : undefined}\n                          step={formData.discountType === \"percentage\" ? \"1\" : \"0.01\"}\n                          value={formData.discountValue}\n                          onChange={(e) => setFormData(prev => ({ ...prev, discountValue: e.target.value }))}\n                          placeholder={formData.discountType === \"percentage\" ? \"10\" : \"10,00\"}\n                          className=\"pl-10\"\n                          required\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"startDate\">Data de Início *</Label>\n                      <Input\n                        id=\"startDate\"\n                        type=\"date\"\n                        value={formData.startDate}\n                        onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"endDate\">Data de Fim *</Label>\n                      <Input\n                        id=\"endDate\"\n                        type=\"date\"\n                        value={formData.endDate}\n                        onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isActive\"\n                      checked={formData.isActive}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                    />\n                    <Label htmlFor=\"isActive\">Promoção ativa</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsNewPromotionModalOpen(false);\n                        setEditingPromotion(null);\n                        resetForm();\n                      }}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createPromotionMutation.isPending || updatePromotionMutation.isPending}\n                    >\n                      {createPromotionMutation.isPending || updatePromotionMutation.isPending\n                        ? \"Salvando...\"\n                        : editingPromotion\n                        ? \"Atualizar\"\n                        : \"Criar\"}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"space-y-6\">\n          {/* Promotions Grid */}\n          {promotionsLoading ? (\n            <Card>\n              <CardContent className=\"p-6\">\n                <p className=\"text-muted-foreground\">Carregando promoções...</p>\n              </CardContent>\n            </Card>\n          ) : promotions && promotions.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {promotions.map((promotion) => {\n                const isActive = isPromotionActive(promotion.startDate, promotion.endDate) && promotion.isActive;\n                const originalPrice = promotion.servicePrice || 0;\n                const discountedPrice = calculateDiscountedPrice(originalPrice, promotion.discountType, promotion.discountValue);\n\n                return (\n                  <Card key={promotion.id} className=\"relative\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h3 className=\"text-lg font-semibold text-foreground\">{promotion.name}</h3>\n                            <Badge variant={isActive ? \"default\" : \"secondary\"}>\n                              {isActive ? \"Ativa\" : \"Inativa\"}\n                            </Badge>\n                          </div>\n                          {promotion.description && (\n                            <p className=\"text-sm text-muted-foreground mb-3\">\n                              {promotion.description}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3 mb-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Tag className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"font-medium\">{promotion.serviceName}</span>\n                        </div>\n                        \n                        <div className=\"bg-green-50 p-3 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-sm text-gray-600\">Preço Original:</span>\n                            <span className=\"text-sm line-through text-gray-500\">\n                              {formatCurrency(originalPrice)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium text-green-700\">Preço Promocional:</span>\n                            <span className=\"text-lg font-bold text-green-600\">\n                              {formatCurrency(discountedPrice)}\n                            </span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <Percent className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-muted-foreground\">\n                            {promotion.discountType === \"percentage\" \n                              ? `${promotion.discountValue}% de desconto`\n                              : `R$ ${(promotion.discountValue / 100).toFixed(2)} de desconto`}\n                          </span>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(promotion.startDate).toLocaleDateString('pt-BR')} - {new Date(promotion.endDate).toLocaleDateString('pt-BR')}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEdit(promotion)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDelete(promotion.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Tag className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">\n                  Você ainda não tem promoções cadastradas\n                </p>\n                <Button\n                  onClick={() => setIsNewPromotionModalOpen(true)}\n                >\n                  Criar Primeira Promoção\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":23004},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, TrendingUp, PieChart, BarChart3 } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\n\ninterface MerchantStats {\n  total: number;\n  active: number;\n  pending: number;\n  inactive: number;\n  thisMonth: number;\n}\n\nexport default function Reports() {\n  const { data: stats, isLoading } = useQuery<MerchantStats>({\n    queryKey: [\"/api/merchants/stats\"],\n    enabled: authService.getState().isAuthenticated,\n  });\n\n  const handleExport = () => {\n    // Implementar exportação de dados\n    console.log(\"Exportar relatórios\");\n  };\n\n  const calculateGrowthRate = () => {\n    if (!stats) return 0;\n    // Simulação de crescimento baseado nos dados atuais\n    const growthRate = Math.round((stats.thisMonth / Math.max(stats.total - stats.thisMonth, 1)) * 100);\n    return Math.min(growthRate, 100);\n  };\n\n  const calculateSatisfactionRate = () => {\n    if (!stats) return 0;\n    // Simulação de taxa de satisfação baseada na proporção de ativos\n    return Math.round((stats.active / Math.max(stats.total, 1)) * 100);\n  };\n\n  const summaryStats = [\n    {\n      title: \"Receita Estimada\",\n      value: \"R$ 12.450\",\n      description: \"Baseado em comerciantes ativos\",\n      icon: TrendingUp,\n      color: \"text-primary\",\n    },\n    {\n      title: \"Crescimento Mensal\",\n      value: `+${calculateGrowthRate()}%`,\n      description: \"Novos comerciantes este mês\",\n      icon: BarChart3,\n      color: \"text-green-600\",\n    },\n    {\n      title: \"Taxa de Aprovação\",\n      value: `${calculateSatisfactionRate()}%`,\n      description: \"Comerciantes aprovados/total\",\n      icon: PieChart,\n      color: \"text-blue-600\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-reports\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Relatórios</h2>\n              <Button \n                onClick={handleExport}\n                variant=\"secondary\"\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-export\"\n              >\n                <Download className=\"w-4 h-4\" />\n                <span>Exportar</span>\n              </Button>\n            </div>\n\n            {/* Report Charts Grid */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Merchants Growth Chart */}\n              <Card data-testid=\"card-growth-chart\">\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Crescimento de Comerciantes</h3>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center text-muted-foreground\">\n                      <TrendingUp className=\"w-12 h-12 mx-auto mb-2\" />\n                      <p>Gráfico de crescimento será implementado</p>\n                      <p className=\"text-sm\">Total atual: {stats?.total || 0} comerciantes</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Status Distribution */}\n              <Card data-testid=\"card-status-distribution\">\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Distribuição por Status</h3>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center text-muted-foreground\">\n                      <PieChart className=\"w-12 h-12 mx-auto mb-2\" />\n                      <p>Gráfico de distribuição será implementado</p>\n                      {stats && (\n                        <div className=\"text-sm mt-2 space-y-1\">\n                          <p>Ativos: {stats.active}</p>\n                          <p>Pendentes: {stats.pending}</p>\n                          <p>Inativos: {stats.inactive}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Summary Stats */}\n            <Card data-testid=\"card-summary-stats\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Resumo Estatístico</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"text-center text-muted-foreground\" data-testid=\"loading-stats\">\n                    Carregando estatísticas...\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    {summaryStats.map((stat, index) => {\n                      const Icon = stat.icon;\n                      return (\n                        <div key={index} className=\"text-center\" data-testid={`stat-summary-${index}`}>\n                          <div className=\"flex justify-center mb-2\">\n                            <Icon className={`w-8 h-8 ${stat.color}`} />\n                          </div>\n                          <div className={`text-3xl font-bold mb-2 ${stat.color}`}>\n                            {stat.value}\n                          </div>\n                          <p className=\"text-muted-foreground text-sm\">{stat.description}</p>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Additional Reports Section */}\n            <Card data-testid=\"card-additional-reports\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Relatórios Detalhados</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col space-y-2\">\n                    <BarChart3 className=\"w-6 h-6\" />\n                    <span>Relatório de Atividade</span>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col space-y-2\">\n                    <PieChart className=\"w-6 h-6\" />\n                    <span>Análise de Performance</span>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col space-y-2\">\n                    <TrendingUp className=\"w-6 h-6\" />\n                    <span>Tendências Mensais</span>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col space-y-2\">\n                    <Download className=\"w-6 h-6\" />\n                    <span>Relatório Completo</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7557},"client/src/pages/schedule.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Calendar, Clock, Phone, Mail, Plus, Edit, Trash2, User, DollarSign, UserCheck } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Appointment {\n  id: string;\n  serviceId: string;\n  clientName: string;\n  clientPhone: string;\n  clientEmail?: string;\n  appointmentDate: string;\n  appointmentTime: string;\n  status: \"pending\" | \"scheduled\" | \"confirmed\" | \"in_progress\" | \"completed\" | \"cancelled\" | \"late\" | \"no_show\" | \"rescheduled\";\n  notes?: string;\n  createdAt: string;\n  serviceName?: string;\n  servicePrice?: number;\n  employeeName?: string;\n  employeeId?: string;\n  actualStartTime?: string;\n  actualEndTime?: string;\n  rescheduleReason?: string;\n  newDate?: string;\n  newTime?: string;\n  arrivalTime?: string;\n}\n\nexport default function Schedule() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState(authService.getState().user);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Fetch appointments for selected date\n  const { data: appointments, isLoading } = useQuery<Appointment[]>({\n    queryKey: [\"/api/appointments\", { date: selectedDate }],\n    queryFn: async () => {\n      const response = await fetch(`/api/appointments?date=${selectedDate}`, {\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch appointments');\n      }\n      return response.json();\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\",\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await fetch(`/api/appointments/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({ status }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao atualizar agendamento\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Status do agendamento atualizado\",\n      });\n      // Invalidate all appointment-related queries to sync all dashboards\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      // Force refetch to update state immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/appointments\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAppointmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/appointments/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao excluir agendamento\");\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Agendamento excluído com sucesso\",\n      });\n      // Invalidate all appointment-related queries to sync all dashboards\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/occupied-times\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: \"Pendente\", variant: \"secondary\" as const },\n      scheduled: { label: \"Agendado\", variant: \"secondary\" as const },\n      confirmed: { label: \"Confirmado\", variant: \"default\" as const },\n      in_progress: { label: \"Em Andamento\", variant: \"default\" as const },\n      completed: { label: \"Concluído\", variant: \"secondary\" as const },\n      cancelled: { label: \"Cancelado\", variant: \"destructive\" as const },\n      late: { label: \"Atrasado\", variant: \"destructive\" as const },\n      no_show: { label: \"Não Compareceu\", variant: \"destructive\" as const },\n      rescheduled: { label: \"Reagendado\", variant: \"secondary\" as const },\n    };\n\n    // Verificar se o status existe e não é undefined/null\n    if (!status) {\n      return (\n        <Badge variant=\"secondary\">\n          Desconhecido\n        </Badge>\n      );\n    }\n\n    const config = statusConfig[status as keyof typeof statusConfig];\n\n    // Se o status não existe no config, usar um padrão\n    if (!config) {\n      return (\n        <Badge variant=\"secondary\">\n          {status}\n        </Badge>\n      );\n    }\n\n    return (\n      <Badge variant={config.variant}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const handleStatusChange = (appointmentId: string, newStatus: string) => {\n    updateStatusMutation.mutate({ id: appointmentId, status: newStatus });\n  };\n\n  const handleDeleteAppointment = (appointmentId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este agendamento?\")) {\n      deleteAppointmentMutation.mutate(appointmentId);\n    }\n  };\n\n  const filteredAppointments = appointments?.filter(appointment => {\n    if (statusFilter === \"all\") return true;\n    return appointment.status === statusFilter;\n  }) || [];\n\n  const sortedAppointments = filteredAppointments.sort((a, b) =>\n    a.appointmentTime.localeCompare(b.appointmentTime)\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <h1 className=\"text-2xl font-bold text-foreground\">Agenda</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/new-appointment\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                <span>Novo Agendamento</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"space-y-6\">\n          {/* Filters */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)}\n                    className=\"w-auto\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">Status:</span>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-auto min-w-[150px]\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos</SelectItem>\n                      <SelectItem value=\"pending\">Pendente</SelectItem>\n                      <SelectItem value=\"scheduled\">Agendado</SelectItem>\n                      <SelectItem value=\"confirmed\">Confirmado</SelectItem>\n                      <SelectItem value=\"in_progress\">Em Andamento</SelectItem>\n                      <SelectItem value=\"completed\">Concluído</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                      <SelectItem value=\"late\">Atrasado</SelectItem>\n                      <SelectItem value=\"no_show\">Não Compareceu</SelectItem>\n                      <SelectItem value=\"rescheduled\">Reagendado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Appointments List */}\n          <div className=\"space-y-4\">\n            {isLoading ? (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <p className=\"text-muted-foreground\">Carregando agendamentos...</p>\n                </CardContent>\n              </Card>\n            ) : sortedAppointments.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    {appointments?.length === 0\n                      ? \"Nenhum agendamento para esta data\"\n                      : \"Nenhum agendamento encontrado com os filtros aplicados\"}\n                  </p>\n                  <Button\n                    onClick={() => setLocation(\"/new-appointment\")}\n                    className=\"mt-4\"\n                  >\n                    Criar Novo Agendamento\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              sortedAppointments.map((appointment) => (\n                <Card key={appointment.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 space-y-3\">\n                        {/* Status e Horário */}\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-4 h-4 text-orange-600\" />\n                            <span className=\"font-medium text-lg\">\n                              {appointment.status === \"in_progress\" || appointment.status === \"completed\" ? (\n                                <>\n                                  {appointment.actualStartTime ? (\n                                    <span className=\"text-blue-600 font-semibold\">\n                                      Iniciado: {appointment.actualStartTime}\n                                    </span>\n                                  ) : (\n                                    <span>Agendado: {appointment.appointmentTime}</span>\n                                  )}\n                                  {appointment.status === \"completed\" && appointment.actualEndTime && (\n                                    <span className=\"text-green-600 font-semibold ml-2\">\n                                      - Finalizado: {appointment.actualEndTime}\n                                    </span>\n                                  )}\n                                </>\n                              ) : (\n                                <>\n                                  {appointment.appointmentTime}\n                                  <span className=\"text-gray-500 text-xs ml-1\">(agendado)</span>\n                                </>\n                              )}\n                            </span>\n                          </div>\n                          {getStatusBadge(appointment.status)}\n                        </div>\n\n                        {/* Informações do Cliente */}\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <User className=\"w-4 h-4 text-green-600\" />\n                            <span className=\"font-medium text-foreground\">{appointment.clientName}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                            <Phone className=\"w-4 h-4 text-blue-600\" />\n                            <span>{appointment.clientPhone}</span>\n                          </div>\n                          {appointment.clientEmail && (\n                            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                              <Mail className=\"w-4 h-4 text-cyan-600\" />\n                              <span>{appointment.clientEmail}</span>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Informações do Serviço */}\n                        {appointment.serviceName && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-purple-600\" />\n                            <span className=\"text-sm font-medium text-purple-600\">\n                              Serviço: {appointment.serviceName}\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Preço do Serviço */}\n                        {appointment.servicePrice !== undefined && (\n                          <div className=\"flex items-center space-x-2\">\n                            <DollarSign className=\"w-4 h-4 text-green-600\" />\n                            <span className=\"text-sm font-medium text-green-600\">\n                              Valor: R$ {(appointment.servicePrice / 100).toFixed(2)}\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Funcionário Responsável */}\n                        {appointment.employeeName && (\n                          <div className=\"flex items-center space-x-2\">\n                            <UserCheck className=\"w-4 h-4 text-blue-600\" />\n                            <span className=\"text-sm font-medium text-blue-600\">\n                              Atendente: {appointment.employeeName}\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Duração Real */}\n                        {appointment.actualStartTime && appointment.actualEndTime && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-4 h-4 text-purple-600\" />\n                            <span className=\"text-xs text-purple-600 font-medium\">\n                              Duração real: {(() => {\n                                const [startHour, startMin] = appointment.actualStartTime.split(':').map(Number);\n                                const [endHour, endMin] = appointment.actualEndTime.split(':').map(Number);\n                                const startMinutes = startHour * 60 + startMin;\n                                const endMinutes = endHour * 60 + endMin;\n                                const duration = endMinutes - startMinutes;\n                                const hours = Math.floor(duration / 60);\n                                const minutes = duration % 60;\n                                return hours > 0 ? `${hours}h ${minutes}min` : `${minutes}min`;\n                              })()}\n                            </span>\n                          </div>\n                        )}\n\n\n                        {/* Observações */}\n                        {appointment.notes && (\n                          <div className=\"flex items-start space-x-2\">\n                            <Edit className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <span className=\"text-sm text-muted-foreground\">\n                              Obs: {appointment.notes}\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Motivo do Reagendamento */}\n                        {appointment.rescheduleReason && (\n                          <div className=\"flex items-start space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-orange-600 mt-0.5\" />\n                            <span className=\"text-sm text-orange-600\">\n                              Motivo do reagendamento: {appointment.rescheduleReason}\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Data de Reagendamento */}\n                        {appointment.status === \"rescheduled\" && appointment.newDate && appointment.newTime && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-blue-600\" />\n                            <span className=\"text-sm font-medium text-blue-600\">\n                              Reagendado para: {new Date(appointment.newDate).toLocaleDateString('pt-BR')} às {appointment.newTime}\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Horário de Chegada */}\n                        {appointment.arrivalTime && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-4 h-4 text-green-600\" />\n                            <span className=\"text-sm text-green-600 font-medium\">\n                              Chegada: {appointment.arrivalTime}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        {(appointment.status === \"pending\" || appointment.status === \"scheduled\") && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleStatusChange(appointment.id, \"confirmed\")}\n                          >\n                            Confirmar\n                          </Button>\n                        )}\n                        {appointment.status === \"confirmed\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleStatusChange(appointment.id, \"in_progress\")}\n                          >\n                            Iniciar\n                          </Button>\n                        )}\n                        {appointment.status === \"in_progress\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleStatusChange(appointment.id, \"completed\")}\n                          >\n                            Concluir\n                          </Button>\n                        )}\n                        <Select\n                          value={appointment.status}\n                          onValueChange={(status) => handleStatusChange(appointment.id, status)}\n                        >\n                          <SelectTrigger className=\"w-auto\">\n                            <Edit className=\"w-4 h-4\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"pending\">Pendente</SelectItem>\n                            <SelectItem value=\"scheduled\">Agendado</SelectItem>\n                            <SelectItem value=\"confirmed\">Confirmado</SelectItem>\n                            <SelectItem value=\"in_progress\">Em Andamento</SelectItem>\n                            <SelectItem value=\"completed\">Concluído</SelectItem>\n                            <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                            <SelectItem value=\"late\">Atrasado</SelectItem>\n                            <SelectItem value=\"no_show\">Não Compareceu</SelectItem>\n                            <SelectItem value=\"rescheduled\">Reagendado</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDeleteAppointment(appointment.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":22593},"client/src/pages/services.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ArrowLeft, Plus, Edit, Trash2, DollarSign, Clock, Users } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface Service {\n  id: string;\n  merchantId: string;\n  name: string;\n  description?: string;\n  price: number;\n  duration: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function Services() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [user, setUser] = useState(authService.getState().user);\n  const [isNewServiceModalOpen, setIsNewServiceModalOpen] = useState(false);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    duration: \"\",\n    isActive: true,\n  });\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n      if (!state.isAuthenticated) {\n        setLocation(\"/login\");\n      }\n    });\n    // Initial check for authentication\n    if (!authService.getState().isAuthenticated) {\n      setLocation(\"/login\");\n    }\n    return unsubscribe;\n  }, [setLocation]);\n\n  // Fetch services - use user ID in query key to prevent cache conflicts between merchants\n  const { data: services, isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\", user?.role, user?.id, user?.email], // Include role and user details for strict isolation\n    queryFn: async () => {\n      console.log(`\\n=== 🎯 FRONTEND SERVICES FETCH DEBUG ===`);\n      console.log(`👤 Current user:`, {\n        id: user?.id?.substring(0, 8) + \"...\",\n        email: user?.email,\n        role: user?.role,\n        name: user?.name,\n        ownerName: user?.ownerName\n      });\n      console.log(`🔐 Auth state:`, {\n        isAuthenticated: authService.getState().isAuthenticated,\n        hasToken: !!authService.getState().token,\n        userEmail: authService.getState().user?.email\n      });\n\n      const token = authService.getState().token;\n      console.log(`🔑 Token for request: ${token ? 'PRESENT' : 'MISSING'}`);\n\n      console.log(`\\n📞 Making request to /api/services for merchant ${user?.email} (ID: ${user?.id?.substring(0, 8)}...)`);\n\n      const response = await fetch(\"/api/services\", {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      console.log(`\\n📡 Response status: ${response.status}`);\n      console.log(`📡 Response headers:`, Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        console.error(`❌ Request failed with status ${response.status}`);\n        if (response.status === 401) {\n          console.log(\"🚪 Unauthorized - redirecting to login\");\n          setLocation(\"/login\");\n        }\n        throw new Error(`Failed to fetch services: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(`\\n📊 Raw response data:`, data);\n      console.log(`📋 Frontend: Received ${data.length} services for user ${user?.email}:`);\n      data.forEach((s: Service, index: number) => {\n        const belongsToMe = s.merchantId === user?.id;\n        const status = belongsToMe ? \"✅ MINE\" : \"❌ OTHER\";\n        console.log(`  [${index}] \"${s.name}\" (ID: ${s.id.substring(0, 8)}...) merchantId: \"${s.merchantId.substring(0, 8)}...\" ${status}`);\n      });\n\n      // CRITICAL FRONTEND SECURITY CHECK: Ensure ALL services belong to current user\n      if (user?.role === \"merchant\") {\n        console.log(`\\n🔒 Performing frontend security check for merchant ${user.email} (ID: ${user.id?.substring(0, 8)}...)`);\n\n        const validServices = data.filter((service: Service) => service.merchantId === user.id);\n        const invalidServices = data.filter((service: Service) => service.merchantId !== user.id);\n\n        console.log(`🛡️  Frontend Security Results:`);\n        console.log(`✅ Valid services (belong to me): ${validServices.length}`);\n        console.log(`❌ Invalid services (data leak): ${invalidServices.length}`);\n\n        if (invalidServices.length > 0) {\n          console.error(`\\n🚨🚨🚨 FRONTEND SECURITY BREACH DETECTED! 🚨🚨🚨`);\n          console.error(`❌ Found ${invalidServices.length} services that don't belong to merchant ${user.email}:`);\n          invalidServices.forEach(service => {\n            console.error(`  - LEAKED: \"${service.name}\" (ID: ${service.id}) belongs to merchant: \"${service.merchantId}\"`);\n          });\n\n          console.error(`\\n📋 FRONTEND INCIDENT REPORT:`);\n          console.error(`- Current user: ${user.email} (${user.id})`);\n          console.error(`- Services leaked: ${invalidServices.length}`);\n          console.error(`- Leaked from merchants:`, Array.from(new Set(invalidServices.map(s => s.merchantId))));\n\n          console.error(`🚨 EMERGENCY SECURITY MEASURES ACTIVATED 🚨`);\n          console.error(`- Clearing all cache to prevent data contamination`);\n          console.error(`- Forcing logout to ensure security`);\n\n          // Emergency security measures\n          queryClient.clear();\n          authService.logout();\n          setLocation(\"/login\");\n          throw new Error(\"FALHA CRÍTICA DE SEGURANÇA: Dados de outros usuários detectados. Sistema bloqueado por segurança.\");\n        }\n\n        if (validServices.length !== data.length) {\n          console.warn(`⚠️  Frontend: Data inconsistency - received ${data.length} services but only ${validServices.length} are valid for merchant ${user.email}`);\n        }\n\n        console.log(`\\n✅ Frontend SECURITY VERIFICATION PASSED`);\n        console.log(`🎯 All ${validServices.length} services verified for merchant ${user.email}`);\n        console.log(`📋 Valid services:`, validServices.map(s => ({ id: s.id.substring(0, 8) + \"...\", name: s.name })));\n        console.log(`=== END FRONTEND SERVICES FETCH DEBUG ===\\n`);\n        return validServices;\n      }\n\n      console.log(`ℹ️  Non-merchant user - returning all data without filtering`);\n      console.log(`=== END FRONTEND SERVICES FETCH DEBUG ===\\n`);\n      return data;\n    },\n    enabled: authService.getState().isAuthenticated && user?.role === \"merchant\" && !!user?.id,\n    staleTime: 0, // Always refetch to ensure fresh data\n    gcTime: 0, // Don't keep cache for long\n    refetchOnMount: true, // Always refetch when component mounts\n    refetchOnReconnect: true, // Refetch when connection restored\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const response = await fetch(\"/api/services\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({\n          ...serviceData,\n          price: Math.round(parseFloat(serviceData.price.replace(\",\", \".\")) * 100), // Support Brazilian format and convert to cents\n          duration: parseInt(serviceData.duration),\n        }),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao criar serviço\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Serviço criado com sucesso\",\n      });\n      // Clear ALL service-related queries to prevent cross-contamination\n      queryClient.removeQueries({ queryKey: [\"/api/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchant/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      // Force refetch with new key\n      await queryClient.refetchQueries({ queryKey: [\"/api/services\", user?.id] });\n      resetForm();\n      setIsNewServiceModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServiceMutation = useMutation({\n    mutationFn: async ({ id, serviceData }: { id: string; serviceData: any }) => {\n      const response = await fetch(`/api/services/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n        body: JSON.stringify({\n          ...serviceData,\n          price: Math.round(parseFloat(serviceData.price.replace(\",\", \".\")) * 100), // Support Brazilian format and convert to cents\n          duration: parseInt(serviceData.duration),\n        }),\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao atualizar serviço\");\n      }\n\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Serviço atualizado com sucesso\",\n      });\n      // Clear ALL service-related queries to prevent cross-contamination\n      queryClient.removeQueries({ queryKey: [\"/api/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      // Force refetch with new key\n      await queryClient.refetchQueries({ queryKey: [\"/api/services\", user?.id] });\n      resetForm();\n      setEditingService(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/services/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${authService.getState().token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setLocation(\"/login\");\n        }\n        const error = await response.json();\n        throw new Error(error.message || \"Erro ao excluir serviço\");\n      }\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Serviço excluído com sucesso\",\n      });\n      // Clear ALL service-related queries to prevent cross-contamination\n      queryClient.removeQueries({ queryKey: [\"/api/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchant/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/availability\"] });\n\n      // Force refetch with new key\n      await queryClient.refetchQueries({ queryKey: [\"/api/services\", user?.id] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      duration: \"\",\n      isActive: true,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.name || !formData.price || !formData.duration) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingService) {\n      updateServiceMutation.mutate({ id: editingService.id, serviceData: formData });\n    } else {\n      createServiceMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (service: Service) => {\n    setEditingService(service);\n    setFormData({\n      name: service.name,\n      description: service.description || \"\",\n      price: (service.price / 100).toString(),\n      duration: service.duration.toString(),\n      isActive: service.isActive,\n    });\n  };\n\n  const handleDelete = (serviceId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este serviço?\")) {\n      deleteServiceMutation.mutate(serviceId);\n    }\n  };\n\n  const toggleServiceStatus = (service: Service) => {\n    updateServiceMutation.mutate({\n      id: service.id,\n      serviceData: {\n        name: service.name,\n        description: service.description,\n        price: (service.price / 100).toString(), // Convert cents to reais (same format as form input)\n        duration: service.duration.toString(),\n        isActive: !service.isActive,\n      }\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/merchant-dashboard\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Voltar</span>\n              </Button>\n              <h1 className=\"text-2xl font-bold text-foreground\">Gerenciar Serviços</h1>\n            </div>\n            <Dialog\n              open={isNewServiceModalOpen || !!editingService}\n              onOpenChange={(open) => {\n                if (!open) {\n                  setIsNewServiceModalOpen(false);\n                  setEditingService(null);\n                  resetForm();\n                }\n              }}\n            >\n              <DialogTrigger asChild>\n                <Button\n                  onClick={() => setIsNewServiceModalOpen(true)}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span>Novo Serviço</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[600px]\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingService ? \"Editar Serviço\" : \"Novo Serviço\"}\n                  </DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Nome do Serviço *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Ex: Corte masculino\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Descrição</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={formData.description}\n                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Descrição do serviço...\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"price\">Preço (R$) *</Label>\n                      <div className=\"relative\">\n                        <DollarSign className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          id=\"price\"\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          value={formData.price}\n                          onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                          placeholder=\"0,00\"\n                          className=\"pl-10\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"duration\">Duração (minutos) *</Label>\n                      <div className=\"relative\">\n                        <Clock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          id=\"duration\"\n                          type=\"number\"\n                          min=\"15\"\n                          step=\"15\"\n                          value={formData.duration}\n                          onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n                          placeholder=\"30\"\n                          className=\"pl-10\"\n                          required\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isActive\"\n                      checked={formData.isActive}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                    />\n                    <Label htmlFor=\"isActive\">Serviço ativo</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsNewServiceModalOpen(false);\n                        setEditingService(null);\n                        resetForm();\n                      }}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createServiceMutation.isPending || updateServiceMutation.isPending}\n                    >\n                      {createServiceMutation.isPending || updateServiceMutation.isPending\n                        ? \"Salvando...\"\n                        : editingService\n                        ? \"Atualizar\"\n                        : \"Criar\"}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        <div className=\"space-y-6\">\n          {/* Services Grid */}\n          {isLoading ? (\n            <Card>\n              <CardContent className=\"p-6\">\n                <p className=\"text-muted-foreground\">Carregando serviços...</p>\n              </CardContent>\n            </Card>\n          ) : services && services.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {services.map((service) => (\n                <Card key={service.id} className=\"relative\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <h3 className=\"text-lg font-semibold text-foreground\">{service.name}</h3>\n                          <Badge variant={service.isActive ? \"default\" : \"secondary\"}>\n                            {service.isActive ? \"Ativo\" : \"Inativo\"}\n                          </Badge>\n                        </div>\n                        {service.description && (\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            {service.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                        {(service as any).hasPromotion ? (\n                          <div className=\"flex flex-col\">\n                            <span className=\"text-sm line-through text-gray-500\">\n                              R$ {((service as any).originalPrice / 100).toFixed(2)}\n                            </span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-medium text-green-600\">\n                                R$ {((service as any).promotionalPrice / 100).toFixed(2)}\n                              </span>\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                PROMOÇÃO\n                              </Badge>\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"font-medium\">R$ {(service.price / 100).toFixed(2)}</span>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {service.duration} minutos\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Switch\n                          checked={service.isActive}\n                          onCheckedChange={() => toggleServiceStatus(service)}\n                        />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {service.isActive ? \"Ativo\" : \"Inativo\"}\n                        </span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEdit(service)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDelete(service.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">\n                  Você ainda não tem serviços cadastrados\n                </p>\n                <Button\n                  onClick={() => setIsNewServiceModalOpen(true)}\n                >\n                  Criar Primeiro Serviço\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":24125},"client/src/components/auth/change-password-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock, Eye, EyeOff } from \"lucide-react\";\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Senha atual é obrigatória\"),\n  newPassword: z.string().min(6, \"Nova senha deve ter pelo menos 6 caracteres\"),\n  confirmPassword: z.string().min(1, \"Confirmação de senha é obrigatória\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Nova senha e confirmação devem ser iguais\",\n  path: [\"confirmPassword\"],\n});\n\ntype ChangePasswordFormData = z.infer<typeof changePasswordSchema>;\n\nexport default function ChangePasswordForm() {\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<ChangePasswordFormData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordFormData) => {\n      console.log(\"Enviando dados para alteração de senha:\", {\n        currentPassword: \"***\",\n        newPassword: \"***\",\n        confirmPassword: \"***\"\n      });\n      \n      const response = await apiRequest(\"POST\", \"/api/auth/change-password\", {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword,\n        confirmPassword: data.confirmPassword,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: \"Erro desconhecido\" }));\n        console.error(\"Erro na API de alteração de senha:\", errorData);\n        throw new Error(errorData.message || \"Erro ao alterar senha\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log(\"Senha alterada com sucesso:\", data);\n      toast({\n        title: \"Sucesso\",\n        description: \"Senha alterada com sucesso!\",\n      });\n      form.reset();\n    },\n    onError: (error: any) => {\n      console.error(\"Erro na mutation de alteração de senha:\", error);\n      const message = error?.message || \"Erro ao alterar senha\";\n      toast({\n        title: \"Erro\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ChangePasswordFormData) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\" data-testid=\"card-change-password\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-title\">\n          <Lock className=\"w-5 h-5\" />\n          Alterar Senha\n        </CardTitle>\n        <CardDescription data-testid=\"text-description\">\n          Altere sua senha de acesso ao sistema\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"form-change-password\">\n            <FormField\n              control={form.control}\n              name=\"currentPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel data-testid=\"label-current-password\">Senha Atual</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        type={showCurrentPassword ? \"text\" : \"password\"}\n                        placeholder=\"Digite sua senha atual\"\n                        data-testid=\"input-current-password\"\n                        {...field}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-2 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                        data-testid=\"button-toggle-current-password\"\n                      >\n                        {showCurrentPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage data-testid=\"error-current-password\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel data-testid=\"label-new-password\">Nova Senha</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        type={showNewPassword ? \"text\" : \"password\"}\n                        placeholder=\"Digite sua nova senha (mínimo 6 caracteres)\"\n                        data-testid=\"input-new-password\"\n                        {...field}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-2 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowNewPassword(!showNewPassword)}\n                        data-testid=\"button-toggle-new-password\"\n                      >\n                        {showNewPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage data-testid=\"error-new-password\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel data-testid=\"label-confirm-password\">Confirmar Nova Senha</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Digite novamente sua nova senha\"\n                        data-testid=\"input-confirm-password\"\n                        {...field}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-2 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        data-testid=\"button-toggle-confirm-password\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage data-testid=\"error-confirm-password\" />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={changePasswordMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {changePasswordMutation.isPending ? \"Alterando...\" : \"Alterar Senha\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8174},"client/src/components/auth/merchant-signup-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertMerchantSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Crown, Gift } from \"lucide-react\";\n\ntype MerchantSignupData = z.infer<typeof insertMerchantSchema> & {\n  planType: \"trial\" | \"vip\";\n};\n\ninterface MerchantSignupFormProps {\n  onBack: () => void;\n}\n\nexport default function MerchantSignupForm({ onBack }: MerchantSignupFormProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [vipPrice, setVipPrice] = useState(\"50,00\"); // Default value\n  // Removed isRedirecting state that was blocking the redirect\n  const [step, setStep] = useState<\"info\" | \"plan\" | \"payment\">(\"info\");\n  \n  // PIX payment states\n  const [pixData, setPixData] = useState<{\n    payment_id?: string;\n    qr_code?: string;\n    qr_code_base64?: string;\n    expires_at?: Date;\n  } | null>(null);\n  const [paymentStatus, setPaymentStatus] = useState<'pending' | 'processing' | 'approved' | 'failed'>('pending');\n  const [isCheckingPayment, setIsCheckingPayment] = useState(false);\n\n  // Fetch VIP price from system settings\n  useEffect(() => {\n    const fetchVipPrice = async () => {\n      try {\n        const response = await fetch('/api/public/plan-pricing');\n        if (response.ok) {\n          const pricing = await response.json();\n          setVipPrice(pricing.vipPrice.replace('.', ','));\n        }\n      } catch (error) {\n        console.log(\"Could not fetch VIP price, using default\");\n      }\n    };\n\n    fetchVipPrice();\n  }, []);\n\n  // Create PIX payment\n  const createPixPayment = async (email: string, amount: string) => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/payment/create-pix', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          merchantEmail: email, \n          amount: parseFloat(amount.replace(',', '.'))\n        })\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        setPixData({\n          payment_id: result.payment_id,\n          qr_code: result.qr_code,\n          qr_code_base64: result.qr_code_base64,\n          expires_at: new Date(result.expires_at)\n        });\n        setPaymentStatus('processing');\n        startPaymentStatusCheck(result.payment_id);\n      } else {\n        throw new Error(result.message || 'Erro ao criar pagamento PIX');\n      }\n    } catch (error) {\n      console.error('Error creating PIX payment:', error);\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Não foi possível gerar o PIX. Tente novamente.\",\n        variant: \"destructive\",\n      });\n      setPaymentStatus('failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check payment status periodically\n  const startPaymentStatusCheck = (paymentId: string) => {\n    const checkInterval = setInterval(async () => {\n      try {\n        setIsCheckingPayment(true);\n        const response = await fetch(`/api/payment/status/${paymentId}`);\n        const result = await response.json();\n\n        if (result.status === 'approved') {\n          setPaymentStatus('approved');\n          clearInterval(checkInterval);\n          \n          toast({\n            title: \"Pagamento Aprovado!\",\n            description: \"Seu plano VIP foi ativado com sucesso.\",\n          });\n\n          // Proceed with registration with VIP plan\n          setTimeout(() => {\n            handleSignup();\n          }, 2000);\n        } else if (result.status === 'rejected' || result.status === 'cancelled') {\n          setPaymentStatus('failed');\n          clearInterval(checkInterval);\n          \n          toast({\n            title: \"Pagamento não aprovado\",\n            description: \"O pagamento foi rejeitado ou cancelado.\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error) {\n        console.error('Error checking payment status:', error);\n      } finally {\n        setIsCheckingPayment(false);\n      }\n    }, 3000); // Check every 3 seconds\n\n    // Stop checking after 30 minutes\n    setTimeout(() => {\n      clearInterval(checkInterval);\n      if (paymentStatus === 'processing') {\n        setPaymentStatus('failed');\n        toast({\n          title: \"Tempo Esgotado\",\n          description: \"O tempo para pagamento expirou. Tente novamente.\",\n          variant: \"destructive\",\n        });\n      }\n    }, 30 * 60 * 1000);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    setValue,\n  } = useForm<MerchantSignupData>({\n    resolver: zodResolver(insertMerchantSchema.extend({\n      planType: z.enum([\"trial\", \"vip\"]).default(\"trial\"),\n    })),\n    defaultValues: {\n      name: \"\",\n      ownerName: \"\",\n      email: \"\",\n      password: \"\",\n      phone: \"\",\n      address: \"\",\n      planType: \"trial\",\n    },\n  });\n\n  const selectedPlan = watch(\"planType\");\n\n  const onSubmitInfo = () => {\n    setStep(\"plan\");\n  };\n\n  const onSubmitPlan = async () => {\n    if (selectedPlan === \"vip\") {\n      setStep(\"payment\");\n      // Auto-create PIX payment when going to payment step\n      const formData = watch();\n      if (formData.email) {\n        await createPixPayment(formData.email, vipPrice);\n      }\n    } else {\n      handleSignup();\n    }\n  };\n\n  const handleSignup = async () => {\n    setIsLoading(true);\n    try {\n      const formData = watch();\n      console.log(\"Starting merchant registration for:\", formData.email);\n      \n      // Call the merchant registration API endpoint\n      const response = await fetch('/api/merchants/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      console.log(\"Registration response status:\", response.status);\n\n      if (response.ok) {\n        console.log(\"Merchant registration successful, showing toast and redirecting...\");\n        \n        toast({\n          title: \"Cadastro realizado com sucesso!\",\n          description: selectedPlan === \"trial\" \n            ? \"Sua conta foi criada com 10 dias grátis! Redirecionando para o login...\" \n            : \"Conta criada! Aguarde a confirmação do pagamento. Redirecionando para o login...\",\n        });\n        \n        // Use setTimeout to ensure the toast is shown before redirect\n        setTimeout(() => {\n          console.log(\"About to redirect to /login with automatic page refresh\");\n          \n          // Force navigation to login page with page refresh\n          // This ensures the page state is completely reset\n          window.location.replace(\"/login\");\n          \n          // Fallback in case replace doesn't work\n          setTimeout(() => {\n            console.log(\"Using href fallback\");\n            window.location.href = \"/login\";\n          }, 500);\n        }, 2000); // 2 second delay to show the toast\n      } else {\n        console.log(\"Registration failed with status:\", response.status);\n        const error = await response.json();\n        console.log(\"Registration error:\", error);\n        toast({\n          title: \"Erro no cadastro\",\n          description: error.message || \"Tente novamente\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Network or connection error during registration:\", error);\n      toast({\n        title: \"Erro de conexão\",\n        description: \"Não foi possível conectar ao servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderInfoStep = () => (\n    <>\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <CardTitle>Cadastre seu Salão</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Nome do Salão *</Label>\n            <Input\n              id=\"name\"\n              {...register(\"name\")}\n              placeholder=\"Salão Beauty\"\n              disabled={isLoading}\n            />\n            {errors.name && (\n              <p className=\"text-sm text-destructive\">{errors.name.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"ownerName\">Nome do Proprietário *</Label>\n            <Input\n              id=\"ownerName\"\n              {...register(\"ownerName\")}\n              placeholder=\"João Silva\"\n              disabled={isLoading}\n            />\n            {errors.ownerName && (\n              <p className=\"text-sm text-destructive\">{errors.ownerName.message}</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email *</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            {...register(\"email\")}\n            placeholder=\"joao@salaobeauty.com\"\n            disabled={isLoading}\n          />\n          {errors.email && (\n            <p className=\"text-sm text-destructive\">{errors.email.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">Senha *</Label>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            {...register(\"password\")}\n            placeholder=\"Mínimo 6 caracteres\"\n            disabled={isLoading}\n          />\n          {errors.password && (\n            <p className=\"text-sm text-destructive\">{errors.password.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"phone\">Telefone *</Label>\n          <Input\n            id=\"phone\"\n            {...register(\"phone\")}\n            placeholder=\"(11) 99999-9999\"\n            disabled={isLoading}\n          />\n          {errors.phone && (\n            <p className=\"text-sm text-destructive\">{errors.phone.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"address\">Endereço *</Label>\n          <Input\n            id=\"address\"\n            {...register(\"address\")}\n            placeholder=\"Rua das Flores, 123 - Centro\"\n            disabled={isLoading}\n          />\n          {errors.address && (\n            <p className=\"text-sm text-destructive\">{errors.address.message}</p>\n          )}\n        </div>\n\n        <Button \n          type=\"button\" \n          className=\"w-full\"\n          onClick={handleSubmit(onSubmitInfo)}\n          disabled={isLoading}\n        >\n          Continuar\n        </Button>\n      </CardContent>\n    </>\n  );\n\n  const renderPlanStep = () => (\n    <>\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setStep(\"info\")}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <CardTitle>Escolha seu Plano</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <RadioGroup \n          value={selectedPlan} \n          onValueChange={(value) => setValue(\"planType\", value as \"trial\" | \"vip\")}\n        >\n          {/* Teste Grátis */}\n          <div className=\"flex items-center space-x-3 border rounded-lg p-4 hover:bg-muted/50\">\n            <RadioGroupItem value=\"trial\" id=\"trial\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <Gift className=\"h-5 w-5 text-green-600\" />\n                <Label htmlFor=\"trial\" className=\"font-medium\">\n                  Teste Grátis - 10 Dias\n                </Label>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                  Recomendado\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Experimente todas as funcionalidades gratuitamente por 10 dias\n              </p>\n              <ul className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <li>✓ Agendamentos ilimitados</li>\n                <li>✓ Cadastro de clientes</li>\n                <li>✓ Controle de serviços</li>\n                <li>✓ Relatórios básicos</li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Plano VIP */}\n          <div className=\"flex items-center space-x-3 border rounded-lg p-4 hover:bg-muted/50\">\n            <RadioGroupItem value=\"vip\" id=\"vip\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <Crown className=\"h-5 w-5 text-amber-600\" />\n                <Label htmlFor=\"vip\" className=\"font-medium\">\n                  Plano VIP - 30 Dias\n                </Label>\n                <Badge className=\"bg-amber-100 text-amber-800\">\n                  R$ {vipPrice}/mês\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Acesso completo com recursos avançados por 30 dias\n              </p>\n              <ul className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <li>✓ Tudo do teste grátis</li>\n                <li>✓ Relatórios avançados</li>\n                <li>✓ Gestão de funcionários</li>\n                <li>✓ Sistema de penalidades</li>\n                <li>✓ Promoções personalizadas</li>\n                <li>✓ Suporte prioritário</li>\n              </ul>\n            </div>\n          </div>\n        </RadioGroup>\n\n        <Button \n          type=\"button\" \n          className=\"w-full\"\n          onClick={onSubmitPlan}\n          disabled={isLoading}\n        >\n          {selectedPlan === \"vip\" ? \"Ir para Pagamento\" : \"Criar Conta Gratuita\"}\n        </Button>\n      </CardContent>\n    </>\n  );\n\n  const renderPaymentStep = () => (\n    <>\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setStep(\"plan\")}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <CardTitle>Pagamento - Plano VIP</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"bg-muted/50 p-4 rounded-lg\">\n          <h3 className=\"font-medium mb-2\">Resumo do Pedido</h3>\n          <div className=\"flex justify-between\">\n            <span>Plano VIP - 30 dias</span>\n            <span className=\"font-medium\">R$ {vipPrice}</span>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium\">Pagamento via PIX</h3>\n          \n          {paymentStatus === 'pending' && !pixData && (\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Gerando código PIX...\n              </p>\n              {isLoading && (\n                <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n              )}\n            </div>\n          )}\n\n          {paymentStatus === 'processing' && pixData && (\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <h4 className=\"font-medium mb-2\">Escaneie o QR Code para pagar</h4>\n                <div className=\"bg-white p-4 rounded-lg inline-block border\">\n                  <img \n                    src={`data:image/png;base64,${pixData.qr_code_base64}`}\n                    alt=\"QR Code PIX\"\n                    className=\"w-48 h-48 mx-auto\"\n                  />\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Ou copie e cole o código PIX:\n                </p>\n                <div className=\"bg-muted p-2 rounded text-xs break-all mt-2\">\n                  {pixData.qr_code}\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"mt-2\"\n                  onClick={() => {\n                    if (pixData.qr_code) {\n                      navigator.clipboard.writeText(pixData.qr_code);\n                      toast({\n                        title: \"Código copiado!\",\n                        description: \"O código PIX foi copiado para a área de transferência.\",\n                      });\n                    }\n                  }}\n                >\n                  📋 Copiar Código PIX\n                </Button>\n              </div>\n\n              <div className=\"text-center space-y-2\">\n                <div className=\"flex items-center justify-center gap-2\">\n                  {isCheckingPayment && (\n                    <div className=\"animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full\"></div>\n                  )}\n                  <span className=\"text-sm text-blue-600\">\n                    Aguardando pagamento...\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  O pagamento será verificado automaticamente\n                </p>\n              </div>\n            </div>\n          )}\n\n          {paymentStatus === 'approved' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"text-green-600\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">✓</span>\n                </div>\n                <h4 className=\"font-medium text-lg\">Pagamento Aprovado!</h4>\n                <p className=\"text-sm\">Seu plano VIP foi ativado com sucesso.</p>\n              </div>\n            </div>\n          )}\n\n          {paymentStatus === 'failed' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"text-red-600\">\n                <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">✗</span>\n                </div>\n                <h4 className=\"font-medium text-lg\">Pagamento Não Aprovado</h4>\n                <p className=\"text-sm\">Houve um problema com o pagamento.</p>\n              </div>\n              <Button \n                variant=\"outline\"\n                onClick={() => {\n                  setPaymentStatus('pending');\n                  setPixData(null);\n                  const formData = watch();\n                  if (formData.email) {\n                    createPixPayment(formData.email, vipPrice);\n                  }\n                }}\n              >\n                Tentar Novamente\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          {paymentStatus === 'approved' && (\n            <Button \n              className=\"w-full\"\n              onClick={handleSignup}\n              disabled={isLoading}\n            >\n              {isLoading ? \"Finalizando...\" : \"Concluir Cadastro\"}\n            </Button>\n          )}\n          \n          <Button \n            variant=\"outline\" \n            className=\"w-full\"\n            onClick={() => {\n              setValue(\"planType\", \"trial\");\n              setStep(\"plan\");\n              setPaymentStatus('pending');\n              setPixData(null);\n            }}\n          >\n            Voltar ao Teste Grátis\n          </Button>\n        </div>\n      </CardContent>\n    </>\n  );\n\n  // Removed isRedirecting render that was blocking the redirect\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-accent/10 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl\">\n        <Card className=\"shadow-2xl border border-border\">\n          {step === \"info\" && renderInfoStep()}\n          {step === \"plan\" && renderPlanStep()}\n          {step === \"payment\" && renderPaymentStep()}\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20581},"client/src/components/layout/header.tsx":{"content":"import { LogOut, User } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Header() {\n  const [user, setUser] = useState(authService.getState().user);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe((state) => {\n      setUser(state.user);\n    });\n    return unsubscribe;\n  }, []);\n\n  const handleLogout = () => {\n    authService.logout();\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <span className=\"text-primary-foreground text-lg\">✂️</span>\n          </div>\n          <h1 className=\"text-xl font-semibold text-foreground\">Beauty Scheduler</h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <User className=\"w-4 h-4\" />\n            <span data-testid=\"user-email\">{user?.email}</span>\n          </div>\n          <button \n            onClick={handleLogout}\n            className=\"text-muted-foreground hover:text-foreground transition-colors p-2\"\n            title=\"Sair\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1545},"client/src/components/layout/sidebar.tsx":{"content":"import { BarChart3, Home, Store, ChevronLeft, ChevronRight, DollarSign, Users, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const [isMinimized, setIsMinimized] = useState(false);\n\n  const menuItems = [\n    {\n      href: \"/dashboard\",\n      icon: Home,\n      label: \"Dashboard\",\n    },\n    {\n      href: \"/merchants\",\n      icon: Store,\n      label: \"Comerciantes\",\n    },\n    {\n      href: \"/reports\",\n      icon: BarChart3,\n      label: \"Relatórios\",\n    },\n    {\n      href: \"/merchant-access\",\n      icon: Users,\n      label: \"Acesso dos Comerciantes\",\n    },\n    {\n      href: \"/admin-settings\",\n      icon: Settings,\n      label: \"Configurações\",\n    },\n  ];\n\n  return (\n    <aside\n      className={`bg-card border-r border-border h-screen sticky top-0 transition-all duration-300 ${\n        isMinimized ? \"w-16\" : \"w-64\"\n      }`}\n      data-testid=\"sidebar\"\n    >\n      <div className=\"p-4\">\n        <button\n          onClick={() => setIsMinimized(!isMinimized)}\n          className=\"w-full flex items-center justify-end mb-4 text-muted-foreground hover:text-foreground transition-colors\"\n          data-testid=\"sidebar-toggle\"\n        >\n          {isMinimized ? <ChevronRight className=\"w-4 h-4\" /> : <ChevronLeft className=\"w-4 h-4\" />}\n        </button>\n      </div>\n\n      <nav className=\"px-4 space-y-2\">\n        {menuItems.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n\n          return (\n            <Link\n              key={item.href}\n              href={item.href}\n              className={`flex items-center ${\n                isMinimized ? \"justify-center px-3\" : \"space-x-3 px-3\"\n              } py-2 rounded-md transition-colors ${\n                isActive\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              }`}\n              data-testid={`link-${item.label.toLowerCase()}`}\n              title={isMinimized ? item.label : undefined}\n            >\n              <Icon className=\"w-4 h-4 flex-shrink-0\" />\n              {!isMinimized && <span>{item.label}</span>}\n            </Link>\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}","size_bytes":2367},"client/src/components/merchants/merchant-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertMerchantSchema } from \"@shared/schema\";\nimport type { z } from \"zod\";\n\nconst merchantFormSchema = insertMerchantSchema.extend({\n  status: insertMerchantSchema.shape.status.default(\"active\"),\n});\n\ntype MerchantFormData = z.infer<typeof merchantFormSchema>;\n\ninterface MerchantFormProps {\n  onSubmit: (data: MerchantFormData) => Promise<void>;\n  onCancel: () => void;\n  initialData?: Partial<MerchantFormData>;\n  isLoading?: boolean;\n}\n\nexport default function MerchantForm({ \n  onSubmit, \n  onCancel, \n  initialData,\n  isLoading = false \n}: MerchantFormProps) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<MerchantFormData>({\n    resolver: zodResolver(merchantFormSchema),\n    defaultValues: {\n      name: initialData?.name || \"\",\n      ownerName: initialData?.ownerName || \"\",\n      email: initialData?.email || \"\",\n      password: initialData?.password || \"\",\n      phone: initialData?.phone || \"\",\n      address: initialData?.address || \"\",\n      status: initialData?.status || \"active\",\n    },\n  });\n\n  const handleFormSubmit = async (data: MerchantFormData) => {\n    await onSubmit(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-4\" data-testid=\"form-merchant\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"name\">Nome do Estabelecimento</Label>\n        <Input\n          id=\"name\"\n          {...register(\"name\")}\n          placeholder=\"Ex: Salão Bella Vista\"\n          data-testid=\"input-name\"\n        />\n        {errors.name && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-name\">\n            {errors.name.message}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"ownerName\">Nome Completo do Proprietário</Label>\n        <Input\n          id=\"ownerName\"\n          {...register(\"ownerName\")}\n          placeholder=\"Ex: Maria Silva Santos\"\n          data-testid=\"input-owner-name\"\n        />\n        {errors.ownerName && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-owner-name\">\n            {errors.ownerName.message}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          {...register(\"email\")}\n          placeholder=\"contato@salao.com\"\n          data-testid=\"input-email\"\n        />\n        {errors.email && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n            {errors.email.message}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"password\">Senha de Acesso</Label>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          {...register(\"password\")}\n          placeholder=\"Digite uma senha\"\n          data-testid=\"input-password\"\n        />\n        {errors.password && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-password\">\n            {errors.password.message}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"phone\">Telefone</Label>\n        <Input\n          id=\"phone\"\n          {...register(\"phone\")}\n          placeholder=\"(11) 98765-4321\"\n          data-testid=\"input-phone\"\n        />\n        {errors.phone && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-phone\">\n            {errors.phone.message}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"address\">Endereço</Label>\n        <Textarea\n          id=\"address\"\n          {...register(\"address\")}\n          placeholder=\"Endereço completo\"\n          rows={3}\n          className=\"resize-none\"\n          data-testid=\"input-address\"\n        />\n        {errors.address && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-address\">\n            {errors.address.message}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"flex space-x-3 pt-4\">\n        <Button \n          type=\"button\" \n          variant=\"secondary\"\n          onClick={onCancel}\n          className=\"flex-1\"\n          disabled={isLoading}\n          data-testid=\"button-cancel\"\n        >\n          Cancelar\n        </Button>\n        <Button \n          type=\"submit\" \n          className=\"flex-1\"\n          disabled={isLoading}\n          data-testid=\"button-submit\"\n        >\n          {isLoading ? \"Salvando...\" : initialData ? \"Atualizar\" : \"Criar\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":4924},"client/src/components/merchants/merchant-table.tsx":{"content":"import { Eye, Edit, Ban, Check, X, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Merchant } from \"@shared/schema\";\n\ninterface MerchantTableProps {\n  merchants: Merchant[];\n  onView: (merchant: Merchant) => void;\n  onEdit: (merchant: Merchant) => void;\n  onUpdateStatus: (merchantId: string, status: string) => void;\n  onDelete: (merchant: Merchant) => void;\n  isLoading?: boolean;\n}\n\nexport default function MerchantTable({ \n  merchants, \n  onView, \n  onEdit, \n  onUpdateStatus,\n  onDelete,\n  isLoading = false \n}: MerchantTableProps) {\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pendente</Badge>;\n      case \"inactive\":\n        return <Badge className=\"bg-red-100 text-red-800\">Inativo</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (date: Date | null | undefined) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleDateString(\"pt-BR\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border p-8\">\n        <div className=\"text-center text-muted-foreground\">\n          Carregando comerciantes...\n        </div>\n      </div>\n    );\n  }\n\n  if (merchants.length === 0) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border p-8\">\n        <div className=\"text-center text-muted-foreground\">\n          Nenhum comerciante encontrado.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border overflow-hidden\" data-testid=\"table-merchants\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Estabelecimento\n              </th>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Proprietário\n              </th>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Email\n              </th>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Telefone\n              </th>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Status\n              </th>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Cadastro\n              </th>\n              <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">\n                Ações\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {merchants.map((merchant) => (\n              <tr \n                key={merchant.id} \n                className=\"hover:bg-accent/50\"\n                data-testid={`row-merchant-${merchant.id}`}\n              >\n                <td className=\"px-6 py-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-primary text-xs\">🏪</span>\n                    </div>\n                    <span className=\"font-medium text-foreground\" data-testid={`text-name-${merchant.id}`}>\n                      {merchant.name}\n                    </span>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 text-sm text-muted-foreground\" data-testid={`text-owner-${merchant.id}`}>\n                  {merchant.ownerName}\n                </td>\n                <td className=\"px-6 py-4 text-sm text-muted-foreground\" data-testid={`text-email-${merchant.id}`}>\n                  {merchant.email}\n                </td>\n                <td className=\"px-6 py-4 text-sm text-muted-foreground\" data-testid={`text-phone-${merchant.id}`}>\n                  {merchant.phone}\n                </td>\n                <td className=\"px-6 py-4\" data-testid={`status-${merchant.id}`}>\n                  {getStatusBadge(merchant.status)}\n                </td>\n                <td className=\"px-6 py-4 text-sm text-muted-foreground\" data-testid={`text-created-${merchant.id}`}>\n                  {formatDate(merchant.createdAt)}\n                </td>\n                <td className=\"px-6 py-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onView(merchant)}\n                      title=\"Visualizar\"\n                      data-testid={`button-view-${merchant.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEdit(merchant)}\n                      title=\"Editar\"\n                      data-testid={`button-edit-${merchant.id}`}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    {merchant.status === \"pending\" ? (\n                      <>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onUpdateStatus(merchant.id, \"active\")}\n                          title=\"Aprovar\"\n                          className=\"text-green-600 hover:bg-green-100\"\n                          data-testid={`button-approve-${merchant.id}`}\n                        >\n                          <Check className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onUpdateStatus(merchant.id, \"inactive\")}\n                          title=\"Rejeitar\"\n                          className=\"text-destructive hover:bg-destructive/10\"\n                          data-testid={`button-reject-${merchant.id}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onUpdateStatus(\n                          merchant.id, \n                          merchant.status === \"active\" ? \"inactive\" : \"active\"\n                        )}\n                        title={merchant.status === \"active\" ? \"Desativar\" : \"Ativar\"}\n                        className=\"text-destructive hover:bg-destructive/10\"\n                        data-testid={`button-toggle-${merchant.id}`}\n                      >\n                        <Ban className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onDelete(merchant)}\n                      title=\"Excluir comerciante\"\n                      className=\"text-destructive hover:bg-destructive/10\"\n                      data-testid={`button-delete-${merchant.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7872},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}
./README_DEPLOY.md:# Deploy no Render - Projeto Agenda
./README_DEPLOY_RENDER.md:Este guia explica como fazer o deploy da aplicação Agenda no Render com migração automática das tabelas para PostgreSQL.
./README_DEPLOY_RENDER.md:- Agendamentos
./client/src/components/auth/merchant-signup-form.tsx:                <li>✓ Agendamentos ilimitados</li>
./client/src/pages/client-booking.tsx:        description: "Agendamento criado com sucesso",
./client/src/pages/client-booking.tsx:            <h1 className="text-3xl font-bold text-foreground">Novo Agendamento</h1>
./client/src/pages/client-booking.tsx:                <CardTitle>Agendar Serviço</CardTitle>
./client/src/pages/client-booking.tsx:                      {createAppointmentMutation.isPending ? "Agendando..." : "Confirmar Agendamento"}
./client/src/pages/client-booking.tsx:                      O salão está temporariamente fechado. Agendamentos só podem ser feitos para os próximos dias.
./client/src/pages/client-dashboard.tsx:        title: "Agendamento cancelado",
./client/src/pages/client-dashboard.tsx:        title: "Agendamento reagendado",
./client/src/pages/client-dashboard.tsx:      scheduled: { label: "Agendado", variant: "default" as const },
./client/src/pages/client-dashboard.tsx:            <h1 className="text-3xl font-bold text-foreground">Meus Agendamentos</h1>
./client/src/pages/client-dashboard.tsx:              <span>Novo Agendamento</span>
./client/src/pages/client-dashboard.tsx:                  <p className="text-sm text-muted-foreground">Próximos Agendamentos</p>
./client/src/pages/client-dashboard.tsx:                          {merchant.isOpen ? "Agendar Serviço" : "Salão Fechado"}
./client/src/pages/client-dashboard.tsx:                              Informações do Agendamento Cancelado
./client/src/pages/client-dashboard.tsx:                Próximos Agendamentos
./client/src/pages/client-dashboard.tsx:                                  <span>Agendado: {appointment.appointmentTime}</span>
./client/src/pages/client-dashboard.tsx:                  <span>Agendar</span>
./client/src/pages/client-dashboard.tsx:                        Agendar Este Serviço
./client/src/pages/client-dashboard.tsx:                                  <span>Agendado: {appointment.appointmentTime}</span>
./client/src/pages/client-dashboard.tsx:                Reagendar Agendamento
./client/src/pages/employee-dashboard.tsx:    scheduled: { label: "Agendado", className: "bg-blue-100 text-blue-700" },
./client/src/pages/employee-dashboard.tsx:        description: "Agendamento atualizado com sucesso",
./client/src/pages/employee-dashboard.tsx:        description: "Agendamento excluído com sucesso",
./client/src/pages/employee-dashboard.tsx:          description: "Agendamento reagendado com sucesso",
./client/src/pages/employee-dashboard.tsx:      title: "Agendamentos Ativos",
./client/src/pages/employee-dashboard.tsx:                    <h3 className="text-lg font-semibold text-foreground">Minha Agenda</h3>
./client/src/pages/employee-dashboard.tsx:                    <p className="text-sm text-muted-foreground">Agendamentos para a data selecionada</p>
./client/src/pages/employee-dashboard.tsx:                                        <span>Agendado: {appointment.appointmentTime}</span>
./client/src/pages/employee-dashboard.tsx:                                        Agendamento concluído - não pode ser reagendado
./client/src/pages/employee-dashboard.tsx:                                        Agendamento cancelado - não pode ser reagendado
./client/src/pages/employee-dashboard.tsx:                <h3 className="text-lg font-semibold text-foreground">Próximos Agendamentos</h3>
./client/src/pages/employee-dashboard.tsx:                <p className="text-sm text-muted-foreground">Agendamentos futuros confirmados</p>
./client/src/pages/merchant-dashboard.tsx:      title: "Agendamentos Hoje",
./client/src/pages/merchant-dashboard.tsx:      title: "Próximo Agendamento",
./client/src/pages/merchant-dashboard.tsx:                        <p className="font-medium text-foreground">Novo Agendamento</p>
./client/src/pages/merchant-dashboard.tsx:                        <p className="text-sm text-muted-foreground">Agendar um novo serviço</p>
./client/src/pages/merchant-dashboard.tsx:                        <p className="font-medium text-foreground">Ver Agenda</p>
./client/src/pages/merchant-dashboard.tsx:                <h3 className="text-lg font-semibold text-foreground">Todos Agendamentos</h3>
./client/src/pages/merchant-dashboard.tsx:                                        <span>Agendado: {appointment.appointmentTime}</span>
./client/src/pages/merchant-dashboard.tsx:                          {/* Ações do Agendamento */}
./client/src/pages/merchant-dashboard.tsx:                          {/* Opções de Pagamento para Agendamentos Concluídos */}
./client/src/pages/merchant-dashboard.tsx:                <p className="text-sm text-muted-foreground">Agendamentos concluídos aguardando pagamento</p>
./client/src/pages/merchant-settings.tsx:                <span>Políticas de Agendamento</span>
./client/src/pages/new-appointment.tsx:          description: "Agendamento criado com sucesso",
./client/src/pages/new-appointment.tsx:              <h1 className="text-2xl font-bold text-foreground">Novo Agendamento</h1>
./client/src/pages/new-appointment.tsx:                    <Label htmlFor="appointmentDate">Data do Agendamento *</Label>
./client/src/pages/new-appointment.tsx:                    {createAppointmentMutation.isPending ? "Criando..." : "Criar Agendamento"}
./client/src/pages/schedule.tsx:        description: "Agendamento excluído com sucesso",
./client/src/pages/schedule.tsx:      scheduled: { label: "Agendado", variant: "secondary" as const },
./client/src/pages/schedule.tsx:              <h1 className="text-2xl font-bold text-foreground">Agenda</h1>
./client/src/pages/schedule.tsx:                <span>Novo Agendamento</span>
./client/src/pages/schedule.tsx:                      <SelectItem value="scheduled">Agendado</SelectItem>
./client/src/pages/schedule.tsx:                    Criar Novo Agendamento
./client/src/pages/schedule.tsx:                                    <span>Agendado: {appointment.appointmentTime}</span>
./client/src/pages/schedule.tsx:                            <SelectItem value="scheduled">Agendado</SelectItem>
./server/email-service.ts:            <p>Sistema de Agendamento para Salões de Beleza</p>
./server/email-service.ts:            <p><strong>Beauty Scheduler</strong> - Sistema de Agendamento Profissional</p>
./server/email-service.ts:Beauty Scheduler - Sistema de Agendamento Profissional
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:      res.json({ message: "Agendamento removido com sucesso" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:      res.json({ message: "Agendamento cancelado com sucesso", appointment });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:      res.json({ message: "Agendamento reagendado com sucesso", appointment });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:      res.json({ message: "Agendamento marcado como atrasado", appointment });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:      res.json({ message: "Agendamento marcado como falta", appointment });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        message: "Agendamento cancelado com sucesso",
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:        return res.status(404).json({ message: "Agendamento não encontrado" });
./server/routes.ts:      res.json({ message: "Agendamento reagendado com sucesso", appointment });
./server/routes.ts:        description: `Beauty Scheduler - Renovação Plano VIP - Sistema Agendamento Salão`,
./server/sqlite-storage.ts:      return { canReschedule: false, reason: "Agendamento não encontrado" };
./server/sqlite-storage.ts:      return { canReschedule: false, reason: "Agendamento já foi finalizado ou cancelado" };
